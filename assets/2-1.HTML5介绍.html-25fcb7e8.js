import{_ as e,P as a,Q as i,a5 as l}from"./framework-3728cbf1.js";const t={},d=l(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>HTML5之前的HTML语法统称为H4。<br> HTML5和之后的新增语法，统称为H5。</p></div><h2 id="i-h5历史" tabindex="-1"><a class="header-anchor" href="#i-h5历史" aria-hidden="true">#</a> Ⅰ. H5历史</h2><h4 id="_1-html初期阶段" tabindex="-1"><a class="header-anchor" href="#_1-html初期阶段" aria-hidden="true">#</a> 1. HTML初期阶段</h4><ul><li>HTML是从2.0开始的</li><li>W3C从3.0开始接手</li><li>1997-1999,HTMl发展到4.0</li></ul><h4 id="_2-xhtml时代" tabindex="-1"><a class="header-anchor" href="#_2-xhtml时代" aria-hidden="true">#</a> 2. XHTML时代</h4><ul><li>1999,W3C提出XHTML1.0,并与CSS结合</li><li>XHTML1.0与HTML4.0是一样的,唯一不同是XHTML语法要求更严格.</li><li>XHTML1.1：与XHTML1.0一样,不同之处是,必须要求文档标记成XML文档，这造成了很多问题,很多浏览器无法支持.</li><li>XHTML2.0：随后升级到XTML2.0,该版本不再兼容之前的HTML,随后被所有浏览器厂商抛弃.各厂商退出W3C,自己组建了WATCHWG.</li><li>XHTML违背了博士塔尔法&quot;发送时要保守,接收时要开放&quot;.</li></ul><h4 id="_3-html5的诞生" tabindex="-1"><a class="header-anchor" href="#_3-html5的诞生" aria-hidden="true">#</a> 3. HTML5的诞生</h4><ul><li>WATCHWG的诞生：2004年各大浏览器厂商退出了W3C,自己组建了组织.开始对HTML4.0添加新标[H5诞生的伏笔]</li><li>W3C的反思：2007年,W3C开始反思,并组建了H5小组,开始在WATCHWG的基础上与他们一起进行开发.</li><li>H5的发展：至此,两个小组开始共同发展,维护一个H5标准.</li></ul><h4 id="_4-html组织" tabindex="-1"><a class="header-anchor" href="#_4-html组织" aria-hidden="true">#</a> 4. HTML组织</h4><ul><li>WATCHWG:各大浏览器厂商组成</li><li>W3C:发布HTML5规范</li><li>IETF:开发WebSocket协议.(HTML依赖此协议)</li></ul><h2 id="ii-h5设计理念" tabindex="-1"><a class="header-anchor" href="#ii-h5设计理念" aria-hidden="true">#</a> Ⅱ. H5设计理念</h2><p>设计理念相当于功能行动纲领,包括了兼容性,实用性,互用性等概念。</p><h4 id="_1-避免不必要的复杂性" tabindex="-1"><a class="header-anchor" href="#_1-避免不必要的复杂性" aria-hidden="true">#</a> 1. 避免不必要的复杂性</h4><p>尽可能的简化HTML文档.</p><p>例如:doctype；doctype是写给验证器看的,而不是给浏览器看的,浏览器要保证最大的兼容开放性,所以无论是什么doctype都不影响浏览器的解析.doctype是为了告诉验证器,让验证其按照该doctype来验证我的文档.</p><ul><li>H5之前的doctype：H5之前的doctype比较复杂,里面记录了多种信息,还有HTML的版本,以及W3C的官网等.</li><li>现在的doctype：非常简洁,按照H5的设计原理,HTML必须前后兼容,所以写现在是什么版本无意义.</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-支持已有的内容" tabindex="-1"><a class="header-anchor" href="#_2-支持已有的内容" aria-hidden="true">#</a> 2. 支持已有的内容</h4><p>H5兼容之前的HTML版本,兼容之前的标签写法。不管HTML标签写的再不规范,哪怕是缺少结束标签,大小写混乱,少了引号等.H5都会支持的。</p><p><strong>为什么这么做</strong></p><p>因为伯斯塔尔法则，HTML有自己的代码规范,但是H5不会强行执行这种规范,即使开发者违背,浏览器也照样解析,代码规范只是作为开发者约束自己开发习惯的一种规范.一种语法风格.</p><p><strong>lint工具</strong></p><p>可以使用lint工具来检查自己的代码是否符合开发规范。</p><h4 id="_3-解决现实的问题" tabindex="-1"><a class="header-anchor" href="#_3-解决现实的问题" aria-hidden="true">#</a> 3. 解决现实的问题</h4><p>其根本是,把一些原本就有但是之前的HTML不认可的语法变得符合规范。</p><p>举例 <code>&lt;a&gt;</code> 标签可以包含多个块状，这种写法是不符合之前HTML规范的，不被支持的(但是浏览器支持)，现在H5承认了这种写法。</p><h4 id="_4-求真务实" tabindex="-1"><a class="header-anchor" href="#_4-求真务实" aria-hidden="true">#</a> 4. 求真务实</h4><p>集思广益，在解决复杂问题时，查看民间的开发者都为解决这种问题提供了什么方案,并进行理解这些方案，并进行支持。</p><p>例如:H5新增的语义元素，可以用这些新增的语义标签,替换掉之前对应功能的div。</p><h4 id="_5-平稳退化" tabindex="-1"><a class="header-anchor" href="#_5-平稳退化" aria-hidden="true">#</a> 5. 平稳退化</h4><p>即新的标签浏览器不支持也不会造成困扰，每个标签都有旧的替代形式。也就是说，支持该标签就是锦上添花，不支持就正常显示，以此来达到技术与兼容的平稳发展。</p><p>例如: 表单的type属性，浏览器会把所有不认识的type属性都当成<code>type=text</code>。H5新增的属性会让显示的内容更好看，在没有这些属性的时候，通常都用<code>type=text</code>， 所以可以放心的用这些属性，如果浏览器支持当然好，不支持也没任何坏处。</p><h4 id="_6-最终用户优先" tabindex="-1"><a class="header-anchor" href="#_6-最终用户优先" aria-hidden="true">#</a> 6. 最终用户优先</h4><p>即当产生争议的时候，最终用户(开发者)的意见优先。</p><p>开发者(用户)&gt;提出者(作者)&gt;实现者(浏览器)&gt;标准制定者(W3C/WATCHWG)。</p><h2 id="iii-h5特性" tabindex="-1"><a class="header-anchor" href="#iii-h5特性" aria-hidden="true">#</a> Ⅲ. H5特性</h2><ul><li>兼容性：兼容所有现存的HTML。一旦浏览器不支持H5的某项功能，对应的备选行为就用悄悄运行。</li><li>合理性：H5新增的元素，属性或功能都是根据现实互联网中已经存在的各项技术和开发者的各项应用进行添加，而不是在实验室中进行虚构的新功能。比如Google分析了上百万网页发现大部分开发者都喜欢使用<code>&lt;div id=&#39;header&#39;&gt;</code>来标记页眉,于是直接提出了<code>&lt;header&gt;</code>页眉标签。</li><li>效率：H5设计理念中以开发者优先，所有功能首要考虑的是开发者的实用性。</li><li>安全性：引入了新的基于来源的安全模型。对各种API都适用，不用借助任何hack就能进行跨域安全对话。</li><li>分离：清晰的分离表现与内容方面，在所有可能的地方都努力进行了分离，如HTML与CSS。</li><li>简化：H5的口号是:简单至上，尽可能简化。</li><li>通用性 <ul><li>可访问性：对残障用户的的帮助(特殊的读屏标签)</li><li>媒体中立：可能的话，H5的功能在所有的浏览器和设备上都正常运行</li><li>支持所有语种：<code>&lt;ruby&gt;</code>元素，支持在东亚页面排版中用到的Ruby注释。</li></ul></li><li>无插件：在以前的web应用中，很多功能都需要通过插件和复杂的hack来实现。在H5中对这些功能都提供了原生的支持。 <ul><li>解决了插件可能存在的：被攻击、被阻止、安装失败、不兼容布局等问题.</li></ul></li></ul>`,37),h=[d];function n(r,c){return a(),i("div",null,h)}const o=e(t,[["render",n],["__file","2-1.HTML5介绍.html.vue"]]);export{o as default};
