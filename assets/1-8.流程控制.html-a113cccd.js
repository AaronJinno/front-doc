import{_ as n,o as a,c as s,e}from"./app-f9b28035.js";const i="/front-doc/img/basic/js/1-8-1.jpg",p={},t=e('<p>JS的程序是从上到下一行行执行的，通过流程控制语句可以控制程序执行的流程。使程序按照一定的条件来执行。</p><h2 id="i-分支语句" tabindex="-1"><a class="header-anchor" href="#i-分支语句" aria-hidden="true">#</a> Ⅰ. 分支语句</h2><p>通过条件判断来执行某个分支。</p><p>在执行某个语句之前进行判断，如果条件成立才会执行语句，条件不成立则语句不执行。</p><h4 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h4><p>程序执行过程中，不是一下子执行到底，而是会出现很多情况，每一种情况就是一个分支，需要单独处理。</p><figure><img src="'+i+`" alt="1-8-1" tabindex="0" loading="lazy"><figcaption>1-8-1</figcaption></figure><h4 id="_2-if条件判断语句" tabindex="-1"><a class="header-anchor" href="#_2-if条件判断语句" aria-hidden="true">#</a> 2. if条件判断语句</h4><p>if语句只控制紧随其后的语句，如果要控制多条语句，需要加{},使其变成代码块。也就是说，if语句后面可以不加{}，但是因为if只能控制一行语句，最好还是加{}，哪怕只有一行语句。</p><p>if语句是可以嵌套的。</p><h5 id="_2-1-单分支" tabindex="-1"><a class="header-anchor" href="#_2-1-单分支" aria-hidden="true">#</a> 2.1 单分支</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>boolen表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//code</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-双分支" tabindex="-1"><a class="header-anchor" href="#_2-2-双分支" aria-hidden="true">#</a> 2.2 双分支</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>boolen表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//code</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token comment">//code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-多分支" tabindex="-1"><a class="header-anchor" href="#_2-3-多分支" aria-hidden="true">#</a> 2.3 多分支</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>boolen表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//code</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>boolen表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//code</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>boolen表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//code</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token comment">//code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-switch分支语句" tabindex="-1"><a class="header-anchor" href="#_3-switch分支语句" aria-hidden="true">#</a> 3. switch分支语句</h4><p>变量的值与case的值必须是全等。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">case</span> 值<span class="token number">1</span><span class="token operator">:</span> <span class="token comment">//注意:匹配的时候值必须是===.</span>
        语句<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//不加break就算满足条件，也会继续执行其他的case。</span>
    <span class="token keyword">case</span> 值<span class="token number">2</span><span class="token operator">:</span>
        语句<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token operator">...</span>    
    <span class="token keyword">default</span> <span class="token comment">//所有比较结果都为false，则执行default语句。</span>
        语句<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-循环语句" tabindex="-1"><a class="header-anchor" href="#ii-循环语句" aria-hidden="true">#</a> Ⅱ. 循环语句</h2><p>语法与java类似，也有continue:跳过本次循环,直接执行下一次；和break:跳出循环。</p><p>同时，循环是可以嵌套的。</p><h4 id="_1-for循环" tabindex="-1"><a class="header-anchor" href="#_1-for循环" aria-hidden="true">#</a> 1. for循环</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//初始表达式；条件表达式；更新表达式；</span>
    <span class="token comment">//循环体</span>
<span class="token punctuation">}</span>

<span class="token comment">//for循环的三个部分都可以省略，也可以写外面</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//小心死循环</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-for-in循环" tabindex="-1"><a class="header-anchor" href="#_2-for-in循环" aria-hidden="true">#</a> 2. for in循环</h4><p>for in循环既可以遍历数组，又可以遍历对象的成员。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//每遍历一次，将该元素的下标赋值给变量</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-while-循环" tabindex="-1"><a class="header-anchor" href="#_3-while-循环" aria-hidden="true">#</a> 3. while()循环</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token comment">//初始表达式</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//条件表达式</span>
    <span class="token comment">//循环体;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//根据条件退出条件表达式</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//根据条件，退出当前循环，继续下一次循环。</span>
    <span class="token punctuation">}</span>
    i<span class="token operator">++</span> <span class="token comment">//定义一个更新表达式，每次循环后更新表达式</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-do-while-循环。" tabindex="-1"><a class="header-anchor" href="#_4-do-while-循环。" aria-hidden="true">#</a> 4. do...while()循环。</h4><p>至少执行一次循环。</p><h4 id="_5-break和continue" tabindex="-1"><a class="header-anchor" href="#_5-break和continue" aria-hidden="true">#</a> 5. break和continue</h4><p>这两个可以用在循环，不能用在if语句。</p><p>break会立即终止离他最近的哪个循环语句，而不是整个循环语句（如果是嵌套循环）。</p>`,34),c=[t];function o(l,d){return a(),s("div",null,c)}const u=n(p,[["render",o],["__file","1-8.流程控制.html.vue"]]);export{u as default};
