import{_ as n,o as s,c as a,e as t}from"./app-8888c5c9.js";const p={},e=t(`<p>数组也是一个内置对象，主要有以下方法：</p><h4 id="_1-push-向数组的末尾添加元素" tabindex="-1"><a class="header-anchor" href="#_1-push-向数组的末尾添加元素" aria-hidden="true">#</a> 1. push()：向数组的末尾添加元素</h4><p>添加一个或多个元素，并返回数组的新长度。</p><p>可以将添加的元素作为方法的参数传递，这样这些元素将自动添加到数组的末尾，比arr.length好用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;fote&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
cat<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;alice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不用重新赋给新变量，直接添加</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-pop-把数组的最后一个元素删除" tabindex="-1"><a class="header-anchor" href="#_2-pop-把数组的最后一个元素删除" aria-hidden="true">#</a> 2. pop()：把数组的最后一个元素删除</h4><p>返回值：将删除的元素作为返回值返回。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;fote&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
cat<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没有参数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-unshift-向数组的开头添加元素-一个或多个" tabindex="-1"><a class="header-anchor" href="#_3-unshift-向数组的开头添加元素-一个或多个" aria-hidden="true">#</a> 3. unshift()：向数组的开头添加元素（一个或多个）</h4><p>并返回新的数组长度，向前面插入元素后，其他的元素索引会依次调整。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;fote&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
cat<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">&#39;lucy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-shift-删除第一个元素" tabindex="-1"><a class="header-anchor" href="#_4-shift-删除第一个元素" aria-hidden="true">#</a> 4. shift()：删除第一个元素</h4><p>并将被删除的元素作为返回值返回。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;fote&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
cat<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-slice-start-end-截取数组的元素" tabindex="-1"><a class="header-anchor" href="#_5-slice-start-end-截取数组的元素" aria-hidden="true">#</a> 5. slice(start,end)：截取数组的元素</h4><ul><li>参数1：开始的索引位置</li><li>参数2：结束的索引位置，包含开始索引，不包含结束索引 <ul><li>该参数可以省略，此时会截取从开始索引截取到往后的所有元素。</li></ul></li><li>返回值：该方法不会改变元数组，而是将截取的元素封装到一个新数组放回。<br> 索引可以传递负值，这将从后往前计算。 -1 倒数第一个。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;camel&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> new_cat <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_cat<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-splice-删除数组的元素-可选择进行替换。" tabindex="-1"><a class="header-anchor" href="#_6-splice-删除数组的元素-可选择进行替换。" aria-hidden="true">#</a> 6. splice()：删除数组的元素，可选择进行替换。</h4><p>该函数会影响到元数组。</p><ul><li>参数1：开始的索引位置</li><li>参数2：删除的元素个数</li><li>参数3：可选，如果有，表示使用参数3代替删除的内容，替换的位置是开始索引位置前面。</li><li>返回值：删除的内容。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;camel&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> new_cat <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;faker&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>football<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-concat-合并数组生成一个新数组" tabindex="-1"><a class="header-anchor" href="#_7-concat-合并数组生成一个新数组" aria-hidden="true">#</a> 7. concat()：合并数组生成一个新数组</h4><p>可以连接两个或多个数组，并将新的数组返回。</p><p>该方法不会对原数组产生影响，参数不仅可以传数组，也可以传递单独的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;fote&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;pp&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;lory&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;steam&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> pets <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-join-将数组的元素连接成字符串" tabindex="-1"><a class="header-anchor" href="#_8-join-将数组的元素连接成字符串" aria-hidden="true">#</a> 8. join()：将数组的元素连接成字符串</h4><p>该方法不会对源数组产生影响，而是返回转换后的字符串。</p><p>在join()可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符，默认是逗号。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;fote&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-reverse-颠倒数组的顺序" tabindex="-1"><a class="header-anchor" href="#_9-reverse-颠倒数组的顺序" aria-hidden="true">#</a> 9. reverse()：颠倒数组的顺序</h4><p>该方法会直接修改源数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;fote&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
cat<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-sort-对数组进行排序" tabindex="-1"><a class="header-anchor" href="#_10-sort-对数组进行排序" aria-hidden="true">#</a> 10. sort()：对数组进行排序</h4><p>如果调用该方法时没有使用参数，将按字母顺序对数组中的元素进行排序，说得更精确点，是按照字符编码的顺序进行排序（哪怕是纯数字）。要实现这一点，首先应把数组的元素都转换成字符串（如有必要），以便进行比较。</p><ul><li>参数：可选。规定排序顺序。必须是函数。 <ul><li>回调函数需要定义两个形参，浏览器会分别使用数组中的元素作为实参去调用回调函数。</li><li>浏览器会根据会掉函数的返回值来决定元素的顺序，如果返回一个大于0的值，则元素会交互位置，如果返回一个小于0的值，则元素位置不变，如果返回一个0，则认为两个元素想等，也不交换位置。</li></ul></li><li>返回值：对数组的引用。请注意，数组在原数组上进行排序，不生成副本。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortby<span class="token punctuation">)</span>

arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//也可以直接 return a-b</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11-array-filter-对数组进行过滤" tabindex="-1"><a class="header-anchor" href="#_11-array-filter-对数组进行过滤" aria-hidden="true">#</a> 11. Array.filter：对数组进行过滤</h4><p>filter用于对数组进行过滤。它创建一个新数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><p>filter()不会对空数组进行检测、不会改变原始数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token punctuation">,</span>thisValue<span class="token punctuation">)</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> value<span class="token operator">&gt;</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//返回大于3的值</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_11-1-参数" tabindex="-1"><a class="header-anchor" href="#_11-1-参数" aria-hidden="true">#</a> 11.1 参数</h5><p>参数是一个回调函数，数组中的每个元素都会执行这个函数。且如果返回值为 true，则该元素被保留；返回false，则该元素剔除。</p><h5 id="_11-2-回调函数的参数" tabindex="-1"><a class="header-anchor" href="#_11-2-回调函数的参数" aria-hidden="true">#</a> 11.2 回调函数的参数</h5><ul><li>参数1：代表当前元素的值，必须</li><li>参数2：当前元素的索引，非必须</li><li>参数3：代表当前数组，可选</li></ul><h4 id="_12-slice-call和array-prototype-slice-call" tabindex="-1"><a class="header-anchor" href="#_12-slice-call和array-prototype-slice-call" aria-hidden="true">#</a> 12. [].slice.call和Array.prototype.slice.call</h4><p>slice()方法返回一个从开始到结束(不包括结束)选择的数组的一部分进行浅拷贝到一个新的数组对象,并且原对象不会被修改。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice <span class="token operator">===</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>他可以拷贝类数组对象，得到真数组对象。<br> 如果是为了拷贝类数组形成真数组，可以使用ES6的Array.from</p><h4 id="_13-map" tabindex="-1"><a class="header-anchor" href="#_13-map" aria-hidden="true">#</a> 13. map</h4><p>map() 方法按照原始数组元素顺序依次处理元素，返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p><p>map() 不会对空数组进行检测，map() 不会改变原始数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">,</span>index<span class="token punctuation">.</span>arr</span><span class="token punctuation">)</span><span class="token punctuation">,</span>thisValue<span class="token punctuation">)</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>item<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>currentValue：必须，当前元素的值</li><li>index可选：当前元素的索引值</li><li>arr可选：当前元素属于的数组对象</li><li>thisValue：可选。对象作为该执行回调时使用，传递给函数，用作 &quot;this&quot; 的值。否则回调函数的this将指向全局对象。</li><li>返回值：返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值</li></ul>`,53),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","4-1.数组.html.vue"]]);export{r as default};
