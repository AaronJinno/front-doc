import{_ as n,o as a,c as s,e}from"./app-68218236.js";const t={},p=e(`<p>根据变量容器能够储存哪些数据，进行了分类，分为6类。这是按typeof函数返回结果分的。其实，除了基本数据类型，所有的结构本子都是对象。</p><h5 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> <strong>基本数据类型</strong></h5><ul><li>string：字符串</li><li>number：数值</li><li>Boolean：布尔</li><li>undefined：未知</li><li>null：打印的话，null属于object</li></ul><h5 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型" aria-hidden="true">#</a> <strong>引用类型</strong></h5><ul><li>object：对象，包括object、array <ul><li>function：方法/函数，其实他也是object</li><li>Array：也是一种object</li></ul></li></ul><h5 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> <strong>typeof</strong></h5><p>javascript是松散类型的，在变量申明时并没有使用与之类型相对应的关键字，如果在代码中想要获知某个变量的基本数据量，就可以使用typeof。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回number; //括号可有可无</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出number</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出string</span>

<span class="token keyword">var</span> v1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
documen<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-string-字符串" tabindex="-1"><a class="header-anchor" href="#_1-string-字符串" aria-hidden="true">#</a> 1. string：字符串</h4><p>通过引号定义的（单引号、双引号）变量，而且单引号、双引号没有区别。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;Aaron Jinno&quot;</span>
<span class="token keyword">var</span> mine <span class="token operator">=</span> <span class="token string">&quot;I am&quot;</span> <span class="token operator">+</span> name <span class="token comment">//加号用来连接字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>单双引号可以互相嵌套,如果同种嵌套要转义</li><li>单双引号均能解析转义字符</li><li>单双引号均不能解析变量 <ul><li>要通过字符串拼接</li></ul></li></ul><h4 id="_2-number-数值" tabindex="-1"><a class="header-anchor" href="#_2-number-数值" aria-hidden="true">#</a> 2. number：数值</h4><h5 id="_2-1-整型" tabindex="-1"><a class="header-anchor" href="#_2-1-整型" aria-hidden="true">#</a> 2.1 整型</h5><p>任意十进制，八进制，十六进制的数字。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span> 
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">010</span> <span class="token comment">//数字0开头 ;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0xA</span> <span class="token comment">//数字0和字母x开头.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意: 在进行算术计算时，所有进制表示的数值都将转换成十进制数值。</p><h5 id="_2-2-浮点" tabindex="-1"><a class="header-anchor" href="#_2-2-浮点" aria-hidden="true">#</a> 2.2 浮点</h5><p>该数值中必须含一个小数点，且小数点后有数字。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>  
<span class="token keyword">var</span>  a <span class="token operator">=</span> <span class="token number">1.2e3</span><span class="token comment">//科学计数法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果小数点后面没有跟任何数字(1.)，可以作为整数来保存，不推荐</li><li>如果浮点数本身表示的就是一个整数，(1.0)，该值会被转为整数</li><li>永远不要测试某个特定的浮点数的值，<code>0.1+0.2 != 0.3</code></li></ul><h5 id="_2-3-nan" tabindex="-1"><a class="header-anchor" href="#_2-3-nan" aria-hidden="true">#</a> 2.3 NaN</h5><p>一个特殊的数值-&gt;not a number。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-4-正负无穷" tabindex="-1"><a class="header-anchor" href="#_2-4-正负无穷" aria-hidden="true">#</a> 2.4 正负无穷</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Infinity(正无穷): 某次计算结果超出最大范围[ 浏览器中js不能保存所有数值 ] <ul><li>这个值将自动转换为infinity或-Infinify（负无穷）</li></ul></li><li>Infinity不能够参与运算</li><li>具体范围： <ul><li>超出1.7976931348623157E10308的数值即为Infinity</li><li>小于-1.7976931348623157E 10308的数值为-Infinity</li></ul></li></ul><h5 id="_2-5-isnan-用来判断是否是一个非数值" tabindex="-1"><a class="header-anchor" href="#_2-5-isnan-用来判断是否是一个非数值" aria-hidden="true">#</a> 2.5 isNaN()：用来判断是否是一个非数值</h5><ul><li>false：值为数字会数字类型的字符串，则返回false</li><li>true：值为非数字（包括非数字字符串），或NaN</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> v1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> v2 <span class="token operator">=</span> <span class="token number">3.12233</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> v3 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-boolean-布尔" tabindex="-1"><a class="header-anchor" href="#_3-boolean-布尔" aria-hidden="true">#</a> 3. Boolean：布尔</h4><p>布尔类型用来保存一些状态，或者对立的一对数据，值为：true、false。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//boolean</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token constant">FALSE</span><span class="token punctuation">;</span> <span class="token comment">//FALSE is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在JavaScript中0和[ ]会被转化为true；判断的时候不能单纯的使用if语句进行判断，<br> 这里指的是在判断语句中，单独的0并不是Boolean</li><li>true与false严格区分大小写，只有全小写的才是Boolean</li></ul><h4 id="_4-undefined-未知" tabindex="-1"><a class="header-anchor" href="#_4-undefined-未知" aria-hidden="true">#</a> 4. undefined：未知</h4><ul><li>声明了变量，但是未初始化值（未赋值），他就是undefined</li><li>使用一个未定义的变量</li><li>使用一个不存在的对象的属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> box<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined，容器里什么都没有</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,37),o=[p];function i(l,c){return a(),s("div",null,o)}const u=n(t,[["render",i],["__file","1-5.基本数据类型.html.vue"]]);export{u as default};
