import{_ as a,o as n,c as s,e as t}from"./app-68218236.js";const e={},p=t(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>audio 元素与 video 元素所具有的属性大致相同</p></div><h2 id="i-基本属性" tabindex="-1"><a class="header-anchor" href="#i-基本属性" aria-hidden="true">#</a> Ⅰ. 基本属性</h2><h4 id="_1-src" tabindex="-1"><a class="header-anchor" href="#_1-src" aria-hidden="true">#</a> 1. src</h4><p>在该属性中指定媒体数据的 URL 地址。</p><h4 id="_2-autoplay" tabindex="-1"><a class="header-anchor" href="#_2-autoplay" aria-hidden="true">#</a> 2. autoplay</h4><p>媒体在页面加载后自动播放。<br> autoplay设置为autoplay或true实现自动播放，false禁止自动播放。</p><p><strong>注意：很多主流浏览器都禁止了自动播放</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sample.mov<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autoplay</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-preload" tabindex="-1"><a class="header-anchor" href="#_3-preload" aria-hidden="true">#</a> 3. preload</h4><p>指定视频或音频数据是否预加载。如果使用预加载，浏览器会预先缓冲视频或音频数据，这样可以加快播放速度。可选值如下：</p><ul><li>none 表示不进行预加载。</li><li>metadata 表示只预加载媒体的元数据（媒体字节数、第一帧、播放列表、持续时间等）。</li><li>auto（默认）： 表示预加载全部视频或音频。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sample.mov<span class="token punctuation">&quot;</span></span> <span class="token attr-name">preload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>auto<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-loop" tabindex="-1"><a class="header-anchor" href="#_4-loop" aria-hidden="true">#</a> 4. loop</h4><p>指定是否循环播放视频或音频。<br> 直接写loop，或者=true即可循环</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sample.mov<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autoplay</span> <span class="token attr-name">loop</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-controls" tabindex="-1"><a class="header-anchor" href="#_5-controls" aria-hidden="true">#</a> 5. controls</h4><p>指定是否为视频或音频添加浏览器自带的播放用的控制条(播放、暂停等按钮)。</p><p>也可以在脚本中自定义控制条，而不使用浏览器默认的控制条。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sample.mov<span class="token punctuation">&quot;</span></span> <span class="token attr-name">controls</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-poster" tabindex="-1"><a class="header-anchor" href="#_6-poster" aria-hidden="true">#</a> 6. poster</h4><p>视频封面，video独有属性。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sample.mov<span class="token punctuation">&quot;</span></span> <span class="token attr-name">poster</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>CannotUse.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7-width与height" tabindex="-1"><a class="header-anchor" href="#_7-width与height" aria-hidden="true">#</a> 7. width与height</h4><p>指定播放器的宽度与高度（以像素为单位），video独有属性。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sample.mov<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>500<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>500<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ii-error属性" tabindex="-1"><a class="header-anchor" href="#ii-error属性" aria-hidden="true">#</a> Ⅱ. error属性</h2><p>在读取、使用媒体数据的过程中，在正常情况下， video 元素或 audio 元素的 error 属性为null, 但是任何时候只要出现错误， error 属性将返回一个 MediaError 对象。</p><p>该对象的 code返回对应的错误状态。</p><p>PS：error 属性为只读属性。</p><h4 id="_1-错误状态的值" tabindex="-1"><a class="header-anchor" href="#_1-错误状态的值" aria-hidden="true">#</a> 1. 错误状态的值</h4><p>video.error.code=&quot;&quot;;</p><ul><li>MEDIA_ERR_ABORTED (数字值为 1 )：媒体数据的下载过程被用户中止。</li><li>MEDIA_ERR_NETWORK (数字值为 2 )：确认媒体资源可用，但是在下载时出现网络错误，媒体数据的下载过程被中止。</li><li>MEDIA_ERR_DECODE (数字值为 3 ) : 确认媒体资源可用，但是解码时发生错误。</li><li>MEDIA_ERR_SRC_NOT_SUPPORTED (数字值为 4 ) : 媒体资源不可用或媒体格式不被支持。</li></ul><h4 id="_2-读取错误状态代码" tabindex="-1"><a class="header-anchor" href="#_2-读取错误状态代码" aria-hidden="true">#</a> 2. 读取错误状态代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>video id<span class="token operator">=</span><span class="token string">&quot;videoElement&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;sample.mov&quot;</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">var</span> video <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;videoElement&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> error <span class="token operator">=</span> video<span class="token punctuation">.</span>error<span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot; 视频的下载过程被中止&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot; 网络发生故障 &quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
            <span class="token function">alert</span> <span class="token punctuation">(</span><span class="token string">&quot;解码失败 &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span>  <span class="token number">4</span><span class="token operator">:</span>
            <span class="token function">alert</span>  <span class="token punctuation">(</span><span class="token string">&quot;媒体资源不可用或媒体格式不被支持&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-状态属性" tabindex="-1"><a class="header-anchor" href="#iii-状态属性" aria-hidden="true">#</a> Ⅲ. 状态属性</h2><p>播放器所处状态的属性。</p><h4 id="_1-networkstate-网络状态" tabindex="-1"><a class="header-anchor" href="#_1-networkstate-网络状态" aria-hidden="true">#</a> 1. networkState：网络状态</h4><p>媒体数据加载过程中可以使用 video 元素或 audio 元素的 networkState 属性读取当前网络状态。<br> networkState 属性为只读属性。</p><p><strong>networkState取值</strong></p><ul><li>NETWORK_EMPTY(数字值为0)：元素处于初始状态。</li><li>NETWORK_IDLE(数字值为1)：浏览器已选择好用什么编码格式来播放媒体，但尚未建立网络连接。</li><li>NETWORK_LOADING(数字值为2)：媒体数据加载中。</li><li>NETWORK_NO_SOURCE(数字值为3)：没有支持的编码格式，不执行加载。<br><strong>示例</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token operator">...</span><span class="token punctuation">(</span>前略<span class="token punctuation">)</span>
<span class="token keyword">var</span> video <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByld</span><span class="token punctuation">(</span><span class="token string">&quot;video &quot;</span> <span class="token punctuation">)</span> ；
video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;progress&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> networkStateDisplay <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementByld</span><span class="token punctuation">(</span><span class="token string">&quot;networkState&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据 networkState 属性的值执行处理</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span>networkState <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//计算 已 加 载 的字节数与总字节数</span>
        networkStateDisplay<span class="token punctuation">.</span> innerHTML <span class="token operator">=</span><span class="token string">&quot;加载中&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span>loaded<span class="token operator">+</span><span class="token string">&quot;/&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span>total<span class="token operator">+</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span>networkState <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        networkStateDisplay<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span><span class="token string">&quot;加载失败&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-readstate-播放位置" tabindex="-1"><a class="header-anchor" href="#_2-readstate-播放位置" aria-hidden="true">#</a> 2. readState：播放位置</h4><p>返回媒体当前播放位置的就绪状态。</p><ul><li>HAVE_NOTHING(数字值为0): 没有获取到媒体的信息，当前播放位置没有可播放的数据。</li><li>HAVE_METADATA(数字值为1): 已经获取到足够的媒体数据，但当前播放位置没有有效的媒体数据（也就是说，获取到的媒体数据无效，不能播放）。</li><li>HAVE_CURRENT_DATA (数字值为2): 当前播放位置已经有数据可以播放，但没有获取到可以让播放器前进的数据。当媒体为视频时，意思是当前帧的数据已获得，但还没有获取到下一帧的数据，或者当前帧已经是播放的最后一帧。</li><li>HAVE_FUTURE_DATA(数字值为3): 当前播放位置已经有数据可以播放，而且也获取到可以让播放器前进的数据。当媒体为视频时，意思是当前帧的数据已获得，而且也获取到下一帧的数据，当前帧是播放的最后一帧时，readyState属性不可能为HAVE_FUTURE_DATA.</li><li>HAVE_ENOUGH_DATA(数字值为4) : 当前播放位置已有数据可播放，同时也获取到可以让播放器前进的数据，浏览器确认媒体数据以某一种速度进行加载,可以保证有足够的后续数据进行播放。</li></ul><h4 id="_3-seeking与seekable" tabindex="-1"><a class="header-anchor" href="#_3-seeking与seekable" aria-hidden="true">#</a> 3. seeking与seekable</h4><ul><li>seeking：seeking 属性返回一个布尔值，表示浏览器是否正在请求某一特定播放位置的数据 <ul><li>true 表示浏览器正在请求数据</li><li>false 表示浏览器已停止请求</li></ul></li><li>seekable：seekable 属性返回一个 TimeRanges 对象，该对象表示请求到的数据的时间范围。<br> 当为视频时，开始时间为第一帧的时间，结束时间为请求到的视频数据的最后一帧的时间。</li><li>seeking 属性与 seekable 属性均为只读属性</li></ul><h4 id="_4-currenttime、starttime、duration" tabindex="-1"><a class="header-anchor" href="#_4-currenttime、starttime、duration" aria-hidden="true">#</a> 4. currentTime、startTime、duration</h4><p>三者的值均为时间，单位为秒， currentTime 为可读写属性，其余两个均为只读属性。</p><ul><li>currentTime：读取媒体的当前播放位置，通过修改 currentTime 属性可修改当前播放位置。 <ul><li>如果修改的位置上无可用数据时，将抛出INVALID_STATE_ERR异常；</li><li>如果修改的位置超出浏览器在一次请求中可以请求的数据范围，将抛出INDEX_SIZE_ERR 异常。</li></ul></li><li>startTime：读取媒体播放的开始时间，通常为0</li><li>duration：读取媒体文件总的播放时间。</li></ul><h4 id="_5-played、paused、-ended" tabindex="-1"><a class="header-anchor" href="#_5-played、paused、-ended" aria-hidden="true">#</a> 5. played、paused、 ended</h4><ul><li>played：played 属性返回一个 TimeRanges 对象，从该对象可读取媒体文件已播放部分的时间段。开始时间为已播放部分的开始时间，结束时间为已播放部分的结束时间。</li><li>paused：返回一个布尔值，表示是否处于暂停播放中,true为暂停，false为正在播放。</li><li>end：返回一个布尔值，表示是否播放完毕，true为播放完毕，false未播放完毕</li></ul><h4 id="_6-volume与-muted" tabindex="-1"><a class="header-anchor" href="#_6-volume与-muted" aria-hidden="true">#</a> 6. volume与 muted</h4><ul><li>volume 属性读取或修改媒体的播放音量，范围为0到 1, 0 为静音，1为最大音量。</li><li>muted 属性读取或修改媒体的静音状态，该值为布尔值， true为静音， false 未非静音。</li></ul><h2 id="iv-其他属性" tabindex="-1"><a class="header-anchor" href="#iv-其他属性" aria-hidden="true">#</a> Ⅳ. 其他属性</h2><h4 id="_1-currentsrc" tabindex="-1"><a class="header-anchor" href="#_1-currentsrc" aria-hidden="true">#</a> 1. currentSrc</h4><p>currentSrc 属性读取播放中的媒体数据的 URL 地址。该属性为只读属性。</p><h4 id="_2-buffered" tabindex="-1"><a class="header-anchor" href="#_2-buffered" aria-hidden="true">#</a> 2. buffered</h4><p>buffered属性返回一个对象，该对象实现 TimeRanges接口，以确认浏览器是否已缓存媒体数据。</p><ul><li>TimeRanges 对象：表示一段时间范围,大多数情况下是一个单一的以0开始的范围，如果浏览器发出Range Requests 请求，就表示多个时间范围。</li><li>timeRanges的length属性：表示有多少个时间范围，大多数情况下存在时，该值为1 ; 不存在时，该值为0 。如果跳跃播放可能存在多个缓存范围。</li><li>timeRanges的TimeRanges.start(index)与TimeRanges.end(index )方法：大多数情况下，index 值设为 0 就可以了。当用 videoElement.buffered 语句来实现 TimeRanges 接口时，TimeRanges.start(0)表示当前缓存区内从媒体数据的什么时间开始进行缓存，TimeRanges.end(0)表示当前缓存区内的结束时间。</li><li>buffered 属性为只读属性。</li></ul><h4 id="_3-defaultplaybackrate属性与-playbackrate-属性" tabindex="-1"><a class="header-anchor" href="#_3-defaultplaybackrate属性与-playbackrate-属性" aria-hidden="true">#</a> 3.defaultPlaybackRate属性与 playbackRate 属性</h4><ul><li>defaultPlaybackRate 属性读取或修改媒体默认的播放速率。</li><li>playbackRate 属性读取或修改媒体当前的播放速率。</li></ul>`,61),o=[p];function l(i,c){return n(),s("div",null,o)}const r=a(e,[["render",l],["__file","6-2.属性.html.vue"]]);export{r as default};
