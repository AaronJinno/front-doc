import{_ as l,r as d,o as i,c as o,a,b as e,d as t,e as n}from"./app-68218236.js";const c={},r=n(`<h2 id="基础文本" tabindex="-1"><a class="header-anchor" href="#基础文本" aria-hidden="true">#</a> 基础文本</h2><ul><li>空格会影响Markdown的语法，一定要注意语法与内容间要<strong>加上空格</strong>。</li><li>要想输出Markdown的关键字，就需要使你用 <code>\\</code> 进行转义。</li></ul><h4 id="_1-段落与换行" tabindex="-1"><a class="header-anchor" href="#_1-段落与换行" aria-hidden="true">#</a> 1. 段落与换行</h4><p>普通段落是没有缩进的(现在的web文本的段落都是没有缩进的)。</p><ul><li>段落：是由一行或多行连续的文本组成的。</li><li>换行：由 <code>&lt;br/&gt;</code> 或两个 <code>空格</code> 来进行换行</li></ul><h4 id="_2-标题" tabindex="-1"><a class="header-anchor" href="#_2-标题" aria-hidden="true">#</a> 2. 标题</h4><p>使用 <code>#</code> 号来表示标题，几个井号就表示几级标题，支持1~6级标题。\\</p><ul><li>注意：<code>#</code> 号与文字间要有<strong>空格</strong>，不然无效。\\</li><li>小技巧：一级标题和二级标题默认都会有一条下划线，所以可以直接从二级标签开始使用。</li></ul><h4 id="_3-引用" tabindex="-1"><a class="header-anchor" href="#_3-引用" aria-hidden="true">#</a> 3. 引用</h4><p>使用 <code>&gt;</code> 号来作为块引用，如下：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token blockquote punctuation">&gt;</span> 文本内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>这里是块引用，只要写一个<code>&gt;</code>符号就可以实现自动换行的块应用，但是还是建议，引用文本采用强制换行,并在每一行的行首放一个<code>&gt;</code>符号。</p></blockquote><ul><li>结束块引用需要一行空白行。</li><li>块引用里面的文本也支持Markdown语法。</li><li>引用可以进行层级嵌套，只需在加一个<code>&gt;</code>即可，如下</li></ul><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token blockquote punctuation">&gt;</span> 一级引用
<span class="token blockquote punctuation">&gt;</span>
<span class="token blockquote punctuation">&gt; &gt;</span> 二级引用
<span class="token blockquote punctuation">&gt; &gt;</span>
<span class="token blockquote punctuation">&gt; &gt; &gt;</span> 三级引用
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote></blockquote><h4 id="_4-水平线-分隔线" tabindex="-1"><a class="header-anchor" href="#_4-水平线-分隔线" aria-hidden="true">#</a> 4.水平线(分隔线)</h4><p>生成<code>&lt;hr/&gt;</code> 水平线，可以使用 三个以上的 <code>*</code>，如下：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token hr punctuation">***</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h4 id="_5-强调-字体" tabindex="-1"><a class="header-anchor" href="#_5-强调-字体" aria-hidden="true">#</a> 5. 强调(字体)</h4><p>不要带空格</p><ul><li>em 斜体：被 <code>*</code> 包裹的文本会变成斜体，<code>*hello你好*</code>。 <ul><li><em>hello你好</em></li></ul></li><li>strong 加粗：被 <code>**</code> 包裹的文本会加粗，<code>**很strong**</code>。 <ul><li><strong>很strong</strong></li></ul></li></ul><h4 id="_6-线" tabindex="-1"><a class="header-anchor" href="#_6-线" aria-hidden="true">#</a> 6. 线</h4><h5 id="_6-1-删除线" tabindex="-1"><a class="header-anchor" href="#_6-1-删除线" aria-hidden="true">#</a> 6.1 删除线</h5><p>使用<code>~~</code>包裹的文本会被删除线删除</p><p><s>hello</s></p><h5 id="_6-2-下划线" tabindex="-1"><a class="header-anchor" href="#_6-2-下划线" aria-hidden="true">#</a> 6.2 下划线</h5><p>使用<code>++</code>包裹的文本会产生下划线</p><p>++hello++</p><p>PS：在vuepress中暂不支持下划线</p><h4 id="_7-mark" tabindex="-1"><a class="header-anchor" href="#_7-mark" aria-hidden="true">#</a> 7. mark</h4><p>使用 <code>==</code> 包裹的文本会产生黄色的mark效果，如<code>==hello==</code></p><p><mark>hello</mark></p><h2 id="代码相关" tabindex="-1"><a class="header-anchor" href="#代码相关" aria-hidden="true">#</a> 代码相关</h2><h4 id="_1-代码快" tabindex="-1"><a class="header-anchor" href="#_1-代码快" aria-hidden="true">#</a> 1. 代码快</h4><p>只需在一行的开头使用 \`\`\`，即可输入代码块，如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;这是js代码块&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h5><ul><li>Markdown在代码块里是无效的。</li><li>代码块的高亮和样式由编辑器决定，也可以在 \`\`\`后面接上语言名字。</li><li>4个空格(即一个tab)了或<code>&lt;pre&gt;</code>也可以输出代码块。</li></ul><h4 id="_2-html" tabindex="-1"><a class="header-anchor" href="#_2-html" aria-hidden="true">#</a> 2. HTML</h4><p>Markdown内可以直接写html标签，不需要额外的markdown语法标注。</p><p>html标签里的文本不支持markdown语法。</p><h4 id="_3-代码片段-原样输出" tabindex="-1"><a class="header-anchor" href="#_3-代码片段-原样输出" aria-hidden="true">#</a> 3. 代码片段(原样输出)</h4><p>就是一小片段代码，如：hello,可以使用<code>代码片段</code>包裹,或者使用 <code>&lt;code&gt;</code>标签来输出小片段。</p><h2 id="表格与列表" tabindex="-1"><a class="header-anchor" href="#表格与列表" aria-hidden="true">#</a> 表格与列表</h2><h4 id="_1-表格" tabindex="-1"><a class="header-anchor" href="#_1-表格" aria-hidden="true">#</a> 1. 表格</h4><p>语法如下：</p><ul><li>第一行是表头,自带格式</li><li>第二行规定了一行有多少列，一个<code>---</code>分隔一列，<code>|</code>为每列的分隔符。</li><li>通过<code>:</code>来区分，做左对齐(默认)，居中(两边各一个冒号)、右对齐(冒号在右边)。</li></ul><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important"> header 1 </span><span class="token punctuation">|</span><span class="token table-header important"> header 2 </span><span class="token punctuation">|</span><span class="token table-header important"> header 3 </span><span class="token punctuation">|</span>
</span><span class="token table-line"><span class="token punctuation">|</span> <span class="token punctuation">:-------</span> <span class="token punctuation">|</span> <span class="token punctuation">:------:</span> <span class="token punctuation">|</span> <span class="token punctuation">-------:</span> <span class="token punctuation">|</span>
</span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> 1-1      </span><span class="token punctuation">|</span><span class="token table-data">    1-2   </span><span class="token punctuation">|</span><span class="token table-data">      1-3 </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> 2-1      </span><span class="token punctuation">|</span><span class="token table-data">    2-2   </span><span class="token punctuation">|</span><span class="token table-data">      2-3 </span><span class="token punctuation">|</span>
</span></span>
<span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important"> header 1 </span><span class="token punctuation">|</span><span class="token table-header important"> header 2 </span><span class="token punctuation">|</span><span class="token table-header important"> header 3 </span><span class="token punctuation">|</span>
</span><span class="token table-line"><span class="token punctuation">|</span> <span class="token punctuation">:-------</span> <span class="token punctuation">|</span> <span class="token punctuation">:------:</span> <span class="token punctuation">|</span> <span class="token punctuation">-------:</span> <span class="token punctuation">|</span>
</span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> 1-1      </span><span class="token punctuation">|</span><span class="token table-data">    1-2   </span><span class="token punctuation">|</span><span class="token table-data">      1-3 </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> 2-1      </span><span class="token punctuation">|</span><span class="token table-data">    2-2   </span><span class="token punctuation">|</span><span class="token table-data">      2-3 </span>
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">header 1</th><th style="text-align:center;">header 2</th><th style="text-align:right;">header 3</th></tr></thead><tbody><tr><td style="text-align:left;">1-1</td><td style="text-align:center;">1-2</td><td style="text-align:right;">1-3</td></tr><tr><td style="text-align:left;">2-1</td><td style="text-align:center;">2-2</td><td style="text-align:right;">2-3</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">header 1</th><th style="text-align:center;">header 2</th><th style="text-align:right;">header 3</th></tr></thead><tbody><tr><td style="text-align:left;">1-1</td><td style="text-align:center;">1-2</td><td style="text-align:right;">1-3</td></tr><tr><td style="text-align:left;">2-1</td><td style="text-align:center;">2-2</td><td style="text-align:right;">2-3</td></tr></tbody></table><h4 id="_2-列表" tabindex="-1"><a class="header-anchor" href="#_2-列表" aria-hidden="true">#</a> 2. 列表</h4><p>Markdown即支持有序列表，也支持无序列表</p><p>注意：列表语法后面也要跟空格</p><h5 id="_2-1-无序列表" tabindex="-1"><a class="header-anchor" href="#_2-1-无序列表" aria-hidden="true">#</a> 2.1 无序列表</h5><p>使用 * 号、+ 号、-号都可以生成无序列表，如下：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">*</span> 由 <span class="token code-snippet code keyword">\`*\`</span> 产生的无序列表
<span class="token list punctuation">+</span> 由 <span class="token code-snippet code keyword">\`+\`</span> 产生的无序列表
<span class="token list punctuation">-</span> 由 <span class="token code-snippet code keyword">\`-\`</span> 产生的无序列表
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>由 <code>*</code> 产生的无序列表</li></ul><ul><li>由 <code>+</code> 产生的无序列表</li></ul><ul><li>由 <code>-</code> 产生的无序列表</li></ul><h5 id="_2-2-有序列表" tabindex="-1"><a class="header-anchor" href="#_2-2-有序列表" aria-hidden="true">#</a> 2.2 有序列表</h5><p>直接使用数字加 . 号来产生有序列表，如下：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">1.</span> 有序列表1
<span class="token list punctuation">2.</span> 有序列表2
<span class="token list punctuation">3.</span> 有序列表3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表3</li></ol><h5 id="_2-3-注意" tabindex="-1"><a class="header-anchor" href="#_2-3-注意" aria-hidden="true">#</a> 2.3 注意</h5><ul><li>有序列表前面的数字不是显示的数字，无论它是几，都是从1开始递增显示。</li><li>如果要想在列表中换行，不能直接输出空行，会有bug，需要使用是个空格、<code>&lt;br&gt;</code> 或 tab 键。要想产生多个空行，就只能使用多个 <code>&lt;br&gt;</code>。</li><li>如果列表中包含了快引用，&gt; 符号需要缩进</li><li>如果列表项中有代码块，代码块需要双倍缩进8个空格，或两个 tab。</li><li>可以使用转移符号 \\ 避免，输入的数字+.时被当做有序列表</li><li>列表是可以嵌套的。</li></ul><h2 id="引入" tabindex="-1"><a class="header-anchor" href="#引入" aria-hidden="true">#</a> 引入</h2><h4 id="_1-插入图片" tabindex="-1"><a class="header-anchor" href="#_1-插入图片" aria-hidden="true">#</a> 1. 插入图片</h4><p>图片链接类似于url链接，也有内联和引用两种引入格式</p><h5 id="_1-1-内联格式" tabindex="-1"><a class="header-anchor" href="#_1-1-内联格式" aria-hidden="true">#</a> 1.1 内联格式</h5><p><code>感叹号+[alt]+(图片链接 &quot;title&quot;)</code></p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token url"><span class="token operator">!</span>[<span class="token content">Alt text</span>](<span class="token url">/path/to/img.jpg</span> <span class="token string">&quot;Optional title&quot;</span>)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_1-2-引用格式" tabindex="-1"><a class="header-anchor" href="#_1-2-引用格式" aria-hidden="true">#</a> 1.2 引用格式</h5><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token url"><span class="token operator">!</span>[<span class="token content">Alt text</span>][<span class="token variable">id</span>]</span>
<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">id</span><span class="token punctuation">]</span><span class="token punctuation">:</span> url/to/image  <span class="token string">&quot;Optional title attribute&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-3-图床或oss" tabindex="-1"><a class="header-anchor" href="#_1-3-图床或oss" aria-hidden="true">#</a> 1.3 图床或OSS</h5><p>使用公共图床，或者自己做一个图床服务器，将图片的绝对地址作为图片的url，这样可以保证图片不会遗失。</p><h5 id="_1-4-二进制图片" tabindex="-1"><a class="header-anchor" href="#_1-4-二进制图片" aria-hidden="true">#</a> 1.4 二进制图片</h5><p>可以将图片转为Blob对象，并使用引用格式进行引用，可以避免图片遗失。</p><h5 id="注意-1" tabindex="-1"><a class="header-anchor" href="#注意-1" aria-hidden="true">#</a> 注意</h5><ul><li>图片最好使用绝对地址，可以创建一个图床，然后使用图床的绝对地址。</li><li>如果直接使用本地图片地址，会很危险，当然也可以直接转为PDF格式避免危险。</li><li>图片使用本地地址可以使用相对地址或绝对地址。</li><li>图片只能显示原始大小，不能缩放，想缩放用HTML</li></ul><h4 id="_2-链接" tabindex="-1"><a class="header-anchor" href="#_2-链接" aria-hidden="true">#</a> 2. 链接</h4><p>链接共分为两种形式，内联和引用，定义形式如下：</p><h5 id="_2-1-内联" tabindex="-1"><a class="header-anchor" href="#_2-1-内联" aria-hidden="true">#</a> 2.1 内联</h5><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>[链接显示的名字](www.sgugo.com &#39;链接title可选&#39;)
[链接显示](/about/ &#39;服务器内部链接引用&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,84),p={href:"/https://www.google.com/",target:"_blank",rel:"noopener noreferrer"},u=n(`<h5 id="_2-2-引用【更简洁】" tabindex="-1"><a class="header-anchor" href="#_2-2-引用【更简洁】" aria-hidden="true">#</a> 2.2 引用【更简洁】</h5><p>先创建链接，再给链接赋值</p><p>首先是创建链接：<code>[谷歌][20] &quot;谷歌一下&quot;</code></p><p>第一个中括号是显示的内容，第二个中括号里是链接的标识。</p><p><strong>创建的连接并不会显示</strong>，需要进行引用才会显示，一次创建可以多次引用。</p><p><code>引用链接：[id] http://www.google.com</code></p><p>中括号里是链接的标识，后面跟链接，相当于给定义的连接标识赋值</p><h5 id="_2-3-自动连接" tabindex="-1"><a class="header-anchor" href="#_2-3-自动连接" aria-hidden="true">#</a> 2.3 自动连接</h5><p>如下自动转为普通的链接</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;http://example.com/&gt;

&lt;address@example.com&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),h={href:"http://example.com/",target:"_blank",rel:"noopener noreferrer"},k=n('<p><a href="mailto:address@example.com">address@example.com</a></p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><h4 id="_1-代办与已完成" tabindex="-1"><a class="header-anchor" href="#_1-代办与已完成" aria-hidden="true">#</a> 1. 代办与已完成</h4><ul class="task-list-container"><li><p><code>[ ]</code> 后面的文本为代办事项</p></li><li><p><code>[x] </code>后面的文本为已完成事项</p></li><li class="task-list-item"><p><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 代办</label></p></li><li class="task-list-item"><p><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 已完成</label></p></li></ul><p>PS: 该功能虽然是继承语法，但在vuepress中需要开启tasklist功能</p><h4 id="_2-目录" tabindex="-1"><a class="header-anchor" href="#_2-目录" aria-hidden="true">#</a> 2. 目录</h4><p><code>[TOC]</code> 标签所在处，会自动生成该页的目录。</p>',7);function b(m,g){const s=d("ExternalLinkIcon");return i(),o("div",null,[r,a("p",null,[e("生成一个可点击的已被格式化的连接："),a("a",p,[e("google"),t(s)])]),u,a("p",null,[a("a",h,[e("http://example.com/"),t(s)])]),k])}const _=l(c,[["render",b],["__file","2-2.基础语法.html.vue"]]);export{_ as default};
