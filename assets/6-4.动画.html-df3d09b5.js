import{_ as n,o as a,c as s,e as i}from"./app-c07941ad.js";const e={},t=i(`<p>动画创建的原理是将一套CSS样式逐渐变化为另一套样式。</p><h4 id="css3动画的设置方式" tabindex="-1"><a class="header-anchor" href="#css3动画的设置方式" aria-hidden="true">#</a> css3动画的设置方式</h4><p>先定义动画的关键帧（@keyframes），然后使用animation属性调用关键帧，并设置动画的执行方式，来实现元素的动画效果。</p><p>动画可以取代过渡。区别是：transition需要触发事件才会改变，且无法设置多个节点。而动画不需要触发也可以改变CSS，且可以设置多个节点，可以看成高级版的transition。</p><h4 id="_1-animation" tabindex="-1"><a class="header-anchor" href="#_1-animation" aria-hidden="true">#</a> 1. animation</h4><p>animation属性是用来调用动画，并设置动画的执行方式的。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation</span><span class="token punctuation">:</span> name duration timing-function delay iteration-count direction<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_1-1-animation-属性" tabindex="-1"><a class="header-anchor" href="#_1-1-animation-属性" aria-hidden="true">#</a> 1.1 animation 属性</h5><p>animation 属性是一个简写属性，用于设置六个动画属性。六个属性分别为：</p><ul><li>animation-name：动画名（一个动画名代表一个@keyframes）</li><li>animation-duration：完成动画花费的时间。</li><li>animation-timing-function：速度曲线</li><li>animation-delay：动画开始之前的延迟</li><li>animation-iteration-count：动画播放的次数</li><li>animation-direction：是否应该轮流反向播放动画</li></ul><p>该6个属性可以分别设置，也可以使用简写的方式设置。</p><p>除了以上6个子属性外，还有两个属性来定义播放状态和播放完外状态（animation-play-state和animation-fill-mode），这两个属性也可以加到简写属性。</p><h5 id="_1-2-animation属性分类" tabindex="-1"><a class="header-anchor" href="#_1-2-animation属性分类" aria-hidden="true">#</a> 1.2 animation属性分类</h5><p>animattion属性分为两部分：</p><ul><li>第一部分是animation-name：确定调用什么动画，由@keyframes创建</li><li>第二部分是另外5个属性：定义调用的动画应该如何执行</li></ul><h4 id="_2-keyframes" tabindex="-1"><a class="header-anchor" href="#_2-keyframes" aria-hidden="true">#</a> 2. @keyframes</h4><p>通过keyframes可以创建动画。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@keyframes</span> animationname [keyframes-selector</span> <span class="token punctuation">{</span>css-styles<span class="token punctuation">;</span><span class="token punctuation">}</span>]*<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数1-animationname：定义动画的名称（animation通过该名称调用动画）。</li><li>参数2-keyframes-selector：表示动画时长的百分比。0~100%、form(=0%)、to(=100%)</li><li>参数3-css-styles：表示一个或多个CSS样式，或者变形。</li></ul><p>注意：参数2和参数3是一个整体，可以根据百分比（参数2）定义多个节点。</p><h4 id="_3-使用示例" tabindex="-1"><a class="header-anchor" href="#_3-使用示例" aria-hidden="true">#</a> 3. 使用示例</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@keyframes</span> staff</span><span class="token punctuation">{</span>
    <span class="token selector">0%</span><span class="token punctuation">{</span>
        <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">20%</span><span class="token punctuation">{</span>
        <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translate</span><span class="token punctuation">(</span>300px<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">40%</span><span class="token punctuation">{</span>
        <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translate</span><span class="token punctuation">(</span>200px<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">79%</span><span class="token punctuation">{</span>
        <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">100%</span><span class="token punctuation">{</span>
        <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token selector">#staff</span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span>400px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>
    <span class="token property">animation</span><span class="token punctuation">:</span>staff 3s linear<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析：没有定义触发的选项，自动触发动画。</p><h4 id="_4-animation的普通子属性" tabindex="-1"><a class="header-anchor" href="#_4-animation的普通子属性" aria-hidden="true">#</a> 4. animation的普通子属性</h4><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>暂略，使用简写属性即可。</p></div><h4 id="_5-animation播放子属性" tabindex="-1"><a class="header-anchor" href="#_5-animation播放子属性" aria-hidden="true">#</a> 5. animation播放子属性</h4><h5 id="_5-1-animation-iteration-count-定义播放次数" tabindex="-1"><a class="header-anchor" href="#_5-1-animation-iteration-count-定义播放次数" aria-hidden="true">#</a> 5.1 animation-iteration-count：定义播放次数</h5><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">mation-iteration-count</span><span class="token punctuation">:</span>infinite|number
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>默认值是1，表示从头到尾只播一遍</li><li>infinite表示播放无数遍</li><li>number：可以定义具体播放几遍 <ul><li>如果是小数：就播放一部分</li><li>如果是负数：就反向播放。</li></ul></li></ul><h5 id="_5-2-animation-direction-定义播放方向" tabindex="-1"><a class="header-anchor" href="#_5-2-animation-direction-定义播放方向" aria-hidden="true">#</a> 5.2 animation-direction：定义播放方向</h5><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation-direction</span><span class="token punctuation">:</span>normal|alternate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>默认值是normal，表示向前播放</li><li>alternate：表示第偶数次向前播放，奇数次数向反向播放</li></ul><h5 id="_5-3-animation-play-state-定义播放状态" tabindex="-1"><a class="header-anchor" href="#_5-3-animation-play-state-定义播放状态" aria-hidden="true">#</a> 5.3 animation-play-state：定义播放状态</h5><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation-play-state</span><span class="token punctuation">:</span>paused|running<span class="token punctuation">;</span>

object.style.animationPlayState=<span class="token string">&quot;paused&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>默认值是running，定义动画正在播放。</li><li>paused，定义动画暂停。</li></ul><h5 id="_5-4-animation-fill-mode-定义播放外状态" tabindex="-1"><a class="header-anchor" href="#_5-4-animation-fill-mode-定义播放外状态" aria-hidden="true">#</a> 5.4 animation-fill-mode：定义播放外状态</h5><p>nimation-fill-mode 属性规定动画在播放之前或之后，其动画效果是否可见。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation-fill-mode</span><span class="token punctuation">:</span> none|forwards|backwards|both
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实际应用时的效果</p><ul><li>none：动画开始时，在开始位置，结束时再次返回开始位置</li><li>forward：动画开始时，在开始位置，结束时在结束位置【就这个有用】</li><li>backwards：同none；</li><li>both：同forward；</li></ul>`,40),p=[t];function o(l,c){return a(),s("div",null,p)}const r=n(e,[["render",o],["__file","6-4.动画.html.vue"]]);export{r as default};
