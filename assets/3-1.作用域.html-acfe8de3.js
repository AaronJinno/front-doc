import{_ as a,o as n,c as s,e}from"./app-277eb25d.js";const t={},p=e(`<h4 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念" aria-hidden="true">#</a> 1. 概念</h4><p>作用域指一个变量的作用范围。在JS中一共有两种作用域，全局作用域和函数作用域。</p><ul><li>全局作用域：直接写在JS标签中的JS代码，就是全局作用域。</li><li>函数作用域：函数中的作用域。</li></ul><h4 id="_2-全局作用域" tabindex="-1"><a class="header-anchor" href="#_2-全局作用域" aria-hidden="true">#</a> 2. 全局作用域</h4><p>在页面打开时创建，在页面关闭时销毁。</p><h5 id="_2-1-window对象" tabindex="-1"><a class="header-anchor" href="#_2-1-window对象" aria-hidden="true">#</a> 2.1 window对象</h5><p>在全局作用域中，有一个全局对象window，可以直接使用，他代表的是浏览器的窗口，由浏览器创建。在全局作用域中，创建的变量，都会作为window对象的属性保存。</p><p>创建的函数都会作为window对象的方法（函数其实就是window对象的方法）。</p><h5 id="_2-2-变量的声明提前" tabindex="-1"><a class="header-anchor" href="#_2-2-变量的声明提前" aria-hidden="true">#</a> 2.2 变量的声明提前</h5><p>使用var关键字声明的变量，会在所有的代码执行前声明，如果不使用var关键字，则变量不会被声明提前。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//保存，a不存在，报错</span>
a <span class="token operator">=</span> <span class="token number">123</span> <span class="token punctuation">;</span> 

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span>
<span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">//相当于，在JS头部声明了var a,在这里又进行了赋值 a = 123;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-函数的声明提前" tabindex="-1"><a class="header-anchor" href="#_2-3-函数的声明提前" aria-hidden="true">#</a> 2.3 函数的声明提前</h5><p>使用函数声明形式创建的函数，他会在所有的代码执行之前就被创建。所以可以在函数声明前进行调用。使用函数表达式创建的函数，不会被声明提前，所以不能在声明前调用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token function-variable function">fun2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-4-全局变量" tabindex="-1"><a class="header-anchor" href="#_2-4-全局变量" aria-hidden="true">#</a> 2.4 全局变量</h5><p>全局作用域的变量都是全局变量，在页面的任何位置都可以访问。</p><h4 id="_3-函数作用域" tabindex="-1"><a class="header-anchor" href="#_3-函数作用域" aria-hidden="true">#</a> 3. 函数作用域</h4><h5 id="_3-1-函数作用域的创建" tabindex="-1"><a class="header-anchor" href="#_3-1-函数作用域的创建" aria-hidden="true">#</a> 3.1 函数作用域的创建</h5><p>调用函数时，创建函数作用域，函数执行完毕后，函数作用域销毁。</p><p>每调用一次函数就会创建一个新的函数作用域，他们之间互相独立。</p><h5 id="_3-2-访问" tabindex="-1"><a class="header-anchor" href="#_3-2-访问" aria-hidden="true">#</a> 3.2 访问</h5><p>在函数作用域中可以访问到全局作用域变量。在全局作用域中你无法访问到函数作用域的变量。在函数中要访问全局变量（被覆盖的）可以使用windows对象。</p><h5 id="_3-3-作用域链" tabindex="-1"><a class="header-anchor" href="#_3-3-作用域链" aria-hidden="true">#</a> 3.3 作用域链</h5><p>在函数作用域中操作一个变量时，他会在自身作用域中寻找，如果有就直接使用，如果没有就向上一级作用域中寻找，直到找到全局作用域，如果依然没找到，就报错。</p><h5 id="_3-4-声明提前" tabindex="-1"><a class="header-anchor" href="#_3-4-声明提前" aria-hidden="true">#</a> 3.4 声明提前</h5><p>在函数作用域中，也有声明提前的特性，使用var关键字声明的变量，会在函数中所有的代码执行之前被声明，函数声明也会在函数中所有的代码执行之前执行。</p><h5 id="_3-5-全局变量" tabindex="-1"><a class="header-anchor" href="#_3-5-全局变量" aria-hidden="true">#</a> 3.5 全局变量</h5><p>在函数中，不使用var声明的变量都会成为全局变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出10；</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-6-形参" tabindex="-1"><a class="header-anchor" href="#_3-6-形参" aria-hidden="true">#</a> 3.6 形参</h5><p>定义形参，相当于在函数中声明了变量。</p><h4 id="_4-作用域与执行上下文" tabindex="-1"><a class="header-anchor" href="#_4-作用域与执行上下文" aria-hidden="true">#</a> 4. 作用域与执行上下文</h4><ul><li>作用域: 静态的, 编码时就确定了(不是在运行时), 一旦确定就不会变化了</li><li>执行上下文: 动态的, 执行代码时动态创建, 当执行结束消失</li><li>联系: 执行上下文环境是在对应的作用域中的</li></ul><h4 id="_5-作用域链" tabindex="-1"><a class="header-anchor" href="#_5-作用域链" aria-hidden="true">#</a> 5. 作用域链</h4><p>多个嵌套的作用域形成的由内向外的结构, 用于查找变量</p><p>如果在当前作用域中没有查到值，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。</p>`,36),i=[p];function c(o,l){return n(),s("div",null,i)}const r=a(t,[["render",c],["__file","3-1.作用域.html.vue"]]);export{r as default};
