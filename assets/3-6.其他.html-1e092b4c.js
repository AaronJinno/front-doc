import{_ as n,o as s,c as a,e as t}from"./app-c07941ad.js";const p={},e=t(`<h2 id="i-拷贝" tabindex="-1"><a class="header-anchor" href="#i-拷贝" aria-hidden="true">#</a> Ⅰ. 拷贝</h2><h4 id="_1-深拷贝与浅拷贝" tabindex="-1"><a class="header-anchor" href="#_1-深拷贝与浅拷贝" aria-hidden="true">#</a> 1. 深拷贝与浅拷贝</h4><ul><li>拷贝值==浅拷贝，拷贝后，改变a，b也跟着变了</li><li>拷贝址==深拷贝，拷贝后，改变a，b不变</li></ul><h4 id="_2-使用场景" tabindex="-1"><a class="header-anchor" href="#_2-使用场景" aria-hidden="true">#</a> 2. 使用场景</h4><p>无论是浅拷贝还是深拷贝，一般都用于操作Object 或 Array之类的复合类型。</p><p>比如想对某个数组 或 对象的值进行修改，但是又要保留原来数组 或 对象的值不被修改，此时就可以用深拷贝来创建一个新的数组 或 对象，从而达到操作(修改)新的数组 或 对象时，保留原来数组 或对象。</p><h2 id="ii-函数调用方式" tabindex="-1"><a class="header-anchor" href="#ii-函数调用方式" aria-hidden="true">#</a> Ⅱ. 函数调用方式</h2><h4 id="_1-直接调用" tabindex="-1"><a class="header-anchor" href="#_1-直接调用" aria-hidden="true">#</a> 1. 直接调用</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.调用函数</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">[</span>args<span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2.调用方法</span>
obj<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">[</span>args<span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-apply-调用" tabindex="-1"><a class="header-anchor" href="#_2-apply-调用" aria-hidden="true">#</a> 2. apply()调用</h4><div class="hint-container info"><p class="hint-container-title">函数的上下文环境</p><p>函数的上下文环境指的就是函数属于哪个对象，对于全局作用域创建的函数，他默认的上下文环境是window，对于对象的方法，他的上下文环境就是该对象。</p></div><p>该函数调用时可以指定一个对象作为该函数的上下文环境。</p><p>apply()的参数：</p><ul><li>参数1：作为函数上下文的对象</li><li>参数2：作为函数参数所组成的数组</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.调用一个函数</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;jinno&#39;</span>  
<span class="token punctuation">}</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;jin&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">say</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>say<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello jin</span>
<span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// hello jinno</span>

<span class="token comment">//2.调用一个方法</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;a&#39;</span>  
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">say</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">say</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>say<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
obj2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello b</span>
obj2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-call-调用" tabindex="-1"><a class="header-anchor" href="#_3-call-调用" aria-hidden="true">#</a> 3. call()调用</h4><p>call的用法与apply类似，只是在传递后面的参数时，不是以数组的形式传递。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//同上</span>
obj2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-bind-调用" tabindex="-1"><a class="header-anchor" href="#_4-bind-调用" aria-hidden="true">#</a> 4. bind()调用</h4><p>bind()的用法与call类似，只是返回的不是函数调用的结果，而是一个改变了上下文this的函数，调用该函数，就得到与call一样的结果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//同上</span>
fun <span class="token operator">=</span> obj2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-this指向总结" tabindex="-1"><a class="header-anchor" href="#iii-this指向总结" aria-hidden="true">#</a> Ⅲ. this指向总结</h2><ul><li>直接调用函数：this-&gt;window</li><li>直接调用方法：this-&gt;调用方法的对象</li><li>call调用：this-&gt;参数1指定的对象</li><li>apply调用：this-&gt;参数1指定的对象</li><li>bind调用:this-&gt;参数1指定的对象</li><li>在DOM对象的事件函数中，this指向的是DOM对象本身，而非事件对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dom<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印的是dom对象</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","3-6.其他.html.vue"]]);export{r as default};
