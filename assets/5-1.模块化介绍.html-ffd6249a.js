import{_ as n,o as a,c as s,e as t}from"./app-8888c5c9.js";const e={},p=t(`<h4 id="_1-什么是模块化" tabindex="-1"><a class="header-anchor" href="#_1-什么是模块化" aria-hidden="true">#</a> 1. 什么是模块化</h4><p>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来。块的内部数据/实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信。</p><p>模块的组成：</p><ul><li>数据---&gt;内部的属性</li><li>操作数据的行为---&gt;内部的函数</li></ul><h4 id="_2-为什么要模块化" tabindex="-1"><a class="header-anchor" href="#_2-为什么要模块化" aria-hidden="true">#</a> 2. 为什么要模块化</h4><p>随着代码量的增加，会渐渐出现很多问题。冗余、结构复杂，难以部署等，因此我们需要将代码按照功能写到不同的JS文件中，每个文件就是一个模块。</p><p>这是最基本的模块化，这种模块化还是会有很多问题，比如：命名冲突、各个JS文件间的依赖性等。这就需要JS的模块化规范了。</p><h4 id="_3-模块化的优点" tabindex="-1"><a class="header-anchor" href="#_3-模块化的优点" aria-hidden="true">#</a> 3. 模块化的优点</h4><ul><li>避免命名冲突</li><li>更好的分离，按需加载</li><li>更高复用性</li><li>高可维护性</li></ul><h4 id="_4-页面引入多个js文件的问题" tabindex="-1"><a class="header-anchor" href="#_4-页面引入多个js文件的问题" aria-hidden="true">#</a> 4. 页面引入多个JS文件的问题</h4><p>当一个页面引入多个JS文件的时候，会产生很多问题。比如：</p><ul><li>请求过多</li><li>依赖模糊：JS有先后顺序的</li><li>难以维护<br> 这些问题可以通过模块化编码和项目构建来解决</li></ul><h4 id="_5-模块化的规范" tabindex="-1"><a class="header-anchor" href="#_5-模块化的规范" aria-hidden="true">#</a> 5. 模块化的规范</h4><p>常见的模块化规范有：</p><ul><li>CommonJS：主要用于NodeJS环境</li><li>Modules：ES6标准模块化规范</li><li>AMD：不常用</li><li>CMD：不常用</li></ul><h4 id="_6-js模块化的历史" tabindex="-1"><a class="header-anchor" href="#_6-js模块化的历史" aria-hidden="true">#</a> 6. JS模块化的历史</h4><h5 id="_6-1-全局function模式" tabindex="-1"><a class="header-anchor" href="#_6-1-全局function模式" aria-hidden="true">#</a> 6.1 全局function模式</h5><p>最早是直接在全局function中写代码的，这种方法会污染Global，很容易命名冲突</p><h5 id="_6-2-namespace模式" tabindex="-1"><a class="header-anchor" href="#_6-2-namespace模式" aria-hidden="true">#</a> 6.2 namespace模式</h5><p>为了防止污染Global，将代码按照功能封装到对象中，使用的时候，直接 object.fun；<br> 这种方法减少了Global上的变量数目，但是直接操纵对象，数据不安全，因为对象不仅可以读数据，还可以改数据。</p><h5 id="_6-3-iife模式" tabindex="-1"><a class="header-anchor" href="#_6-3-iife模式" aria-hidden="true">#</a> 6.3 IIFE模式</h5><p>将数据和行为封装到一个函数内部, 通过给window添加属性来向外暴露接口。<br> 数据是私有的, 外部只能通过暴露的方法操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">window</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token string">&quot;module1&quot;</span><span class="token punctuation">,</span>
    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    window<span class="token punctuation">.</span>module1 <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span><span class="token comment">//我们是可以直接读到window的属性的</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//其他位置，直接读取</span>
module1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-4-iife模式增强" tabindex="-1"><a class="header-anchor" href="#_6-4-iife模式增强" aria-hidden="true">#</a> 6.4 IIFE模式增强</h5><p>在IEFE模式中引入依赖，这就是模块模式，也是现代模块实现的基石。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">window<span class="token punctuation">,</span>$</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token string">&quot;module2&quot;</span>
    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    window<span class="token punctuation">.</span>module4 <span class="token operator">=</span> foo<span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&#39;background&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[p];function i(c,l){return a(),s("div",null,o)}const d=n(e,[["render",i],["__file","5-1.模块化介绍.html.vue"]]);export{d as default};
