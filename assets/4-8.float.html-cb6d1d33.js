import{_ as a,o as n,c as s,e}from"./app-fb2cd4f5.js";const t="/front-doc/img/basic/css/4-8-1.jpg",i="/front-doc/img/basic/css/4-8-2.jpg",p="/front-doc/img/basic/css/4-8-3.jpg",c="/front-doc/img/basic/css/4-8-4.jpg",l={},o=e('<br><p>float浮动，目的就是为了让多个块级元素同一行上显示。</p><figure><img src="'+t+`" alt="4-8-1" tabindex="0" loading="lazy"><figcaption>4-8-1</figcaption></figure><h4 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念" aria-hidden="true">#</a> 1. 概念</h4><p>元素的浮动是指设置了浮动属性的元素会脱离标准流的控制，移动到其父元素中指定的位置。</p><h4 id="_2-float语法" tabindex="-1"><a class="header-anchor" href="#_2-float语法" aria-hidden="true">#</a> 2. float语法</h4><p>在CSS中，通过float属性来定义浮动，其基本语法格式如下：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器</span><span class="token punctuation">{</span>
    <span class="token property">float</span><span class="token punctuation">:</span>属性值<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>属性值如下：</p><ul><li>left：元素向左浮动</li><li>right：元素向右浮动</li><li>none：元素不浮动（默认值）</li></ul><h4 id="_3-float后的布局" tabindex="-1"><a class="header-anchor" href="#_3-float后的布局" aria-hidden="true">#</a> 3. float后的布局</h4><figure><img src="`+i+`" alt="4-8-2" tabindex="0" loading="lazy"><figcaption>4-8-2</figcaption></figure><p>浮动元素脱离文档流，不占据文档流位置，其原来的位置会被其他元素占据。如果在同一个父元素里，非浮动块元素可能会被浮动元素遮挡。非块状元素（文字，图片）会环绕在浮动元素的周围。</p><p>浮动元素会尽量浮动到父元素的最左（左浮）或最右（右浮），直到它的外边缘碰到包含框或另一个浮动框的边框为止。</p><h4 id="_4-浮动元素的特点" tabindex="-1"><a class="header-anchor" href="#_4-浮动元素的特点" aria-hidden="true">#</a> 4. 浮动元素的特点</h4><ul><li>float相当于漂浮起来脱离了文档流。float元素会在上面，有点像行内块元素。</li><li>浮动元素之后的文本元素将围绕它。浮动元素之前的文本元素将不会受到影响。如果图像是右浮动，下面的文本流将环绕在它左边</li><li>如果你把几个浮动的元素放到一起，如果有空间的话，它们将彼此相邻。</li></ul><h4 id="_5-清除浮动" tabindex="-1"><a class="header-anchor" href="#_5-清除浮动" aria-hidden="true">#</a> 5. 清除浮动</h4><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。</p><p>其实本质叫做闭合浮动更好一些, 清除浮动就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素（也就是说，下方的盒子不会上移了）。</p><h5 id="_5-1-clear属性清除浮动" tabindex="-1"><a class="header-anchor" href="#_5-1-clear属性清除浮动" aria-hidden="true">#</a> 5.1 clear属性清除浮动</h5><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span> <span class="token comment">/* 清除所有浮动 */</span>
<span class="token property">clear</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token comment">/* 清除左浮动 */</span>
<span class="token property">clear</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token comment">/* 清除右浮动 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-使用额外标签清除浮动" tabindex="-1"><a class="header-anchor" href="#_5-2-使用额外标签清除浮动" aria-hidden="true">#</a> 5.2 使用额外标签清除浮动</h5><p>W3C推荐的做法是通过在浮动元素末尾添加一个空的标签来清除浮动。添加许多无意义的标签，结构化较差，谨慎使用。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">clear</span><span class="token punctuation">:</span>both</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_5-3-父元素添加overflow-清除浮动" tabindex="-1"><a class="header-anchor" href="#_5-3-父元素添加overflow-清除浮动" aria-hidden="true">#</a> 5.3 父元素添加overflow，清除浮动</h5><p>通过触发BFC的方式，可以实现清除浮动效果。</p><p>可以给父级添加： overflow为 hidden|auto|scroll 都可以实现。</p><h5 id="_5-4-after伪元素清除浮动" tabindex="-1"><a class="header-anchor" href="#_5-4-after伪元素清除浮动" aria-hidden="true">#</a> 5.4 after伪元素清除浮动</h5><p><code>:after</code> 方式为空元素的升级版，好处是不用单独加标签了。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">selecter:after</span> <span class="token punctuation">{</span>  
   <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> 
   <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> 
   <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> 
   <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span> 
   <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>优点： 符合闭合浮动思想 结构语义化正确（百度、淘宝就使用了）</li><li>content属性：与<code>:before</code> 及 <code>:after</code> 伪元素配合使用，来插入生成内容。</li></ul><h5 id="_5-5-before和after双伪元素清除浮动" tabindex="-1"><a class="header-anchor" href="#_5-5-before和after双伪元素清除浮动" aria-hidden="true">#</a> 5.5 before和after双伪元素清除浮动</h5><p>代码更简洁。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clearfix:before,.clearfix:after</span> <span class="token punctuation">{</span> 
  <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span>  <span class="token comment">/* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>
 <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix</span> <span class="token punctuation">{</span>
  *<span class="token property">zoom</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-普通流-normal-flow" tabindex="-1"><a class="header-anchor" href="#_6-普通流-normal-flow" aria-hidden="true">#</a> 6. 普通流(normal flow)</h4><p>CSS的定位机制有3种：普通流（又称标准流或文档流）、浮动和定位。</p><p>普通流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局。</p><figure><img src="`+p+'" alt="4-8-3" tabindex="0" loading="lazy"><figcaption>4-8-3</figcaption></figure><h4 id="_7-浮动示例" tabindex="-1"><a class="header-anchor" href="#_7-浮动示例" aria-hidden="true">#</a> 7. 浮动示例</h4><ul><li>div a浮动，div下面的div b就会自动往上移，好像div a不存在一样,div a会覆盖div b.</li><li>div a浮动，div b同样浮动，则，div a和div b会并排排列，下面的div自动上移。</li><li>如果位于浮动div下方的div清除了浮动，这样他们就不会往上移。</li><li>当块状元素浮动时，非块状元素（文字，图片）会环绕在浮动元素的周围。</li></ul><figure><img src="'+c+'" alt="4-8-4" tabindex="0" loading="lazy"><figcaption>4-8-4</figcaption></figure><h4 id="_8-注意" tabindex="-1"><a class="header-anchor" href="#_8-注意" aria-hidden="true">#</a> 8. 注意</h4><p>一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示。<br> Float（浮动），往往是用于图像，和布局时。<br> 浮动的盒子需要和标准流的父级搭配使用</p>',43),r=[o];function d(u,h){return n(),s("div",null,r)}const f=a(l,[["render",d],["__file","4-8.float.html.vue"]]);export{f as default};
