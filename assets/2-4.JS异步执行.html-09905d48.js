import{_ as a,o as n,c as s,e as t}from"./app-f9b28035.js";const e="/front-doc/img/basic/html/2-4-1.png",l={},p=t('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>在 H5 中，对于 script 元素，新增 <mark>async</mark> 属性与 <mark>defer</mark> 属性，它们的作用都是加快页面的加载速度，使脚本代码的读取不再妨碍页面上其他元素的加载。</p></div><h4 id="_1-页面文档的渲染机制" tabindex="-1"><a class="header-anchor" href="#_1-页面文档的渲染机制" aria-hidden="true">#</a> 1. 页面文档的渲染机制</h4><ul><li>浏览器通过HTTP协议请求服务器，获取HMTL文档并开始从上到下解析，构建DOM。</li><li>在构建DOM过程中，如果遇到 <mark>外联</mark> 的样式声明和脚本声明，则暂停文档解析，创建新的网络连接，并开始下载样式文件和脚本文件。</li><li>样式文件下载完成后，构建CSSDOM；脚本文件下载完成后，解释并执行，然后继续解析文档构建DOM 。</li><li>完成文档解析后，将DOM和CSSDOM进行关联和映射，最后将视图渲染到浏览器窗口。</li></ul><h4 id="_2-默认渲染机制的缺点" tabindex="-1"><a class="header-anchor" href="#_2-默认渲染机制的缺点" aria-hidden="true">#</a> 2. 默认渲染机制的缺点</h4><p>如果脚本文件比较庞大，则该脚本文件的下载工作无疑会成为页面加载时的一个性能方面的瓶颈。</p><h4 id="_3-defer和async的作用" tabindex="-1"><a class="header-anchor" href="#_3-defer和async的作用" aria-hidden="true">#</a> 3. defer和async的作用</h4><p>两个属性都是在加载页面的同时下载脚本文件。</p><ul><li>defer：用于开启新的线程下载脚本文件，并使脚本在文档解析完成后执行。</li><li>async：用于异步下载脚本文件，下载完毕立即解释执行代码。</li></ul><h4 id="_4-图解页面文档加载的三种方式" tabindex="-1"><a class="header-anchor" href="#_4-图解页面文档加载的三种方式" aria-hidden="true">#</a> 4. 图解页面文档加载的三种方式</h4><p>PS: 绿色线是页面解析；蓝色线是JS下载；红色线是JS执行 。</p><figure><img src="'+e+`" alt="2-4-1" tabindex="0" loading="lazy"><figcaption>2-4-1</figcaption></figure><h4 id="_5-async与defer基本语法" tabindex="-1"><a class="header-anchor" href="#_5-async与defer基本语法" aria-hidden="true">#</a> 5. async与defer基本语法</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myAsyncScript.js<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">myAsyncInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myDeferScript.js<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">myDeferInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：onload是下载时触发的事件，不是必须的。</p><h4 id="_6-async与defer的区别" tabindex="-1"><a class="header-anchor" href="#_6-async与defer的区别" aria-hidden="true">#</a> 6. async与defer的区别</h4><ul><li>async：脚本加载后，立即执行事件处理函数，如果页面中使用多个外部脚本，且均为这些外部脚本文件使用 async 属性，则这些脚本的 onload 事件处理函数执行顺序并不与外部脚本文件的引用顺序保持一致，一旦某个外部脚本文件下载完毕，立即执行该脚本文件的 onload 事件处理函数。</li><li>defer：脚本下载后，不立即执行该脚的 onload 事件处理函数，而是等到页面全部加载完毕后，才执行onload 事件处理函数，如果页面中使用多个外部脚本文件，且均为这些外部脚本文件使用defer 属性，则在页面加载后按这文件的引用顺序来执行外部脚本文件的 onload 事件处理函数。</li></ul><h4 id="_7-onload事件" tabindex="-1"><a class="header-anchor" href="#_7-onload事件" aria-hidden="true">#</a> 7. onload事件</h4><p>由于外部脚本文件的下载工作也属于整个页面的加载工作中的一部分，所以外部脚本文件的 onload 事件处理函数将始终在浏览器窗口对象的 onload 事件处理函数或页面的 body 元素的 onload 事件处理函数之前 <strong>首先被执行</strong>。</p><h4 id="_8-使用注意" tabindex="-1"><a class="header-anchor" href="#_8-使用注意" aria-hidden="true">#</a> 8. 使用注意</h4><ul><li>async <ul><li>只适用于外联脚本，这一点和defer一致；</li><li>如果有多个声明了async的脚本，其下载和执行也是异步的，不能确保彼此的先后顺序；</li><li>async会在load事件之前执行，但并不能确保与DOMContentLoaded的执行先后顺序 。</li></ul></li><li>defer <ul><li>defer只适用于外联脚本，如果script标签没有指定src属性，只是内联脚本，不要使用defer；</li><li>如果有多个声明了defer的脚本，则会按顺序下载和执行 ；</li><li>defer脚本会在DOMContentLoaded和load事件之前执行。</li></ul></li></ul>`,20),c=[p];function o(i,r){return n(),s("div",null,c)}const u=a(l,[["render",o],["__file","2-4.JS异步执行.html.vue"]]);export{u as default};
