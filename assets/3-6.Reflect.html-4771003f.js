import{_ as n,o as s,c as a,e}from"./app-68218236.js";const t={},p=e(`<h2 id="i-reflect介绍" tabindex="-1"><a class="header-anchor" href="#i-reflect介绍" aria-hidden="true">#</a> Ⅰ. Reflect介绍</h2><p>Reflect对象是 ES6 为了操作对象而提供的新 API。</p><p>他有以下多种用途：</p><h4 id="用途1-封装内部方法" tabindex="-1"><a class="header-anchor" href="#用途1-封装内部方法" aria-hidden="true">#</a> 用途1：封装内部方法</h4><p>将Object对象的一些明显属于语言内部的方法（比如<code>Object.defineProperty</code>），放到Reflect对象上。</p><p>现阶段，某些方法同时在Object和Reflect对象上部署，未来的新方法将只部署在Reflect对象上。也就是说，从Reflect对象上可以拿到语言内部的方法。</p><h4 id="用途2-修改某些object方法的返回结果" tabindex="-1"><a class="header-anchor" href="#用途2-修改某些object方法的返回结果" aria-hidden="true">#</a> 用途2：修改某些Object方法的返回结果</h4><p>比如<code>Object.defineProperty(obj, name, desc)</code>在无法定义属性时，会抛出一个错误，而<code>Reflect.defineProperty(obj, name, desc)</code>则会返回false</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 老写法</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// success</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// failure</span>
<span class="token punctuation">}</span>

<span class="token comment">// 新写法</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// success</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// failure</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用途3-让object操作都变成函数行为" tabindex="-1"><a class="header-anchor" href="#用途3-让object操作都变成函数行为" aria-hidden="true">#</a> 用途3：让Object操作都变成函数行为</h4><p>某些Object操作是命令式，比如<code>name in obj</code>和<code>delete obj[name]</code>，而<code>Reflect.has(obj, name)</code>和<code>Reflect.deleteProperty(obj, name)</code>让它们变成了函数行为。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 老写法</span>
<span class="token string">&#39;assign&#39;</span> <span class="token keyword">in</span> Object <span class="token comment">// true</span>

<span class="token comment">//新写法</span>
Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>Object<span class="token punctuation">,</span> <span class="token string">&#39;assign&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用途4-reflect对象的方法与proxy对象的方法对应" tabindex="-1"><a class="header-anchor" href="#用途4-reflect对象的方法与proxy对象的方法对应" aria-hidden="true">#</a> 用途4：Reflect对象的方法与Proxy对象的方法对应</h4><p>只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便地调用对应的Reflect方法，完成默认行为，作为修改行为的基础。<br> 也就是说，不管Proxy怎么修改默认行为，你总可以在Reflect上获取默认行为。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>receiver<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> success <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;successs&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> success<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Proxy的方法是拦截默认行为，Reflect与Proxy的同名方法是使默认行为完成。这样在Proxy的方法中调用Reflect就可以确保完成原有的行为，然后再部署额外的功能。</p><h4 id="用途5-使很多操作易读" tabindex="-1"><a class="header-anchor" href="#用途5-使很多操作易读" aria-hidden="true">#</a> 用途5：使很多操作易读</h4><p>有了Reflect对象以后，很多操作会更易读。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 老写法</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>floor<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1.75</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>

<span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>floor<span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1.75</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-reflect静态方法" tabindex="-1"><a class="header-anchor" href="#ii-reflect静态方法" aria-hidden="true">#</a> Ⅱ. Reflect静态方法</h2><p>Reflect的静态方法，大部分与Object对象的同名方法的作用都是相同的，而且它与Proxy对象的方法是一一对应的。</p><p>以下是常用的方法：</p><h4 id="_1-reflect-get-target-name-receiver" tabindex="-1"><a class="header-anchor" href="#_1-reflect-get-target-name-receiver" aria-hidden="true">#</a> 1. Reflect.get(target, name, receiver)</h4><p>Reflect.get方法查找并返回target对象的name属性，如果没有该属性，则返回undefined。</p><p>注意：如果第一个参数不是对象，Reflect.get方法会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token keyword">get</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//获取动态属性</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span> <span class="token comment">//动态属性的this绑定的是receiver</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>

<span class="token keyword">let</span> receiver <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span>
Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-reflect-set-target-name-value-receiver" tabindex="-1"><a class="header-anchor" href="#_2-reflect-set-target-name-value-receiver" aria-hidden="true">#</a> 2. Reflect.set(target, name, value, receiver)</h4><p>Reflect.set方法设置target对象的name属性等于value。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token comment">//则赋值函数的this绑定receiver</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a=2</span>
Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a=3</span>
<span class="token keyword">let</span> receiver <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>reciver<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>a <span class="token comment">//3</span>
receiver<span class="token punctuation">.</span>a <span class="token comment">//100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-reflect-has-obj-name" tabindex="-1"><a class="header-anchor" href="#_3-reflect-has-obj-name" aria-hidden="true">#</a> 3. Reflect.has(obj, name)</h4><p>Reflect.has方法对应name in obj里面的in运算符。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;uname&#39;</span> <span class="token keyword">in</span> obj <span class="token comment">//旧写法</span>
Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;uname&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新写法，第一个参数不是对象会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-reflect-deleteproperty-obj-name" tabindex="-1"><a class="header-anchor" href="#_4-reflect-deleteproperty-obj-name" aria-hidden="true">#</a> 4. Reflect.deleteProperty(obj, name)</h4><p>Reflect.deleteProperty方法等同于<code>delete obj[name]</code>，用于删除对象的属性。</p><p>如果删除成功，或者被删除的属性不存在，返回true；删除失败，被删除的属性依然存在，返回false。如果<code>Reflect.deleteProperty()</code>方法的第一个参数不是对象，会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>uname<span class="token punctuation">;</span><span class="token comment">//旧写法</span>
Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;uname&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新写法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-reflect-construct-target-args" tabindex="-1"><a class="header-anchor" href="#_5-reflect-construct-target-args" aria-hidden="true">#</a> 5. Reflect.construct(target, args)</h4><p>Reflect.construct方法等同于<code>new target(...args)</code>，这提供了一种不使用new，来调用构造函数的方法。如果<code>Reflect.construct()</code>方法的第一个参数不是函数，会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token parameter">uname</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>uanme <span class="token operator">=</span> uname<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token string">&#39;zs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//new写法</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token constant">F</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;zs&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Reflect写法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-reflect-getprototypeof-obj" tabindex="-1"><a class="header-anchor" href="#_6-reflect-getprototypeof-obj" aria-hidden="true">#</a> 6. Reflect.getPrototypeOf(obj)</h4><p>Reflect.getPrototypeOf方法用于读取对象的<code>__proto__</code>属性，对应<code>Object.getPrototypeOf(obj)</code>。</p><p>如果参数不是对象，Object.getPrototypeOf会将这个参数转为对象，然后再运行，而Reflect.getPrototypeOf会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token comment">//旧写法</span>
Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新写法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-reflect-setprototypeof-obj-newproto" tabindex="-1"><a class="header-anchor" href="#_7-reflect-setprototypeof-obj-newproto" aria-hidden="true">#</a> 7. Reflect.setPrototypeOf(obj,newProto)</h4><p>设置目标对象的原型（prototype），对应<code>Object.setPrototypeOf(obj, newProto)</code>方法。它返回一个布尔值，表示是否设置成功。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//旧写法</span>
Reflect<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新写法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果无法设置目标对象的原型（比如，目标对象禁止扩展），Reflect.setPrototypeOf方法返回false。可以设置为null。</li><li>如果第一个参数不是对象，Object.setPrototypeOf会返回第一个参数本身，而Reflect.setPrototypeOf会报错。</li><li>如果第一个参数是undefined或null，Object.setPrototypeOf和Reflect.setPrototypeOf都会报错。</li></ul>`,47),c=[p];function o(l,i){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","3-6.Reflect.html.vue"]]);export{r as default};
