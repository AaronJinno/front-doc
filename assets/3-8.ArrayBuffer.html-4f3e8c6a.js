import{_ as a,o as n,c as s,e}from"./app-ba294a04.js";const t={},r=e(`<p>ArrayBuffer对象、TypedArray视图和DataView视图是 JavaScript 操作二进制数据的一个接口。</p><h2 id="i-arraybuffer" tabindex="-1"><a class="header-anchor" href="#i-arraybuffer" aria-hidden="true">#</a> Ⅰ. ArrayBuffer</h2><p>ArrayBuffer 对象用来表示通用的、固定长度的原始二进制数据缓冲区，它是一个字节数组。</p><h4 id="_1-二进制数组" tabindex="-1"><a class="header-anchor" href="#_1-二进制数组" aria-hidden="true">#</a> 1. 二进制数组</h4><p>ArrayBuffer对象、TypedArray视图和DataView视图，都是以数组的语法处理二进制数据，所以统称为二进制数组。它很像 C 语言的数组，允许开发者以数组下标的形式，直接操作内存，大大增强了 JavaScript 处理二进制数据的能力，使得开发者有可能通过 JavaScript 与操作系统的原生接口进行二进制通信。</p><p>注意，二进制数组并不是真正的数组，而是类似数组的对象。</p><h4 id="_2-js二进制数组对象" tabindex="-1"><a class="header-anchor" href="#_2-js二进制数组对象" aria-hidden="true">#</a> 2. JS二进制数组对象</h4><p>二进制数组由三类对象组成。</p><ul><li>ArrayBuffer对象: 代表内存之中的一段二进制数据，可以通过“视图”进行操作。“视图”部署了数组接口，这意味着，可以用数组的方法操作内存。</li><li>TypedArray视图: 共包括 9 种类型的视图，比如Uint8Array（无符号 8 位整数）数组视图, Int16Array（16 位整数）数组视图, Float32Array（32 位浮点数）数组视图等等。</li><li>DataView视图: 可以自定义复合格式的视图，比如第一个字节是 Uint8（无符号 8 位整数）、第二、三个字节是 Int16（16 位整数）、第四个字节开始是 Float32（32 位浮点数）等等，此外还可以自定义字节序。</li></ul><p>总结：ArrayBuffer对象代表原始的二进制数据，TypedArray视图用来读写简单类型的二进制数据，DataView视图用来读写复杂类型的二进制数据。</p><h4 id="_3-arraybuffer对象概述" tabindex="-1"><a class="header-anchor" href="#_3-arraybuffer对象概述" aria-hidden="true">#</a> 3. ArrayBuffer对象概述</h4><p>ArrayBuffer对象代表储存二进制数据的一段内存，它不能直接读写，只能通过视图（TypedArray视图和DataView视图）来读写，视图的作用是以指定格式解读二进制数据。</p><p>ArrayBuffer也是一个构造函数，可以分配一段可以存放数据的连续内存区域。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数：length：要创建的ArrayBuffer的大小，单位是字节（==所需内存大小）</li><li>返回值：一个指定大小的ArrayBuffer对象，其内容初始化为0.</li><li>描述：上面代码生成了一段 32 字节的内存区域，每个字节的值默认都是 0</li></ul><p>读取ArrayBuffer需要用到TypedArray视图或DataView视图。</p><h4 id="_4-arraybuffer-prototype-bytelength" tabindex="-1"><a class="header-anchor" href="#_4-arraybuffer-prototype-bytelength" aria-hidden="true">#</a> 4. ArrayBuffer.prototype.byteLength</h4><p>ArrayBuffer实例的byteLength属性，返回所分配的内存区域的字节长度。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bufferr<span class="token punctuation">.</span>byteLength<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//32</span>
<span class="token comment">//检查内存是否分配成功</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>bytelength <span class="token operator">===</span><span class="token operator">=</span> <span class="token number">320000000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//成功</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token comment">//失败</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-arraybuffer-prototype-slice" tabindex="-1"><a class="header-anchor" href="#_5-arraybuffer-prototype-slice" aria-hidden="true">#</a> 5. ArrayBuffer.prototype.slice()</h4><p>slice方法，允许将内存区域的一部分，拷贝生成一个新的ArrayBuffer对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> newBuffer <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

arraybuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>begin<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参数 <ul><li>begin：从0开始的直接索引，切片从这里开始（包括）</li><li>end：结束切片的字节索引（不包括），可选，如果没指定end，新的 ArrayBuffer 将包含这个 ArrayBuffer 从头到尾的所有字节。</li><li>如果begin或end是负数，则指的是从数组末尾开始的索引，而不是从头开始。</li></ul></li><li>返回值：一个新的ArrayBuffer对象</li><li>异常：由begin和end指定的这个范围夹在当前数组的有效索引范围内。如果新ArrayBuffer的长度在计算后为负，它将强制为0</li></ul><h4 id="_6-arraybuffer-isview" tabindex="-1"><a class="header-anchor" href="#_6-arraybuffer-isview" aria-hidden="true">#</a> 6. ArrayBuffer.isView</h4><p>静态方法isView，返回一个布尔值，表示参数是否为ArrayBuffer的视图实例。</p><p>这个方法大致相当于判断参数，是否为TypedArray实例或DataView实例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ArrayBuffer<span class="token punctuation">.</span><span class="token function">isView</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>

<span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int32Array</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
ArrayBuffer<span class="token punctuation">.</span><span class="token function">isView</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-typedarray" tabindex="-1"><a class="header-anchor" href="#ii-typedarray" aria-hidden="true">#</a> Ⅱ. TypedArray</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>暂略</p></div><h2 id="iii-dataview" tabindex="-1"><a class="header-anchor" href="#iii-dataview" aria-hidden="true">#</a> Ⅲ. DataView</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>暂略</p></div>`,31),p=[r];function i(c,l){return n(),s("div",null,p)}const u=a(t,[["render",i],["__file","3-8.ArrayBuffer.html.vue"]]);export{u as default};
