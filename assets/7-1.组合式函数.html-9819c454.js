import{_ as n,o as s,c as a,e}from"./app-fb2cd4f5.js";const t={},p=e(`<div class="hint-container danger"><p class="hint-container-title">介绍</p><p>在Vue2中，mixins 是创建可重用组件逻辑的主要方式，Vue3不再推荐使用mixins。</p></div><h2 id="i-组合式函数" tabindex="-1"><a class="header-anchor" href="#i-组合式函数" aria-hidden="true">#</a> Ⅰ. 组合式函数</h2><h4 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h4><p>“组合式函数”(Composables) 是一个利用 Vue 的组合式 API 来封装和复用有状态逻辑的函数。</p><p>当构建前端应用时，我们常常需要复用公共任务的逻辑。<br> 例如为了在不同地方格式化时间，我们可能会抽取一个可复用的日期格式化函数。这个函数封装了无状态的逻辑：它在接收一些输入后立刻返回所期望的输出。</p><p>有状态逻辑负责管理会随时间而变化的状态。一个简单的例子是跟踪当前鼠标在页面中的位置。在实际应用中，也可能是像触摸手势或与数据库的连接状态这样的更复杂的逻辑。</p><h4 id="_2-组合式函数的使用示例" tabindex="-1"><a class="header-anchor" href="#_2-组合式函数的使用示例" aria-hidden="true">#</a> 2. 组合式函数的使用示例</h4><p>以鼠标的坐标追踪器为例：</p><h5 id="_2-1-鼠标跟踪功能的实现" tabindex="-1"><a class="header-anchor" href="#_2-1-鼠标跟踪功能的实现" aria-hidden="true">#</a> 2.1 鼠标跟踪功能的实现</h5><p>直接在组件中使用组合式 API 实现鼠标跟踪功能：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>App.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>鼠标坐标: {{x}},{{y}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">,</span>onMounted<span class="token punctuation">,</span>onUnmounted<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token comment">//定义鼠标坐标：响应式状态</span>
<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> 
<span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">//动态更新鼠标坐标</span>
<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
  x<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX
  y<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY
<span class="token punctuation">}</span>

<span class="token comment">//生命周期函数：onMounted，挂载组件后执行</span>
<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span>update<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//生命周期函数：onUnmounted，卸载组件后执行</span>
<span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span>update<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-使用组合式函数提取鼠标追踪功能" tabindex="-1"><a class="header-anchor" href="#_2-2-使用组合式函数提取鼠标追踪功能" aria-hidden="true">#</a> 2.2 使用组合式函数提取鼠标追踪功能</h5><p>如果想在多个组件中复用这个相同的逻辑，可以把这个逻辑以一个组合式函数的形式提取到外部文件中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//file：src/composables/mouse.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span>onUnmounted<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token comment">//暴露一个方法：该方法就是组合式函数</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//定义被组合式函数封装和管理的状态</span>
  <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

  <span class="token comment">//组合式函数用来更改状态的内部函数</span>
  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    x<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX
    y<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY
  <span class="token punctuation">}</span>

  <span class="token comment">//声明周期：哪个组件调用，组合式函数就挂靠在哪个组件的声明周期</span>
  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span>update<span class="token punctuation">)</span> <span class="token comment">//启动副作用</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span>update<span class="token punctuation">)</span> <span class="token comment">//卸载副作用</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">//通过返回值暴露所管理的状态</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-使用组合式函数-鼠标追踪" tabindex="-1"><a class="header-anchor" href="#_2-3-使用组合式函数-鼠标追踪" aria-hidden="true">#</a> 2.3 使用组合式函数：鼠标追踪</h5><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>App.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>鼠标坐标: {{x}},{{y}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span>useMouse<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./composables/mouse.js&#39;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-4-总结" tabindex="-1"><a class="header-anchor" href="#_2-4-总结" aria-hidden="true">#</a> 2.4 总结</h5><p>直接在组件中实现和采用组合式函数的核心逻辑完全一致，我们做的只是把它移到一个外部函数中去，并返回需要暴露的状态。</p><p>和在组件中一样，你也可以在组合式函数中使用所有的组合式 API。</p><h4 id="_3-嵌套组合式函数示例" tabindex="-1"><a class="header-anchor" href="#_3-嵌套组合式函数示例" aria-hidden="true">#</a> 3. 嵌套组合式函数示例</h4><p>需求：将添加和清除 DOM 事件监听器的逻辑也封装进一个组合式函数中，然后在之前的useMouse中使用该函数。</p><h5 id="_3-1-event-js" tabindex="-1"><a class="header-anchor" href="#_3-1-event-js" aria-hidden="true">#</a> 3.1 event.js</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//file：src/composables/event.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>onMounted<span class="token punctuation">,</span>onUnmounted<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useEventListener</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span>e<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        target<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>callback<span class="token punctuation">)</span>    
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        target<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>clasback<span class="token punctuation">)</span>    
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-usemouse简化" tabindex="-1"><a class="header-anchor" href="#_3-2-usemouse简化" aria-hidden="true">#</a> 3.2 useMouse简化</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//file：src/composables/mouse.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useEventListener <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./composables/event.js&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">userMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  
  <span class="token function">useEventListener</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      x<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX
      y<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY  
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-约定与最佳实践" tabindex="-1"><a class="header-anchor" href="#ii-约定与最佳实践" aria-hidden="true">#</a> Ⅱ. 约定与最佳实践</h2><h4 id="_1-命名" tabindex="-1"><a class="header-anchor" href="#_1-命名" aria-hidden="true">#</a> 1. 命名</h4><p>组合式函数约定用驼峰命名法命名，并以“use”作为开头。<br> 函数名和文件名可以不一样。</p><h4 id="_2-参数" tabindex="-1"><a class="header-anchor" href="#_2-参数" aria-hidden="true">#</a> 2. 参数</h4><p>组合式函数可接收 ref 参数。如果编写的组合式函数会被其他开发者使用，你最好在处理输入参数时兼容 ref 而不只是原始的值。</p><p>unref() 工具函数会对此非常有帮助：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> unref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">function</span> <span class="token function">useFeature</span><span class="token punctuation">(</span><span class="token parameter">maybeRef</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 若 maybeRef 确实是一个 ref，它的 .value 会被返回</span>
  <span class="token comment">// 否则，maybeRef 会被原样返回</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">unref</span><span class="token punctuation">(</span>maybeRef<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果组合式函数在接收 ref 为参数时会产生响应式 effect，请确保使用 watch() 显式地监听此 ref，或者在 watchEffect() 中调用 unref() 来进行正确的追踪。</p><h4 id="_3-返回值" tabindex="-1"><a class="header-anchor" href="#_3-返回值" aria-hidden="true">#</a> 3. 返回值</h4><p>推荐的约定是组合式函数始终返回一个包含多个 ref 的普通的非响应式对象，这样该对象在组件中被解构为 ref 之后仍可以保持响应性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// x 和 y 是两个 ref</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-解析" tabindex="-1"><a class="header-anchor" href="#_3-1-解析" aria-hidden="true">#</a> 3.1 解析</h5><p>组合式函数返回一个响应式对象会导致在对象解构过程中丢失与组合式函数内状态的响应性连接。与之相反，ref 则可以维持这一响应性连接。</p><h5 id="_3-2-reactive" tabindex="-1"><a class="header-anchor" href="#_3-2-reactive" aria-hidden="true">#</a> 3.2 reactive</h5><p>如果以对象属性的形式来使用组合式函数中返回的状态，可以将返回的对象用 reactive() 包装一次，这样其中的 ref 会被自动解包。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mouse <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// mouse.x 链接到了原来的 x ref</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mouse<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
Mouse position is at<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> mouse<span class="token punctuation">.</span>x <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> mouse<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-副作用" tabindex="-1"><a class="header-anchor" href="#_4-副作用" aria-hidden="true">#</a> 4. 副作用</h4><p>在组合式函数中可以执行副作用 (例如：添加 DOM 事件监听器或者请求数据)，但请注意以下规则：</p><ul><li>如果你的应用用到了服务端渲染 (SSR)，请确保在组件挂载后才调用的生命周期钩子中执行 DOM 相关的副作用，例如：onMounted()。这些钩子仅会在浏览器中被调用，因此可以确保能访问到 DOM。</li><li>确保在 onUnmounted() 时清理副作用。举例来说，如果一个组合式函数设置了一个事件监听器，它就应该在 onUnmounted() 中被移除 (就像我们在 useMouse() 示例中看到的一样)。</li></ul><h4 id="_5-使用限制" tabindex="-1"><a class="header-anchor" href="#_5-使用限制" aria-hidden="true">#</a> 5. 使用限制</h4><p>组合式函数在 <code>&lt;script setup&gt;</code> 或 <code>setup()</code> 钩子中，应始终被同步地调用。<br> 在某些场景下，可以在像 onMounted() 这样的生命周期钩子中使用他们。</p><p>这个限制是为了让 Vue 能够确定当前正在被执行的到底是哪个组件实例，只有能确认当前组件实例，才能够将生命周期钩子注册到该组件实例上；将计算属性和监听器注册到该组件实例上，以便在该组件被卸载时停止监听，避免内存泄漏。</p><h4 id="_6-tip" tabindex="-1"><a class="header-anchor" href="#_6-tip" aria-hidden="true">#</a> 6. TIP</h4><p><code>&lt;script setup&gt;</code> 是唯一在调用 await 之后仍可调用组合式函数的地方。<br> 编译器会在异步操作之后自动为你恢复当前的组件实例。</p><h2 id="iii-对比" tabindex="-1"><a class="header-anchor" href="#iii-对比" aria-hidden="true">#</a> Ⅲ. 对比</h2><h4 id="_1-与mixin比对" tabindex="-1"><a class="header-anchor" href="#_1-与mixin比对" aria-hidden="true">#</a> 1. 与Mixin比对</h4><p>mixins是vue2常用的一个选项，能够把组件逻辑提取到可复用的单元里。然而 mixins 有三个主要的短板：</p><ul><li>不清晰的数据来源：当使用了多个 mixin 时，实例上的数据属性来自哪个 mixin 变得不清晰，这使追溯实现和理解组件行为变得困难。这也是推荐在组合式函数中使用 ref + 解构模式的理由：让属性的来源在消费组件时一目了然。</li><li>命名空间冲突：多个来自不同作者的 mixin 可能会注册相同的属性名，造成命名冲突。若使用组合式函数，你可以通过在解构变量时对变量进行重命名来避免相同的键名。</li><li>隐式的跨 mixin 交流：多个 mixin 需要依赖共享的属性名来进行相互作用，这使得它们隐性地耦合在一起。而一个组合式函数的返回值可以作为另一个组合式函数的参数被传入，像普通函数那样。</li></ul><p>基于上述理由，不再推荐在 Vue 3 中继续使用 mixin。保留该功能只是为了项目迁移的需求和照顾熟悉它的用户。</p><h4 id="_2-与无渲染组件比对" tabindex="-1"><a class="header-anchor" href="#_2-与无渲染组件比对" aria-hidden="true">#</a> 2. 与无渲染组件比对</h4><p>组合式函数相对于无渲染组件的主要优势是：组合式函数不会产生额外的组件实例开销。<br> 当在整个应用中使用时，由无渲染组件产生的额外组件实例会带来无法忽视的性能开销。<br> 推荐在纯逻辑复用时使用组合式函数，在需要同时复用逻辑和视图布局时使用无渲染组件。</p>`,56),o=[p];function c(i,u){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","7-1.组合式函数.html.vue"]]);export{r as default};
