import{_ as a,o as e,c as t,e as r}from"./app-c07941ad.js";const n="/front-doc/img/basic/html/9-4-1.png",i="/front-doc/img/basic/html/9-4-2.png",l={},s=r('<h2 id="i-arraybuffer" tabindex="-1"><a class="header-anchor" href="#i-arraybuffer" aria-hidden="true">#</a> Ⅰ. ArrayBuffer</h2><p>JS操作二进制数据能力比较弱，实现方法效率低下，易产生错误，为此H5新增两种对象：<br> ArrayBuffer对象和ArrayBufferView对象。</p><h4 id="_1-arraybuffer对象说明" tabindex="-1"><a class="header-anchor" href="#_1-arraybuffer对象说明" aria-hidden="true">#</a> 1. ArrayBuffer对象说明</h4><ul><li>该对象表示一个固定长度的二进制缓存区，用来储存来自于文件或网络的大数据。</li><li>用户不能直接存取ArrayBuffer缓存区中的内容，必须通过ArrayBufferView对象来读写。<br><img src="'+n+`" alt="9-4-1" loading="lazy"></li></ul><h4 id="_2-创建arraybuffer对象" tabindex="-1"><a class="header-anchor" href="#_2-创建arraybuffer对象" aria-hidden="true">#</a> 2. 创建ArrayBuffer对象</h4><p>ArrayBuffer缓存区创建成功后，该缓存区内储存数据初始化为0。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> buffer <span class="token operator">=</span> <span class="token function">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数：无符号int整数，用于设置缓存区长度，单位为字节。</li><li>length属性：该属性值表示缓存区的长度。</li></ul><h2 id="ii-arraybufferview" tabindex="-1"><a class="header-anchor" href="#ii-arraybufferview" aria-hidden="true">#</a> Ⅱ. ArrayBufferView</h2><p>H5不允许字节使用ArrayBufferView对象，而是使用ArrayBufferView的子类实例来存取ArrayBuffer缓存区中的数据。</p><h4 id="_1-arraybufferview对象的作用" tabindex="-1"><a class="header-anchor" href="#_1-arraybufferview对象的作用" aria-hidden="true">#</a> 1. ArrayBufferView对象的作用</h4><p>ArrayBufferView对象将缓存区中的数据转换为各种数值类型的数组。<br> 可以根据同一个ArrayBuffer对象创建各种数值类型数组。</p><h4 id="_2-创建arraybufferview对象" tabindex="-1"><a class="header-anchor" href="#_2-创建arraybufferview对象" aria-hidden="true">#</a> 2. 创建ArrayBufferView对象</h4><p>需要使用ArrayBufferView的子类和ArrayBuffer对象来创建ArrayBufferView对象。<br><img src="`+i+`" alt="9-4-2" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> buffer <span class="token operator">=</span> <span class="token function">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> abv <span class="token operator">=</span> <span class="token function">Int8Array</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> abv <span class="token operator">=</span> <span class="token function">Uint16Array</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ArrayBufferView8个子类，每个子类创建的ArrayBufferView对象数值类型都不同。</li><li>创建ArrayBufferView的必备参数就是一个ArrayBuffer对象。</li></ul><h4 id="_3-arraybufferview的子类" tabindex="-1"><a class="header-anchor" href="#_3-arraybufferview的子类" aria-hidden="true">#</a> 3. ArrayBufferView的子类</h4><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">字节长度</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">Int8Array</td><td style="text-align:left;">1</td><td style="text-align:left;">8位整数数组</td></tr><tr><td style="text-align:left;">Uint8Array</td><td style="text-align:left;">1</td><td style="text-align:left;">8位无符号整数数组</td></tr><tr><td style="text-align:left;">Uint8ClampedArray</td><td style="text-align:left;">1</td><td style="text-align:left;">8位无符号整数数组，代替CanvasPixelArray数组</td></tr><tr><td style="text-align:left;">Inte16Array</td><td style="text-align:left;">2</td><td style="text-align:left;">16位整数数组</td></tr><tr><td style="text-align:left;">Uint16Array</td><td style="text-align:left;">2</td><td style="text-align:left;">16位无符号整数数组</td></tr><tr><td style="text-align:left;">Int32Array</td><td style="text-align:left;">4</td><td style="text-align:left;">32位整数数组</td></tr><tr><td style="text-align:left;">Uint32Array</td><td style="text-align:left;">4</td><td style="text-align:left;">32位无符号整数数组</td></tr><tr><td style="text-align:left;">Float32Array</td><td style="text-align:left;">4</td><td style="text-align:left;">32位IEEE浮点数数组</td></tr><tr><td style="text-align:left;">Float64Array</td><td style="text-align:left;">8</td><td style="text-align:left;">64位IEEE浮点数数组</td></tr></tbody></table><h4 id="_4-创建arraybufferview的可选参数" tabindex="-1"><a class="header-anchor" href="#_4-创建arraybufferview的可选参数" aria-hidden="true">#</a> 4. 创建ArrayBufferView的可选参数</h4><p>在创建ArrayBufferView对象时，除了要指定ArrayBuffer对象外，还可以使用以下两个可选参数。</p><ul><li>byteOffset：无符号整数，设置读取ArrayBuffer的开始位置，单位是字节。 <ul><li>属性值必须为数组中单个元素的直接长度倍数胜率该值，则从第一个直接读取。</li></ul></li><li>length：无符号整数，设置ArrayBufferView数组的元素个数。 <ul><li>省略则根据缓存区长度、byteOffse和每个元素的字节长度自动计算出元素个数。<br><strong>规则</strong></li></ul></li><li>如果设置了byteOffset和length：数组将从byteOffset参数值指定的开始位置开始，读取，读取length个元素。length*每个元素的长度=读取的总数据量。</li><li>如果忽略了byteOffset和length参数，数组将读取整个ArrayBuffer缓存区。</li><li>如果省略length参数值，将从byteOffset指定的位置开始读取到缓存区结束位置。</li></ul><h4 id="_5-arraybufferview对象的属性" tabindex="-1"><a class="header-anchor" href="#_5-arraybufferview对象的属性" aria-hidden="true">#</a> 5. ArrayBufferView对象的属性</h4><ul><li>buffer：只读属性，表示ArrayBuffer对象，返回ArrayBufferView对象引用的缓存区。</li><li>byteOffset：只读属性，表示一个无符号整数，返回ArrayBufferView对象开始引用的位置与ArrayBuffer缓存区的第一个字符之间的偏离值，单位是字节</li><li>length：只读属性，表示一个无符号整数，返回数组中元素的个数。</li></ul><h4 id="_6-存取arraybufferview的数据" tabindex="-1"><a class="header-anchor" href="#_6-存取arraybufferview的数据" aria-hidden="true">#</a> 6. 存取ArrayBufferView的数据</h4><p>ArrayBufferView就是用来操作ArrayBuffer中的数据的。当设置了ArrayBufferView的数据，对应ArrayBuffer中数据会同步被修改。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> byte <span class="token operator">=</span> abv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读取第1个字节的数据。</span>
abv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//设置第1个字节的数据。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-dataview" tabindex="-1"><a class="header-anchor" href="#iii-dataview" aria-hidden="true">#</a> Ⅲ. DataView</h2><p>该对象继承了ArrayBufferView类，同样可以用来存取ArrayBuffer缓存区中的数据。</p><h4 id="_1-创建dataview对象" tabindex="-1"><a class="header-anchor" href="#_1-创建dataview对象" aria-hidden="true">#</a> 1. 创建DataView对象</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span>byteOffsetr<span class="token punctuation">,</span>byteLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数1：一个 ArrayBuffer对象，代表一个 ArrayBuffer 缓存区</li><li>参数2：可选，无符号整数，设置读取ArrayBuffer的开始位置，单位是字节。</li><li>参数3：代表 DataView 对象的总字节长度。 <ul><li>说明DataView 对象从 byteOffset 参数值所指定的开始位置开始读取，读取长度为 byteLength 参数值所指定的总字节长度。</li></ul></li><li>返回值：一个表示指定数据缓存区的新DataView 对象。（这句话也许不是非常有助于说明清楚）可以把返回的对象想象成一个二进制字节缓存区 array buffer 的“解释器”——它知道如何在读取或写入时正确地转换字节码。这意味着它能在二进制层面处理整数与浮点转化、字节顺序等其他有关的细节问题。</li></ul><h4 id="_2-dataview对象包含的方法" tabindex="-1"><a class="header-anchor" href="#_2-dataview对象包含的方法" aria-hidden="true">#</a> 2. DataView对象包含的方法</h4><h5 id="_2-1-读取数据的方法" tabindex="-1"><a class="header-anchor" href="#_2-1-读取数据的方法" aria-hidden="true">#</a> 2.1 读取数据的方法</h5><ul><li>getInt8(byteOffset)：读取1个字节，返回一个8位整数。</li><li>getUint8(byteOffset)：读取1个字节，返回一个无符号的8位整数。</li><li>getInt16(byteOffset,littleEndian)：读取2个字节，返回一个16位整数。</li><li>getUint16(byteOffset,littleEndian)：读取2个字节，返回一个无符号的16位整数。</li><li>getInt32(byteOffset,littleEndian)：读取4个字节，返回一个32位整数。</li><li>getUint32(byteOffset,littleEndian)：读取4个字节，返回一个无符号的32位整数。</li><li>getFloat32(byteOffset,littleEndian)：读取4个字节，返回一个32位浮点数。</li><li>getFloat64(byteOffset,littleEndian)：读取8个字节，返回一个64位浮点数。</li></ul><h5 id="_2-2-设置数据的方法" tabindex="-1"><a class="header-anchor" href="#_2-2-设置数据的方法" aria-hidden="true">#</a> 2.2 设置数据的方法</h5><ul><li>setInt8(byteOffset,value)：写入1个字节的8位整数。</li><li>setUint8(byteOffset,value)：写入1个字节的8位无符号整数。</li><li>setInt16(byteOffset,value,littleEndian)：写入2个字节的16位整数。</li><li>setUint16(byteOffset,value,littleEndian)：写入2个字节的16位无符号整数。</li><li>setInt32(byteOffset,value,littleEndian)：写入4个字节的32位整数。</li><li>setUint32(byteOffset,value,littleEndian)：写入4个字节的32位无符号整数。</li><li>setFloat32(byteOffset,value,littleEndian)：写入4个字节的32位浮点数。</li><li>setFloat64(byteOffset,value,littleEndian)：写入8个字节的64位浮点数。</li></ul><h5 id="_2-3-参数分析" tabindex="-1"><a class="header-anchor" href="#_2-3-参数分析" aria-hidden="true">#</a> 2.3 参数分析</h5><ul><li>byteOffset：读取数据的起始位置（相对于DataView对象）。</li><li>value：在指定位置设定的整形数值。</li><li>littleEndian：可选，布尔类型，判断该数值的直接序。默认为false； <ul><li>true：表示以 little-endian 方式读取该整数数值（低地址存放最低有效字节）；</li><li>false：表示以 big-endian 方式读取该整数数值（低地址存放最高有效字节）。</li></ul></li></ul>`,38),f=[s];function d(u,c){return e(),t("div",null,f)}const o=a(l,[["render",d],["__file","9-4.缓存对象.html.vue"]]);export{o as default};
