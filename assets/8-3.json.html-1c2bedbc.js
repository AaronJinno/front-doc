import{_ as n,o as a,c as s,e}from"./app-277eb25d.js";const t="/front-doc/img/basic/js/8-3-1.jpg",o={},i=e('<h2 id="i-json介绍" tabindex="-1"><a class="header-anchor" href="#i-json介绍" aria-hidden="true">#</a> Ⅰ. JSON介绍</h2><h4 id="_1-什么是json" tabindex="-1"><a class="header-anchor" href="#_1-什么是json" aria-hidden="true">#</a> 1. 什么是JSON</h4><p>JSON：JavaScript Object Notation（JS对象表示法）。</p><p>和JavaScript没有任何关系，它只是参照了JavaScript对对象定义的数据格式。</p><figure><img src="'+t+`" alt="8-3-1" tabindex="0" loading="lazy"><figcaption>8-3-1</figcaption></figure><ul><li>本身是一串字符串，只是它有固定格式的字符串，符合这个数据格式要求的字符串，我们称之为JSON。</li><li>一种跨平台的轻量级的数据交换格式，JSON采用完全独立于语言的文本格式。</li><li>就是一种有规则字符串。Key/Vaule存储</li><li>常用来数据传输，因为它易于程序之前读写操作。</li><li>JS字面量对象，直接外加引号，就是JSON格式了。</li></ul><h4 id="_2-与xml的异同" tabindex="-1"><a class="header-anchor" href="#_2-与xml的异同" aria-hidden="true">#</a> 2. 与XML的异同</h4><h5 id="_2-1-相同之处" tabindex="-1"><a class="header-anchor" href="#_2-1-相同之处" aria-hidden="true">#</a> 2.1 相同之处</h5><ul><li>JSON 是纯文本</li><li>JSON 具有&quot;自我描述性&quot;（人类可读）</li><li>JSON 具有层级结构（值中存在值）</li><li>JSON 可通过 JavaScript 进行解析</li><li>JSON 数据可使用 AJAX 进行传输</li></ul><h5 id="_2-2-不同之处" tabindex="-1"><a class="header-anchor" href="#_2-2-不同之处" aria-hidden="true">#</a> 2.2 不同之处</h5><ul><li>没有结束标签</li><li>更短</li><li>读写的速度更快</li><li>能够使用内建的 JavaScript eval() 方法进行解析</li><li>使用数组</li><li>不使用保留字</li></ul><h4 id="_3-储存方式" tabindex="-1"><a class="header-anchor" href="#_3-储存方式" aria-hidden="true">#</a> 3. 储存方式</h4><p>JSON一般作为变量的值，也可以作为单独的JSON文件储存，后缀为.json，里面直接以{}开始写键值对。</p><h4 id="_4-json对象与json数组" tabindex="-1"><a class="header-anchor" href="#_4-json对象与json数组" aria-hidden="true">#</a> 4. JSON对象与JSON数组</h4><p>JSON分为JSON对象和JSON数组</p><h5 id="_4-1-json对象" tabindex="-1"><a class="header-anchor" href="#_4-1-json对象" aria-hidden="true">#</a> 4.1 JSON对象</h5><p>写法为JS的字面量对象形式，以 &quot;{&quot; 开始，以 &quot;}&quot; 结束。中间包裹的为<code>Key:Value</code>的数据结构。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;sojson&quot;</span><span class="token punctuation">}</span><span class="token comment">//字符串一定要用双引号括起来</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4-2-jsonarray" tabindex="-1"><a class="header-anchor" href="#_4-2-jsonarray" aria-hidden="true">#</a> 4.2 JSONArray</h5><p>写法为JS的字面量数组形式，以 &quot;[&quot; 开始，以 &quot;]&quot; 结束。中间为装起来的数据</p><p>相当于一个包含JOSN的数组，常用在配置文件中。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        ...
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-json定义" tabindex="-1"><a class="header-anchor" href="#ii-json定义" aria-hidden="true">#</a> Ⅱ. JSON定义</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>$obj = <span class="token punctuation">{</span>
    <span class="token property">&quot;type1&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;type2&quot;</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">,</span>
    <span class="token property">&quot;type3&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;jinno&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;type4&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;type5&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;type6&quot;</span><span class="token operator">:</span><span class="token null keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-整体格式" tabindex="-1"><a class="header-anchor" href="#_1-整体格式" aria-hidden="true">#</a> 1. 整体格式</h4><p>以{}或[]括起来，一般是{}，里面是key：value键值对的方式储存数据，类似JS对象。</p><h4 id="_2-数据类型" tabindex="-1"><a class="header-anchor" href="#_2-数据类型" aria-hidden="true">#</a> 2. 数据类型</h4><ul><li>key的类型: 必须是string，且必须是双引号括起来。</li><li>值的类型: 数字(int/float)、字符串、Boolean、数组、null。 <ul><li>值也可以是一个JSON对象，形成JSON嵌套。</li></ul></li></ul><h4 id="_3-分隔符" tabindex="-1"><a class="header-anchor" href="#_3-分隔符" aria-hidden="true">#</a> 3. 分隔符</h4><p>每个键值对必须使用逗号分隔。最后一个值可以不加逗号，一般也不加逗号</p><h4 id="_4-注释" tabindex="-1"><a class="header-anchor" href="#_4-注释" aria-hidden="true">#</a> 4. 注释</h4><p>JSON不支持注释，包括JSON文件。</p><h4 id="_5-json数组对象" tabindex="-1"><a class="header-anchor" href="#_5-json数组对象" aria-hidden="true">#</a> 5. JSON数组对象</h4><p>JSON数组是数组作为JSON的值，同时该数组中也可以包含多个JSON对象，这是常用的数据结构，比如api返回数据列表。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;user&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;jinno&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">20</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;aaron&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">20</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-json取值" tabindex="-1"><a class="header-anchor" href="#iii-json取值" aria-hidden="true">#</a> Ⅲ. JSON取值</h2><p>类似于JS对象，我们可以直接使用&quot;.&quot;语法或中括号语法进行取值。</p><h4 id="_1-点语法" tabindex="-1"><a class="header-anchor" href="#_1-点语法" aria-hidden="true">#</a> 1. 点语法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>a <span class="token operator">=</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-中括号语法" tabindex="-1"><a class="header-anchor" href="#_2-中括号语法" aria-hidden="true">#</a> 2. 中括号语法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>b <span class="token operator">=</span> obj<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-数组对象遍历" tabindex="-1"><a class="header-anchor" href="#_3-数组对象遍历" aria-hidden="true">#</a> 3. 数组对象遍历</h4><p>JSON数组里包含多个相同结构的JSON对象是很常用的用法，比如视频信息列表，这是可以使用遍历取值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;video&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token operator">...</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">.</span>video<span class="token punctuation">)</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-json工具类" tabindex="-1"><a class="header-anchor" href="#iv-json工具类" aria-hidden="true">#</a> Ⅳ. JSON工具类</h2><h4 id="_1-json-parse" tabindex="-1"><a class="header-anchor" href="#_1-json-parse" aria-hidden="true">#</a> 1. JSON.parse()</h4><p>JSON工具类，可以将JSON字符串转为JS对象，参数是JSON字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>json<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将JSON字符串转为JS对象</span>
json<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将JSON数组转为JS对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-json-stringfy" tabindex="-1"><a class="header-anchor" href="#_2-json-stringfy" aria-hidden="true">#</a> 2. JSON.stringfy()</h4><p>JSON工具类，将一个JS对象转为JSON字符串，参数是JS对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;domain&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;sojson.com&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;author&quot;</span><span class="token operator">:</span><span class="token string">&quot;soso&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,51),p=[i];function c(l,r){return a(),s("div",null,p)}const d=n(o,[["render",c],["__file","8-3.json.html.vue"]]);export{d as default};
