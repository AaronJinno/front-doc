import{_ as i,r as p,o as r,c as o,a,b as n,d as e,e as t}from"./app-351da1f5.js";const l={},c=t(`<h2 id="配置介绍" tabindex="-1"><a class="header-anchor" href="#配置介绍" aria-hidden="true">#</a> 配置介绍</h2><p>如果没有任何配置，VuePress 站点仅有一些最基础的功能。</p><h4 id="_1-配置文件" tabindex="-1"><a class="header-anchor" href="#_1-配置文件" aria-hidden="true">#</a> 1. 配置文件</h4><p>为了更好地自定义网站，首先在文档目录src下创建一个 .vuepress 目录，所有 VuePress 相关的文件都将会被放在这里。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果使用主题的话，这些都配置好了，只需进行个性化修改</p></div><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>├─ src
│  ├─ .vuepress
│  │  ├─ client.js   &lt;--- 客户端配置文件
│  │  └─ config.js   &lt;--- 配置文件
│  └─ README.md
├─ .gitignore
└─ package.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-config-js-基础配置文件" tabindex="-1"><a class="header-anchor" href="#_2-config-js-基础配置文件" aria-hidden="true">#</a> 2. config.js：基础配置文件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>defineUserConfig<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuepress&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">lang</span><span class="token operator">:</span> <span class="token string">&#39;zh-CN&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;aicell&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">description</span><span class="token operator">:</span><span class="token string">&#39;AI文档站点&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-client-js-客户端配置文件" tabindex="-1"><a class="header-anchor" href="#_3-client-js-客户端配置文件" aria-hidden="true">#</a> 3. client.js：客户端配置文件</h4><p>用于添加一些客户端配置代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineClientConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vuepress/client&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineClientConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">enhance</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> app<span class="token punctuation">,</span> router<span class="token punctuation">,</span> siteData <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rootComponents</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-配置的内容" tabindex="-1"><a class="header-anchor" href="#_4-配置的内容" aria-hidden="true">#</a> 4. 配置的内容</h4><ul><li>站点配置：站点配置的意思是，无论你使用什么主题，这些配置项都可以生效。 <ul><li>每一个站点都应该有它的 lang, title 和 description 等属性</li></ul></li><li>主题配置：主题配置将会被 VuePress 主题来处理，所以它取决于你使用的主题是什么。一般的处理是创建一个专门的主题配置文件，然后将该文件引入主配置文件。</li></ul><h2 id="页面介绍" tabindex="-1"><a class="header-anchor" href="#页面介绍" aria-hidden="true">#</a> 页面介绍</h2><p>VuePress 是以 Markdown 为中心的，每一个 Markdown 文件都是一个单独的页面。</p><h4 id="_1-路由" tabindex="-1"><a class="header-anchor" href="#_1-路由" aria-hidden="true">#</a> 1. 路由</h4><p>默认情况下，页面的路由路径是根据 Markdown 文件的相对路径决定的。</p><p>一般将 docs 目录作为sourceDir 。</p><h4 id="_2-入口文件" tabindex="-1"><a class="header-anchor" href="#_2-入口文件" aria-hidden="true">#</a> 2. 入口文件</h4>`,19),d={href:"http://README.md",target:"_blank",rel:"noopener noreferrer"},u={href:"http://index.md",target:"_blank",rel:"noopener noreferrer"},k=t(`<h4 id="_3-frontmatter" tabindex="-1"><a class="header-anchor" href="#_3-frontmatter" aria-hidden="true">#</a> 3. Frontmatter</h4><p>Markdown 文件可以包含一个 YAML Frontmatter。</p><p>可以通过 Frontmatter 来覆盖当前页面的 lang, title, description 等属性。因此，你可以把 Frontmatter 当作页面级作用域的配置。</p><p>Frontmatter 必须在 Markdown 文件的顶部，并且被包裹在一对三短划线中间。本质上就是Yaml配置。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">---</span>
<span class="token key atrule">lang</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN
<span class="token key atrule">title</span><span class="token punctuation">:</span> 页面的标题
<span class="token key atrule">description</span><span class="token punctuation">:</span> 页面的描述
<span class="token punctuation">---</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-内容" tabindex="-1"><a class="header-anchor" href="#_4-内容" aria-hidden="true">#</a> 4. 内容</h4><p>页面的主要内容是使用 Markdown 书写的。VuePress 首先会将 Markdown 转换为 HTML ，然后将 HTML 作为 Vue 单文件组件的 <code>&lt;template&gt;</code> 。</p><p>借助 markdown-it（可定制扩展的Markdown项目）和 Vue 模板语法的能力，基础的 Markdown 可以得到很多的扩展功能。</p><h4 id="_5-基本使用示例" tabindex="-1"><a class="header-anchor" href="#_5-基本使用示例" aria-hidden="true">#</a> 5. 基本使用示例</h4>`,9),h={href:"http://xn--docsREADME-9i2p630bd4p8zz6fbuz2u.md",target:"_blank",rel:"noopener noreferrer"},v=t(`<div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml"><span class="token key atrule">lang</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN
<span class="token key atrule">title</span><span class="token punctuation">:</span> aicell
<span class="token key atrule">description</span><span class="token punctuation">:</span> ai文档</span>
<span class="token punctuation">---</span></span>
Hello vuepress
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="打包介绍" tabindex="-1"><a class="header-anchor" href="#打包介绍" aria-hidden="true">#</a> 打包介绍</h2><h4 id="_1-打包工具" tabindex="-1"><a class="header-anchor" href="#_1-打包工具" aria-hidden="true">#</a> 1. 打包工具</h4><p>Webpack和Vite二选一，Vite性能更好，文档以Vite作为说明。</p><p>在使用 vuepress 包时，会自动安装和使用 Vite 打包工具。</p><h4 id="_2-配置打包工具" tabindex="-1"><a class="header-anchor" href="#_2-配置打包工具" aria-hidden="true">#</a> 2. 配置打包工具</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> viteBundler <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vuepress/bundler-vite&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineUserConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vuepress/cli&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">bundler</span><span class="token operator">:</span> <span class="token function">viteBundler</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">viteOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">vuePluginOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-使用说明" tabindex="-1"><a class="header-anchor" href="#_3-使用说明" aria-hidden="true">#</a> 3. 使用说明</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>框架都安排好了，基本不用自定义，采用默认的即可</p></div><h2 id="部署方式介绍" tabindex="-1"><a class="header-anchor" href="#部署方式介绍" aria-hidden="true">#</a> 部署方式介绍</h2><h4 id="_1-github部署" tabindex="-1"><a class="header-anchor" href="#_1-github部署" aria-hidden="true">#</a> 1. github部署</h4><p>通过git的workflows，向github提交代码的同时，将编译后的项目部署到github page</p><p>也可以选择其他代码托管平台或gitee，原理一样。</p><h4 id="_2-服务器部署" tabindex="-1"><a class="header-anchor" href="#_2-服务器部署" aria-hidden="true">#</a> 2. 服务器部署</h4><ul><li>本地：git托管，写md文档、修改md文档，提交到github仓库。</li><li>GitHub：github托管所有的文档。</li><li>服务器：拉取github的文档，编译后就可以提供服务</li></ul><h4 id="_3-静态网页托管" tabindex="-1"><a class="header-anchor" href="#_3-静态网页托管" aria-hidden="true">#</a> 3. 静态网页托管</h4><p>直接将编译后的项目进行静态托管，就是更新比较麻烦，需要全部上传一次。</p>`,17);function m(b,g){const s=p("ExternalLinkIcon");return r(),o("div",null,[c,a("p",null,[n("默认配置下， "),a("a",d,[n("README.md"),e(s)]),n(" (注意是大写的) 和 "),a("a",u,[n("index.md"),e(s)]),n(" 都会被转换成 index.html ，并且其对应的路由路径都是由斜杠结尾的。然而，如果你想同时保留这两个文件，就可能会造成冲突。")]),k,a("p",null,[n("搭建好项目结构后，"),a("a",h,[n("在docs目录下创建README.md"),e(s)])]),v])}const _=i(l,[["render",m],["__file","1-3.使用.html.vue"]]);export{_ as default};
