import{_ as a,o as s,c as n,e}from"./app-c07941ad.js";const t="/front-doc/img/basic/css/6-2-1.jpg",i={},c=e('<figure><img src="'+t+`" alt="6-2-1" tabindex="0" loading="lazy"><figcaption>6-2-1</figcaption></figure><p>3D变形是基于2D变形的，只是多增加了一个z轴。3D变形主要包括以下函数</p><ul><li>3D位移：translateZ()、translate3D()</li><li>3D旋转：rotateX()、rotateY()、rotateZ()、rotate3d()</li><li>3D缩放：scaleZ()、scale3d()</li><li>3D矩阵：matrix3D()</li></ul><h4 id="_1-位移" tabindex="-1"><a class="header-anchor" href="#_1-位移" aria-hidden="true">#</a> 1. 位移</h4><h5 id="_1-1-translate3d" tabindex="-1"><a class="header-anchor" href="#_1-1-translate3d" aria-hidden="true">#</a> 1.1 translate3d</h5><p>使元素在x,y,z轴上进行位移。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token function">translate3d</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span>ty<span class="token punctuation">,</span>tz<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数：tx-横向位移量，ty-纵向位移量，tz-z坐标位移量。</li><li>取值：与translate一样，注意tz不能取百分比值。</li><li>当z轴值越大（&gt;0），元素离观看者越近，视觉上比较大，反之值越小（&lt;0)，元素离观看者越远，视觉上元素变得更小。</li></ul><h5 id="_1-2-translatez" tabindex="-1"><a class="header-anchor" href="#_1-2-translatez" aria-hidden="true">#</a> 1.2 translateZ</h5><p>使元素在z轴上进行位移。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token function">translate</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>t指的是Z轴的向量位移长度。</li><li>该函数完全可以使用translate3d的第三个参数替代。</li></ul><h4 id="_2-缩放" tabindex="-1"><a class="header-anchor" href="#_2-缩放" aria-hidden="true">#</a> 2. 缩放</h4><h5 id="_2-1-scale3d" tabindex="-1"><a class="header-anchor" href="#_2-1-scale3d" aria-hidden="true">#</a> 2.1 scale3d</h5><p>使用该函数可以使元素在，x,y,z轴上按比例缩放。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token function">scale3d</span><span class="token punctuation">(</span>sx<span class="token punctuation">,</span>sy<span class="token punctuation">,</span>sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数分别是x,y,z轴上的缩放比例，取值与scale()一样。</p><h5 id="_2-2-scalez" tabindex="-1"><a class="header-anchor" href="#_2-2-scalez" aria-hidden="true">#</a> 2.2 scaleZ</h5><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token function">scaleZ</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数是z轴缩放比例，该函数完全可以用scale3d的第三个参数替代。</p><h4 id="_3-旋转" tabindex="-1"><a class="header-anchor" href="#_3-旋转" aria-hidden="true">#</a> 3. 旋转</h4><p>注意3D旋转与2D旋转是完全不同的，2D旋转是基于原点的，而3D旋转是基于x,y,z轴的。</p><h5 id="_3-1-rotatex" tabindex="-1"><a class="header-anchor" href="#_3-1-rotatex" aria-hidden="true">#</a> 3.1 rotateX</h5><p>指定元素围绕x旋转。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token function">rotateX</span><span class="token punctuation">(</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数是旋转的角度，默认顺时针，如果是负数就按逆时针旋转。</p><h5 id="_3-2-rotatey" tabindex="-1"><a class="header-anchor" href="#_3-2-rotatey" aria-hidden="true">#</a> 3.2 rotateY</h5><p>指定元素围绕Y轴旋转，参数同上。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token function">rotateY</span><span class="token punctuation">(</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-3-rotatez" tabindex="-1"><a class="header-anchor" href="#_3-3-rotatez" aria-hidden="true">#</a> 3.3 rotateZ</h5><p>指定元素围绕Z轴旋转，参数同上。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token function">ratateZ</span><span class="token punctuation">(</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-4-rotate3d" tabindex="-1"><a class="header-anchor" href="#_3-4-rotate3d" aria-hidden="true">#</a> 3.4 rotate3d</h5><p>同时进行x,y,z轴的选择。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token function">rotate3d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>x,y,z：这三个参数都是矢量值，0代表该轴不旋转，1代表该轴旋转</li><li>a是旋转的角度，正值是顺时针旋转，负值是逆时针旋转。</li></ul>`,36),l=[c];function d(r,p){return s(),n("div",null,l)}const u=a(i,[["render",d],["__file","6-2.3D变形.html.vue"]]);export{u as default};
