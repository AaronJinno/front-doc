import{_ as n,o as s,c as a,e as p}from"./app-f9b28035.js";const e="/front-doc/img/vue/vue/4-3-1.png",t={},o=p('<div class="hint-container tip"><p class="hint-container-title">向子组件传递数据</p><p>Props是用来从父组件向子组件传递数据的。</p></div><h2 id="i-组件间的通信" tabindex="-1"><a class="header-anchor" href="#i-组件间的通信" aria-hidden="true">#</a> Ⅰ. 组件间的通信</h2><h4 id="_1-数据的传递" tabindex="-1"><a class="header-anchor" href="#_1-数据的传递" aria-hidden="true">#</a> 1. 数据的传递</h4><p>在开发中，往往一些数据确实需要从上层传递到下层，比如在一个页面中，我们从服务器请求到了很多的数据。其中一部分数据，并非是我们整个页面的大组件来展示的，而是需要下面的子组件进行展示。<br> 这个时候，并不会让子组件再次发送一个网络请求，而是直接让大组件(父组件)将数据传递给小组件(子组件)。</p><p>这时，我们就要用到Prop了（子组件无法直接访问父组件的响应性状态或data选项中的值）</p><h4 id="_2-组件间的通信方式" tabindex="-1"><a class="header-anchor" href="#_2-组件间的通信方式" aria-hidden="true">#</a> 2. 组件间的通信方式</h4><p>通过props向子组件传递数据，通过事件向父组件发送消息。</p><p>Vue实例和子组件的通信和父子组件的通信过程是一样的。</p><figure><img src="'+e+`" alt="4-3-1" tabindex="0" loading="lazy"><figcaption>4-3-1</figcaption></figure><h2 id="ii-props的声明" tabindex="-1"><a class="header-anchor" href="#ii-props的声明" aria-hidden="true">#</a> Ⅱ. Props的声明</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>一个组件需要显式声明它所接受的 props，这样 Vue 才能知道外部传入的哪些是 props，哪些是透传 attribute。</p></div><p>props用来接收从父组件传递过来的数据。</p><h4 id="_1-声明props" tabindex="-1"><a class="header-anchor" href="#_1-声明props" aria-hidden="true">#</a> 1. 声明Props</h4><p>在使用 <code>&lt;script setup&gt;</code> 的单文件组件中，props 可以使用 defineProps() 宏来声明。</p><div class="hint-container tip"><p class="hint-container-title">宏</p><p>宏是一种批量处理的称谓。它根据一系列预定义的规则替换一定的文本模式。</p></div><p>defineProps接收一个字符串数组，数组中的每个值都是数据传递时的名字（prop的名字）。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//声明要接收的props</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token comment">//访问props</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

===============选项式API============
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">//需要通过Props选项来声明props</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//声明props</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token comment">// props 会暴露到 \`this\` 上</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-对象格式【常用】" tabindex="-1"><a class="header-anchor" href="#_2-对象格式【常用】" aria-hidden="true">#</a> 2. 对象格式【常用】</h4><p>除了使用字符串数组来声明 prop 外，还可以使用对象的形式。</p><p>以对象形式声明的每个属性，key 是 prop 的名称，而值则是该 prop 预期类型的构造函数。<br> 对象形式的 props 声明不仅可以一定程度上作为组件的文档，而且如果其他开发者在使用你的组件时传递了错误的类型，也会在浏览器控制台中抛出警告</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
  <span class="token literal-property property">likes</span><span class="token operator">:</span> Number
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token comment">//访问props</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
============选项式API============
export default {
  props: {
    title: String,
    likes: Number
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-prop名字格式" tabindex="-1"><a class="header-anchor" href="#_3-prop名字格式" aria-hidden="true">#</a> 3. Prop名字格式</h4><h5 id="_3-1-声明时的格式" tabindex="-1"><a class="header-anchor" href="#_3-1-声明时的格式" aria-hidden="true">#</a> 3.1 声明时的格式</h5><p>如果一个 prop 的名字很长，声明prop时应使用 camelCase 形式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">greetingMessage</span><span class="token operator">:</span> String
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-传递时的格式" tabindex="-1"><a class="header-anchor" href="#_3-2-传递时的格式" aria-hidden="true">#</a> 3.2 传递时的格式</h5><p>父组件在传递数据时，prop的名字为了和 HTML attribute 对齐，通常会将其写为 kebab-case 形式。</p><p>prop的名字格式 kebab-case和 camelCase可以 <strong>自由转换匹配</strong>。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token attr-name">greeting-message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="iii-prop的数据传递" tabindex="-1"><a class="header-anchor" href="#iii-prop的数据传递" aria-hidden="true">#</a> Ⅲ. Prop的数据传递</h2><h4 id="_1-数据传递的过程" tabindex="-1"><a class="header-anchor" href="#_1-数据传递的过程" aria-hidden="true">#</a> 1. 数据传递的过程</h4><h5 id="_1-1-父组件" tabindex="-1"><a class="header-anchor" href="#_1-1-父组件" aria-hidden="true">#</a> 1.1 父组件</h5><ul><li>使用子组件：不使用子组件就无法向子组件传递数据，</li><li>向子组件传递prop：在子组件标签中通过属性的方式传递数据，该属性名就是prop的名字</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- titleSon是prop的名字 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentA</span> <span class="token attr-name">title-son</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>props的值<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">&#39;./components/ComponentA.vue&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-子组件" tabindex="-1"><a class="header-anchor" href="#_1-2-子组件" aria-hidden="true">#</a> 1.2 子组件</h5><ul><li>声明props：props中的prop要与父组件传递的prop名字一致才能接收成功</li><li>使用prop：根据prop的名字直接使用</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  {{titleSon}} //使用prop
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> 

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">//声明props</span>
<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">titleSon</span><span class="token operator">:</span>String <span class="token comment">//与声明时的名字一样才能接收成功</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> 
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-静态prop与动态prop" tabindex="-1"><a class="header-anchor" href="#_2-静态prop与动态prop" aria-hidden="true">#</a> 2. 静态Prop与动态Prop</h4><h5 id="_2-1-静态prop" tabindex="-1"><a class="header-anchor" href="#_2-1-静态prop" aria-hidden="true">#</a> 2.1 静态prop</h5><p>静态prop就是不通过v-bind绑定父组件的响应性状态，而是直接在子组件标签里给值（属性名=prop）。</p><p>注意：HTML中的很多类型都会被转为字符串类型，所以即使是静态prop也要加上v-bind。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BlogPost</span> <span class="token attr-name">:likes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>42<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-2-动态prop" tabindex="-1"><a class="header-anchor" href="#_2-2-动态prop" aria-hidden="true">#</a> 2.2 动态prop</h5><p>可以通过v-bind绑定属性，动态的传递prop的值。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SonComponent</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>My journey with Vue<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--静态--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SonComponent</span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SonTitle<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!--动态--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> 

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> SonTitle <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Vue&quot;</span><span class="token punctuation">)</span><span class="token comment">//通过响应式状态指定prop的值</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-传递不同类型的值" tabindex="-1"><a class="header-anchor" href="#_3-传递不同类型的值" aria-hidden="true">#</a> 3. 传递不同类型的值</h4><p>任何类型的值都可以作为 props 的值被传递。<br> 以下都是静态传递的例子，动态prop是直接绑定的变量，完全没问题。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- Number --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BlogPost</span> <span class="token attr-name">:likes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>42<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> //42是个JS表达式不是字符串,所以要用v-on

<span class="token comment">&lt;!-- Boolean --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BlogPost</span> <span class="token attr-name">:is-published</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- Array --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BlogPost</span> <span class="token attr-name">:comment-ids</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[234, 266, 273]<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- Object --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BlogPost</span> <span class="token attr-name">:author</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{name: &#39;Veronica&#39;,company: &#39;Veridian Dynamics&#39;}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-使用一个对象绑定多个prop" tabindex="-1"><a class="header-anchor" href="#_4-使用一个对象绑定多个prop" aria-hidden="true">#</a> 4. 使用一个对象绑定多个prop</h4><p>如果要将一个对象的所有属性都当作 props 传入，你可以使用没有参数的 v-bind，即只使用 v-bind 而非 :prop-name。</p><p>说明：绑定的一个对象中的所有属性而不是将整个对象作为props的值传递了过去，prop的名字是属性的名字。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>BlogPost v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">&quot;post&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;My Journey with Vue&#39;</span>
<span class="token punctuation">}</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>下面写法等价<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">==</span>

<span class="token operator">&lt;</span>BlogPost <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">&quot;post.id&quot;</span> <span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">&quot;post.title&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-单向数据流" tabindex="-1"><a class="header-anchor" href="#_5-单向数据流" aria-hidden="true">#</a> 5. 单向数据流</h4><p>所有的 props 都遵循着单向绑定原则，props 因父组件的更新而变化，自然地将新的状态向下流往子组件，而不会逆向传递。<br> 每次父组件更新后，所有的子组件中的 props 都会被更新到最新值。</p><h4 id="_6-prop的禁止更改" tabindex="-1"><a class="header-anchor" href="#_6-prop的禁止更改" aria-hidden="true">#</a> 6. prop的禁止更改</h4><p>不应该在子组件中去更改一个 prop。若你这么做了，Vue 会在控制台上向你抛出警告。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>const props = defineProps([&#39;foo&#39;])
// ❌ 警告！prop 是只读的！
props.foo = &#39;bar&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-1-替代方案" tabindex="-1"><a class="header-anchor" href="#_6-1-替代方案" aria-hidden="true">#</a> 6.1 替代方案</h5><p>导致想要更改一个 prop 的需求通常来源于以下两种场景：</p><ul><li>prop 被用于传入初始值；而子组件想在之后将其作为一个局部数据属性。 <ul><li>在这种情况下，最好是新定义一个局部数据属性，从 props 上获取初始值即可</li></ul></li><li>需要对传入的 prop 值做进一步的转换。 <ul><li>在这种情况中，最好是基于该 prop 值定义一个计算属性：</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;initialCounter&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;size&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// 计数器只是将 props.initialCounter 作为初始值</span>
<span class="token comment">// 像下面这样做就使 prop 和后续更新无关了</span>
<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>initialCounter<span class="token punctuation">)</span>

<span class="token comment">// 该 prop 变更时计算属性也会自动更新</span>
<span class="token keyword">const</span> normalizedSize <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>size<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-更改-对象-数组-类型的-props" tabindex="-1"><a class="header-anchor" href="#_6-2-更改-对象-数组-类型的-props" aria-hidden="true">#</a> 6.2 更改 <code>对象/数组</code> 类型的 props</h4><p>当对象或数组作为 props 被传入时，虽然子组件无法更改 props 绑定，但仍然可以更改对象或数组内部的值。这是因为 JavaScript 的对象和数组是按引用传递。</p><p>尽量避免这样做，Vue是因为监控这样的更改开销太大，才没有禁止的。</p><h2 id="iv-prop校验" tabindex="-1"><a class="header-anchor" href="#iv-prop校验" aria-hidden="true">#</a> Ⅳ. Prop校验</h2><p>可以为prop的值定义验证的方式（对象形式），这样如果验证失败（未满足数据的需求），Vue会在控制台进行警告，这在开发一个别人也会用到的组件时，尤为重要。</p><h4 id="_1-校验的内容" tabindex="-1"><a class="header-anchor" href="#_1-校验的内容" aria-hidden="true">#</a> 1. 校验的内容</h4><ul><li>数据类型 <ul><li>基础数据类型、自定义数据类型、多个数据类型</li><li>（给出 <code>null</code> 和 <code>undefined</code> 值则会跳过任何类型检查）</li></ul></li><li>是否为必需的prop</li><li>给定默认值<br> 也可以自定义校验函数。</li></ul><h4 id="_2-声明props的校验" tabindex="-1"><a class="header-anchor" href="#_2-声明props的校验" aria-hidden="true">#</a> 2. 声明props的校验</h4><p>要声明对 props 的校验，可以向 defineProps() 宏提供一个带有 props 校验选项的对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">propA</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
  
  <span class="token literal-property property">propB</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 多种可能的类型</span>
  
  <span class="token literal-property property">propC</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">//必传的prop</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  
  <span class="token literal-property property">propD</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>  <span class="token comment">// Number 类型</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token comment">//默认值</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  
  <span class="token literal-property property">propE</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span> <span class="token comment">//对象类型</span>
    <span class="token comment">// 对象或数组的默认值必须从一个工厂函数返回。</span>
    <span class="token comment">//该函数接收组件所接收到的原始 prop 作为参数。</span>
    <span class="token keyword">default</span><span class="token punctuation">(</span>rawProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  
  <span class="token literal-property property">propF</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">validator</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//自定义类型校验函数</span>
      <span class="token comment">// The value must match one of these strings</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;warning&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;danger&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  
  <span class="token literal-property property">propG</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>
    <span class="token comment">// 不像对象或数组的默认，这不是一个工厂函数。这会是一个用来作为默认值的函数</span>
    <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//函数类型的默认值</span>
      <span class="token keyword">return</span> <span class="token string">&#39;Default function&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-细节补充" tabindex="-1"><a class="header-anchor" href="#_3-细节补充" aria-hidden="true">#</a> 3. 细节补充</h4><ul><li>所有 prop 默认都是可选的，除非声明了 required: true。</li><li>除 Boolean 外的未传递的可选 prop 将会有一个默认值 undefined。</li><li>Boolean 类型的未传递 prop 将被转换为 false。这可以通过为它设置 default 来更改。 <ul><li>例如： 设置为 default: undefined 将与非布尔类型的 prop 的行为保持一致。</li></ul></li><li>如果声明了 default 值，那么在 prop 的值被解析为 undefined 时，无论 prop 是未被传递还是显式指明的 undefined，都会改为 default 值。</li><li>当 prop 验证失败的时候，(开发环境构建版本的) Vue 将会产生一个控制台的警告。</li></ul><h4 id="_4-验证支持的数据类型" tabindex="-1"><a class="header-anchor" href="#_4-验证支持的数据类型" aria-hidden="true">#</a> 4. 验证支持的数据类型</h4><p>校验选项中的 type 可以是下列这些原生构造函数：</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object</li><li>Date</li><li>Function</li><li>Symbol</li></ul><p>type 也可以是自定义的类或构造函数，Vue 将会通过 instanceof 来检查类型是否匹配。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName
    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">//Vue 会通过 instanceof Person 来校验 author prop 的值是否是 Person 类</span>
  <span class="token literal-property property">author</span><span class="token operator">:</span> Person
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="v-其他特性" tabindex="-1"><a class="header-anchor" href="#v-其他特性" aria-hidden="true">#</a> Ⅴ. 其他特性</h2><h4 id="_1-tip" tabindex="-1"><a class="header-anchor" href="#_1-tip" aria-hidden="true">#</a> 1. TIP</h4><ul><li>defineProps() 宏中的参数不可以访问 <code>&lt;script setup&gt;</code> 中定义的其他变量，因为在编译时整个表达式都会被移到外部的函数中。</li><li>props内的属性名不能与组件自己data内的属性名重复。不然就报错。</li></ul><h4 id="_2-boolean类型转换" tabindex="-1"><a class="header-anchor" href="#_2-boolean类型转换" aria-hidden="true">#</a> 2. Boolean类型转换</h4><p>为了更贴近原生 boolean attributes 的行为，声明为 Boolean 类型的 props 有特别的类型转换规则。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>defineProps({
  disabled: Boolean
})

<span class="token comment">&lt;!-- 等同于传入 :disabled=&quot;true&quot;  --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token attr-name">disabled</span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- 等同于传入 :disabled=&quot;false&quot; --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,84),i=[o];function l(c,r){return s(),a("div",null,i)}const d=n(t,[["render",l],["__file","4-3.Props.html.vue"]]);export{d as default};
