import{_ as n,o as s,c as a,e as t}from"./app-2b89a278.js";const p="/front-doc/img/basic/js/3-3-1.jpg",o="/front-doc/img/basic/js/3-3-2.jpg",e="/front-doc/img/basic/js/3-3-3.jpg",c={},i=t(`<h2 id="i-原型对象" tabindex="-1"><a class="header-anchor" href="#i-原型对象" aria-hidden="true">#</a> Ⅰ. 原型对象</h2><h4 id="_1-prototype-原型" tabindex="-1"><a class="header-anchor" href="#_1-prototype-原型" aria-hidden="true">#</a> 1. prototype：原型</h4><p>我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype。这个属性对应着一个对象，这个对象就是原型对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
fun<span class="token punctuation">.</span>prototype <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//函数的属性,原型对象,一个空对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>原型对象的默认属性：<code>constructor</code> -&gt;指向原型对象的构造函数</li><li>实例对象的默认属性：<code>__prote__</code> -&gt;指向构造函数的原型对象。</li></ul><h4 id="_2-proto" tabindex="-1"><a class="header-anchor" href="#_2-proto" aria-hidden="true">#</a> 2. <code>__proto__</code></h4><p>如果函数作为普通函数调用prototype没有任何作用。</p><p>构造函数的实例可以通过__proto__访问构造函数的prototype；<br> 可以把原型当做实例的父对象（因为所有的实例都可以访问相同的prototype）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//构造函数</span>
<span class="token keyword">var</span> jinno <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建实例</span>
jinno<span class="token punctuation">.</span>__proto__  <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jinno<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印实例的原型对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-prototype与-proto-的关系" tabindex="-1"><a class="header-anchor" href="#_2-1-prototype与-proto-的关系" aria-hidden="true">#</a> 2.1 prototype与_proto_的关系</h5><p>prototype是构造函数的属性，_proto_是实例对象的属性， ——这两者都指向同一个对象。</p><h4 id="_3-原型对象解析" tabindex="-1"><a class="header-anchor" href="#_3-原型对象解析" aria-hidden="true">#</a> 3. 原型对象解析</h4><p>原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象（构造函数和构造函数创造的对象都可以访问原型对象，且访问的是同一个原型对象）。</p><h4 id="_4-原型对象的意义" tabindex="-1"><a class="header-anchor" href="#_4-原型对象的意义" aria-hidden="true">#</a> 4. 原型对象的意义</h4><p>我们可以将对象中公有的内容，统一设置到原型对象中。当我们访问一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果有就直接使用。</p><p>以后创建构造函数时，可以将这些对象公有的属性和方法，统一添加到构造函数的原型对象中。这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法了。</p><h4 id="_5-向原型对象添加属性" tabindex="-1"><a class="header-anchor" href="#_5-向原型对象添加属性" aria-hidden="true">#</a> 5. 向原型对象添加属性</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//向原型对象中添加属性age</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jinno<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//jinno对象也有该属性了。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-向原型对象中添加方法" tabindex="-1"><a class="header-anchor" href="#_6-向原型对象中添加方法" aria-hidden="true">#</a> 6. 向原型对象中添加方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
jinno<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对象直接调用原型中的方法。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-constructor属性" tabindex="-1"><a class="header-anchor" href="#_7-constructor属性" aria-hidden="true">#</a> 7. constructor属性</h4><p>所有的原型对象上都有一个constructor属性，该属性指向的就是构造函数。</p><h4 id="_8-属性检测" tabindex="-1"><a class="header-anchor" href="#_8-属性检测" aria-hidden="true">#</a> 8. 属性检测</h4><p>使用in 检查对象中是否含有某个属性是，如果对象中没有但是原型中有，也会返回true。</p><h5 id="_8-1-hasownproperty" tabindex="-1"><a class="header-anchor" href="#_8-1-hasownproperty" aria-hidden="true">#</a> 8.1 hasOwnProperty</h5><p>检查对象自身中是否含有该属性，使用该方法，只有当对象自身中含有属性时，才会返回true。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jinno<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_9-原型对象的原型对象" tabindex="-1"><a class="header-anchor" href="#_9-原型对象的原型对象" aria-hidden="true">#</a> 9. 原型对象的原型对象</h4><p>原型对象也是对象，也有原型对象，当我们使用一个对象的属性或方法时，会在自身中寻找， 自身中如果有，则直接使用，如果没有则去原型对象中寻找，如果原型对象中有则使用，如果没有则去原型的原型中寻找，直接找到object对象的原型，object对象没有原型，如果object中依然找不到，则返回undefined。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jinno<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印原型的原型对象。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ii-原型链" tabindex="-1"><a class="header-anchor" href="#ii-原型链" aria-hidden="true">#</a> Ⅱ. 原型链</h2><p>一个对象所拥有的属性不仅仅是它本身拥有的属性，它还会从其他对象（原型对象）中继承一些属性。当js在一个对象中找不到需要的属性时，它会到这个对象的父对象（原型对象）上去找，以此类推，这就构成了对象的原型链。</p><p>当查找对象内部的属性/方法时, js引擎自动沿着这个原型链查找，总之对象直接通过__proto__属性就形成了一个链的结构就是----&gt;原型链。</p><h4 id="_1-构造函数、原型-与-实例之间的关系" tabindex="-1"><a class="header-anchor" href="#_1-构造函数、原型-与-实例之间的关系" aria-hidden="true">#</a> 1. 构造函数、原型 与 实例之间的关系</h4><figure><img src="`+p+'" alt="3-3-1" tabindex="0" loading="lazy"><figcaption>3-3-1</figcaption></figure><figure><img src="'+o+`" alt="3-3-2" tabindex="0" loading="lazy"><figcaption>3-3-2</figcaption></figure><p>实例-&gt;构造函数原型-&gt;构造函数原型的原型-&gt;Object对象的原型（object对象是所有对象的父对象）--&gt;null</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>man<span class="token punctuation">.</span>name <span class="token operator">--</span><span class="token operator">&gt;</span> 
man<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name<span class="token operator">--</span><span class="token operator">&gt;</span>
man<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>name <span class="token operator">==</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-原型链的尽头" tabindex="-1"><a class="header-anchor" href="#_2-原型链的尽头" aria-hidden="true">#</a> 2. 原型链的尽头</h4><figure><img src="`+e+`" alt="3-3-3" tabindex="0" loading="lazy"><figcaption>3-3-3</figcaption></figure><h5 id="_3-1-已知内容" tabindex="-1"><a class="header-anchor" href="#_3-1-已知内容" aria-hidden="true">#</a> 3.1 已知内容</h5><ul><li>构造函数：构造函数创建对象实例</li><li>对象：由构造函数创建</li><li>prototype：函数的属性，指向的是原型</li><li><strong>proto</strong>：对象的属性，指向的是构造函数的原型。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> obj  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>_proto__  <span class="token operator">===</span> fun<span class="token punctuation">.</span>prototype
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-结论" tabindex="-1"><a class="header-anchor" href="#_3-2-结论" aria-hidden="true">#</a> 3.2 结论</h5><p>构造函数和构造函数创建的对象，他们的原型是一样的，只是一个用prototype访问，一个用__proto__访问。</p><h5 id="_3-3-尽头" tabindex="-1"><a class="header-anchor" href="#_3-3-尽头" aria-hidden="true">#</a> 3.3 尽头</h5><ul><li>对象的尽头是：Object【终极对象】</li><li>函数的尽头是：Function【终极函数】</li><li>且：Object.<em>proto</em> === Function.prototype 【一个JS引擎内部函数C++，不需要了解）</li></ul><p>Object.<em>proto</em>.prototype == null ，已经到尽头了。<br> 因此所有对象的母对象就是object对象，object对象没有原型，如果object中依然找不到，则返回undefined。</p><h2 id="iii-原型链继承" tabindex="-1"><a class="header-anchor" href="#iii-原型链继承" aria-hidden="true">#</a> Ⅲ. 原型链继承</h2><h4 id="_1-原型链的继承" tabindex="-1"><a class="header-anchor" href="#_1-原型链的继承" aria-hidden="true">#</a> 1. 原型链的继承</h4><p>让子构造函数的实例的原型等于父构造函数的实例。原型链不能实现子类向父类中传参。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token string">&quot;parent&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>emotion<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子类型的原型指向父类型实例</span>
 <span class="token comment">//Child.prototype.constructor == Child</span>
<span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//有test()和tag</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-1-重写" tabindex="-1"><a class="header-anchor" href="#_1-1-重写" aria-hidden="true">#</a> 1.1 重写</h5><p>其实原型对象上任何类型的值，都不会被实例所重写/覆盖。在实例上设置与原型对象上同名属性的值，只会在实例上创建一个同名的本地属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//parent</span>
child<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token string">&quot;child&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//child</span>
<span class="token keyword">var</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//parent;重写不用影响到其他的实例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-引用类型属性的修改" tabindex="-1"><a class="header-anchor" href="#_1-2-引用类型属性的修改" aria-hidden="true">#</a> 1.2 引用类型属性的修改</h5><p>如果重写的是引用类型的值，那么其他实例也会受到影响。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>emotion<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;];</span>
child<span class="token punctuation">.</span>emotion<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>emotion<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;];</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>emotion<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;];其他对象也受到影响</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-3-最顶层的继承" tabindex="-1"><a class="header-anchor" href="#_1-3-最顶层的继承" aria-hidden="true">#</a> 1.3 最顶层的继承</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//会污染其他对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-构造函数继承" tabindex="-1"><a class="header-anchor" href="#_2-构造函数继承" aria-hidden="true">#</a> 2. 构造函数继承</h4><p>在子类的构造函数中，通过 apply() 或 call()的形式，调用父类构造函数，以实现继承。</p><p>意义：解决原型链继承中，引用类型属性的修改</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//父类：人</span>
<span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token string">&#39;脑袋瓜子&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>emotion <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;喜&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;怒&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;哀&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;乐&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//人都有喜怒哀乐</span>
<span class="token punctuation">}</span>
<span class="token comment">//子类：学生，继承了“人”这个类</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">studentID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>studentID <span class="token operator">=</span> studentID<span class="token punctuation">;</span>
  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>emotion<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&#39;喜&#39;, &#39;怒&#39;, &#39;哀&#39;, &#39;乐&#39;]</span>
stu1<span class="token punctuation">.</span>emotion<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;愁&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>emotion<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&quot;喜&quot;, &quot;怒&quot;, &quot;哀&quot;, &quot;乐&quot;, &quot;愁&quot;]</span>
<span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>emotion<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&quot;喜&quot;, &quot;怒&quot;, &quot;哀&quot;, &quot;乐&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-优点" tabindex="-1"><a class="header-anchor" href="#_2-1-优点" aria-hidden="true">#</a> 2.1 优点</h5><p>在子类函数中，通过call ( ) 方法调用父类函数后，子类实例 stu1, 可以访问到 Student 构造函数和 Person 构造函数里的所有属性和方法。这样就实现了子类向父类的继承，而且还解决了原型对象上对引用类型值的误修改操作。</p><h5 id="_2-2-缺点" tabindex="-1"><a class="header-anchor" href="#_2-2-缺点" aria-hidden="true">#</a> 2.2 缺点</h5><p>这种形式的继承，每个子类实例都会拷贝一份父类构造函数中的方法，每个实例都拷贝一份，占用内存大，尤其是方法过多的时候； 方法都作为了实例自己的方法，当需求改变，要改动其中的一个方法时，之前所有的实例，他们的该方法都不能及时作出更新。只有后面的实例才能访问到新方法。</p><h4 id="_3-组合继承【常用】" tabindex="-1"><a class="header-anchor" href="#_3-组合继承【常用】" aria-hidden="true">#</a> 3. 组合继承【常用】</h4><p>目的：将上面两个方式结合在一起，解决上面两个继承模式的缺点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//父类：人</span>
<span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token string">&#39;脑袋瓜子&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>emotion <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;喜&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;怒&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;哀&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;乐&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//人都有喜怒哀乐</span>
<span class="token punctuation">}</span>
<span class="token comment">//将 Person 类中需共享的方法放到 prototype 中，实现复用</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;吃吃喝喝&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;睡觉&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;快跑&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//子类：学生，继承了“人”这个类</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">studentID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>studentID <span class="token operator">=</span> studentID<span class="token punctuation">;</span>
  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//此时Student.prototype中的constructor被重写了，</span>
<span class="token comment">//会导致 stu1.constructor === Person</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment">//将 Student 原型对象的 constructor 指针重新指向 Student 本身</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student<span class="token punctuation">;</span> 

<span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>emotion<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&#39;喜&#39;, &#39;怒&#39;, &#39;哀&#39;, &#39;乐&#39;]</span>
stu1<span class="token punctuation">.</span>emotion<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;愁&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>emotion<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&quot;喜&quot;, &quot;怒&quot;, &quot;哀&quot;, &quot;乐&quot;, &quot;愁&quot;]</span>
<span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>emotion<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&quot;喜&quot;, &quot;怒&quot;, &quot;哀&quot;, &quot;乐&quot;]</span>
stu1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//吃吃喝喝</span>
stu2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//快跑</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Student</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们将 Person 类中需要复用的方法提取到 Person.prototype 中，然后设置 Student 的原型对象为 Person 类的一个实例，这样 stu1 就能访问到 Person 原型对象上的属性和方法了。</p><p>其次，为保证 stu1 和 stu2 拥有各自的父类属性副本，我们在 Student 构造函数中，还是使用了 Person.call ( this ) 方法。</p><p>如此，结合原型链继承和借用构造函数继承，就完美地解决了之前这二者各自表现出来的缺点。</p>`,74),u=[i];function l(r,d){return s(),a("div",null,u)}const m=n(c,[["render",l],["__file","3-3.原型链.html.vue"]]);export{m as default};
