import{_ as n,o as s,c as a,e as p}from"./app-351da1f5.js";const e={},t=p(`<h4 id="_1-创建应用实例" tabindex="-1"><a class="header-anchor" href="#_1-创建应用实例" aria-hidden="true">#</a> 1. 创建应用实例</h4><p>导入Vue包后，在JS区域通过Vue对象的createApp函数创建一个Vue应用实例。</p><ul><li>参数就是一个对象，对象就是根组件的配置对象，用来配置根组件</li><li>组合式API也可以将一个单文件组件作为参数，该单文件组件将作为根组件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span> <span class="token comment">//导入vue包</span>
<span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">//根组件的选项，或一个单文件组件    </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//创建Vue应用实例</span>

<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>选项式<span class="token constant">API</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>

<span class="token comment">//使用Vue对象的createAPP方法创建Vue应用</span>
<span class="token keyword">const</span> vm <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">//参数是一个对象，该对象就是Vue的配置对象</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//data选项</span>
        <span class="token keyword">return</span><span class="token punctuation">{</span>
            <span class="token literal-property property">uname</span><span class="token operator">:</span><span class="token string">&quot;Aaron&quot;</span>        
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-根组件" tabindex="-1"><a class="header-anchor" href="#_2-根组件" aria-hidden="true">#</a> 2. 根组件</h4><p>每个应用都需要一个“根组件”，其他组件将作为其子组件，项目渲染时将从根组件开始渲染。</p><p>createApp()方法的参数就是根组件，可以通过两种方式创建跟组件：</p><ul><li>对象：参数是一个<code>{ 对象 }</code>，利用选项式API来设置根组件。</li><li>单文件组件：参数是一个单文件组件，该单文件组件就会成为根组件。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span> <span class="token comment">//导入vue包</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span> <span class="token comment">//导入一个单文件组件</span>

<span class="token comment">//创建Vue应用,并指定导入的单文件组件为根组件</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>组件树</strong><br> 真实开发的应用都是由一颗嵌套的、可重用的、由根组件延伸出来的组件树组成的。</p><h4 id="_3-挂载应用" tabindex="-1"><a class="header-anchor" href="#_3-挂载应用" aria-hidden="true">#</a> 3. 挂载应用</h4><p>应用实例的根组件不会直接渲染在页面上。因为他不知道的要渲染在哪里，需要给他指定一个容器（指定容器的操作就是挂载）。</p><h5 id="_3-1-容器-template-模板" tabindex="-1"><a class="header-anchor" href="#_3-1-容器-template-模板" aria-hidden="true">#</a> 3.1 容器：template（模板）</h5><p>这里的容器指的就是一个html、body中的一个元素（标签），比如一个div，该div就可以作为渲染应用的容器。容器元素不作为应用的一部分，而只是应用的容器而已。</p><h5 id="_3-2-挂载" tabindex="-1"><a class="header-anchor" href="#_3-2-挂载" aria-hidden="true">#</a> 3.2 挂载</h5><p>挂载就是将应用实例放入容器的过程，应用实例需要调用.mount()方法来挂载，参数就是容器。</p><ul><li>参数可以是一个DOM元素或者CSS选择器字符串。应用实例的根组件将会渲染在容器里。</li><li>.mount() 方法应该始终在整个应用配置和资源注册完成后被调用。</li><li>注意，不同于其他资源注册方法.mount() 返回值是根组件实例而非应用实例。</li></ul><p>index.html：容器</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>main.js：挂载应用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span> 
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span> 
<span class="token comment">//根组件的template就是上面id为root的标签内的内容，</span>
<span class="token comment">//修改其中的内容，就是修改template的内容</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">)</span> 
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>选项式<span class="token constant">API</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
<span class="token keyword">const</span> vm <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">//参数是一个对象，该对象就是Vue的配置对象</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//data选项</span>
        <span class="token keyword">return</span><span class="token punctuation">{</span>
            <span class="token literal-property property">uname</span><span class="token operator">:</span><span class="token string">&quot;Aaron&quot;</span>        
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-dom中的根组件模板" tabindex="-1"><a class="header-anchor" href="#_4-dom中的根组件模板" aria-hidden="true">#</a> 4. DOM中的根组件模板</h4><p>当在未采用构建流程的情况下使用 Vue 时，可以在挂载容器中直接书写根组件模板。</p><p>当根组件没有设置 template 选项时，Vue 将自动使用容器的 innerHTML 作为模板。</p><h4 id="_5-应用配置" tabindex="-1"><a class="header-anchor" href="#_5-应用配置" aria-hidden="true">#</a> 5. 应用配置</h4><p>注意：确保在挂载应用实例之前完成所有应用配置！</p><h5 id="_5-1-config对象" tabindex="-1"><a class="header-anchor" href="#_5-1-config对象" aria-hidden="true">#</a> 5.1 config对象</h5><p>应用实例会暴露一个 .config 对象允许我们配置一些应用级的选项。<br> 例如定义一个应用级的错误处理器，它将捕获所有由子组件上抛而未被处理的错误：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span> 
app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 处理错误 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-注册资源" tabindex="-1"><a class="header-anchor" href="#_5-2-注册资源" aria-hidden="true">#</a> 5.2 注册资源</h5><p>应用实例还提供了一些方法来注册应用范围内可用的资源，例如注册一个组件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;TodoDeleteButton&#39;</span><span class="token punctuation">,</span> TodoDeleteButton<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-多应用实例" tabindex="-1"><a class="header-anchor" href="#_6-多应用实例" aria-hidden="true">#</a> 6. 多应用实例</h4><p>应用实例并不只限于一个。createApp API 允许你在同一个页面中创建多个共存的 Vue 应用，而且每个应用都拥有自己的用于配置和全局资源的作用域。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> app1 <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app1<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#container-1&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app2 <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app2<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#container-2&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>应用场景</strong><br> SSR。<br> 要使用Vue 去控制一个大型页面中特殊的一小部分，应避免将一个单独的 Vue 应用实例挂载到整个页面上，而是应该创建多个小的应用实例，将它们分别挂载到所需的元素上去。</p><h4 id="_7-根组件结构速览" tabindex="-1"><a class="header-anchor" href="#_7-根组件结构速览" aria-hidden="true">#</a> 7. 根组件结构速览</h4><p>Vue是组件化开发的，根组件的结构与其他组件是一样的，这里以根组件作为研究对象。<br> 选项式API结构更清晰，以它为例快速熟悉一下组件的结构。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//app:vue应用实例，就是MVVM的vm</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> 
    <span class="token comment">//参数是一个对象：内部使用对象语法，该对象本质就代表一个组件，此处是根组件</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//用来保存页面数据的，mvvm中的m,这些数据会渲染到页面，</span>
        <span class="token comment">//data是用来响应式数据渲染的，故使用vue，不用操作DOM</span>
    
      <span class="token keyword">return</span><span class="token punctuation">{</span> <span class="token comment">// data() 返回的属性将会成为响应式的状态</span>
        <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">&quot;this is value&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token comment">//计算属性    </span>
    <span class="token punctuation">}</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token comment">//定义方法：事件对象集合    </span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token comment">//侦听器    </span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token comment">//加载子组件    </span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token comment">//生命周期钩子之一</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span> 挂载
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39),o=[t];function c(l,i){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","3-1.创建应用.html.vue"]]);export{u as default};
