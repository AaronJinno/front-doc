import{_ as a,o as n,c as s,e as t}from"./app-277eb25d.js";const e={},p=t(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>实际开发中，采用的是第三方框架，如Vue，这些框架都有自己的路由系统。</p></div><h2 id="i-history-api" tabindex="-1"><a class="header-anchor" href="#i-history-api" aria-hidden="true">#</a> Ⅰ. History API</h2><p>该 API 通过脚本语言来管理浏览器的历史记录。</p><p>在 H5 中，新增了通过脚本语言在浏览器历史记录中添加项目的功能，以及在不刷新页面的前提下显式地改变浏览器地址栏中的 URL 地址的功能，同时添加了一个当用户单击浏览器的后退按钮时触发的事件。通过这些新增的功能与事件，可以实现在不刷新页面的前提下动态地改变浏览器地址栏中的 URL 地址，动态修改页面上所显示资源的功能。</p><h4 id="_1-单页面结构" tabindex="-1"><a class="header-anchor" href="#_1-单页面结构" aria-hidden="true">#</a> 1. 单页面结构</h4><p>为了提高Web页面的响应速度，越来越多的开发者开始采用单页面结构（single-page application）的解决方案。</p><p>所谓的单页面结构就是指多个页面间切换时，不刷新当前整个页面，更新页面展示数据，并且相应地改变地址栏中的url，以使用户可以分享这个url。</p><p>该API以一种新的、革命性的方式来切换浏览器中所需显示网页的 URL 地址。</p><h4 id="_2-h5之前的网页url切换" tabindex="-1"><a class="header-anchor" href="#_2-h5之前的网页url切换" aria-hidden="true">#</a> 2. H5之前的网页URL切换</h4><p>即使采用的是脚本语言的方式，只要地址栏中的 URL 地址切换，都会触发页面刷新的过程，这个过程将耗费一些时间与资源。在很多时候，尤其是在两个大部分内容相同的页面之间进行切换时，这个过程往往被视为一种浪费。</p><h4 id="_3-h5-不刷新切换url" tabindex="-1"><a class="header-anchor" href="#_3-h5-不刷新切换url" aria-hidden="true">#</a> 3. H5：不刷新切换URL</h4><p>H5 的 History API 允许在不刷新页面的前提下，通过脚本语言的方式来进行页面上某块局部内容的更新。</p><h4 id="_4-应用举例" tabindex="-1"><a class="header-anchor" href="#_4-应用举例" aria-hidden="true">#</a> 4. 应用举例</h4><p>从页面A切换到页面B（两页面只有局部显示不同），通过historyAPI做以下处理实现不刷新切换</p><ul><li>通过 AJAX 请求向服务器端请求页面 B 中与页面 A 中不同的局部区域及该区域中的信息。</li><li>在页面 A 中通过脚本语言装载该区域及其中的信息。</li><li>通过 History API 在不刷新页面的前提下在浏览器的地址栏中从页面 A 的 URL 地址切换到页面B的URL地址。</li><li>效果：浏览器的地址栏中从页面 A 的 URL 地址切换到页面 B的 URL 地址，并且显示的页面也完全为页面 B 的页面，从而实现了在不刷新页面的前提下将浏览器中的页面切换到另一个页面</li></ul><h2 id="ii-操作历史记录" tabindex="-1"><a class="header-anchor" href="#ii-操作历史记录" aria-hidden="true">#</a> Ⅱ. 操作历史记录</h2><h4 id="_1-基本的js-history操作" tabindex="-1"><a class="header-anchor" href="#_1-基本的js-history操作" aria-hidden="true">#</a> 1. 基本的JS.history操作</h4><p>这里的历史记录是指点击链接或输入地址产生的历史记录，而不是通过go、forward和back产生历史记录。也就是说，一个网页的上一个页面就是通过点击或输入地址栏创造他的页面，下一个页面就是他创造的页面。</p><h5 id="_1-1-后退" tabindex="-1"><a class="header-anchor" href="#_1-1-后退" aria-hidden="true">#</a> 1.1 后退</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等价于直接在浏览器中点击“返回”按钮</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_1-2-前进" tabindex="-1"><a class="header-anchor" href="#_1-2-前进" aria-hidden="true">#</a> 1.2 前进</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>windows<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等价于直接点击“前进”按钮</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_1-3-跳跃" tabindex="-1"><a class="header-anchor" href="#_1-3-跳跃" aria-hidden="true">#</a> 1.3 跳跃</h5><p>也可以给go()方法传递一个字符串参数，此时浏览器会跳转到历史记录中包含该字符串的第一个位置——可能后退，也可能前进，具体要看哪个位置最近。如果历史记录中不包含该字符串，那么这个方法什么也不做。history.go(0)相当于刷新当前页面。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>hisory<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向前（n是负数）或向后跳转n个页面</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：如果上述方法超过了历史记录的条数，也不会报错，页面将什么也不发生。</p><h4 id="_2-属性" tabindex="-1"><a class="header-anchor" href="#_2-属性" aria-hidden="true">#</a> 2. 属性</h4><h5 id="_2-1-length属性" tabindex="-1"><a class="header-anchor" href="#_2-1-length属性" aria-hidden="true">#</a> 2.1 length属性</h5><p>返回一个整数，该整数表示会话历史中元素的数目，包括当前加载的页。<br> 有的从1开始计数，有的从0开始计数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> numberOfEntries <span class="token operator">=</span> window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//获得历史记录栈中一共有多少页</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>history<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//这应该是用户打开窗口后的第一个页面//测试用户是否第一个打开你的页面</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-state属性" tabindex="-1"><a class="header-anchor" href="#_2-2-state属性" aria-hidden="true">#</a> 2.2 state属性</h5><p>返回一个表示历史堆栈顶部的状态的值。<br> 也就是返回pushState()或replaceState()中的第一个参数state对象的内容（变量和值-字面量格式）。state对象是用来触发popstate事件时，传递的参数，可以为空。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;state&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;moyu&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;moyu.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//返回的是最近的触发popstate事件的方法的state对象。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//打印的内容为-&gt; name:state</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-pushstate-方法" tabindex="-1"><a class="header-anchor" href="#_3-pushstate-方法" aria-hidden="true">#</a> 3. pushState()方法</h4><p>向history对象添加当前页面的记录，并且改变浏览器地址栏的URL(页面不刷新)。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;jinno&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;jinno&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;jinno.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>history.pushState方法接受三个参数，依次为：</p><ul><li>tate：一个与指定网址相关的状态对象，popstate事件触发时，该对象会传入回调函数。如果不需要这个对象，此处可以填null。可以用history.state属性获取该值。</li><li>title：新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填null。</li><li>url：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址。不指定，则显示当前的网址，网址可以是相对路径</li></ul><h5 id="_3-1-hash与跨域" tabindex="-1"><a class="header-anchor" href="#_3-1-hash与跨域" aria-hidden="true">#</a> 3.1 hash与跨域</h5><p>如果pushState的url参数，设置了一个新的锚点值（即hash），并不会触发hashchange事件。如果设置了一个跨域网址，则会报错。禁止跨域的目的是防止脚本获取用户的隐私。</p><h5 id="_3-2-效果" tabindex="-1"><a class="header-anchor" href="#_3-2-效果" aria-hidden="true">#</a> 3.2 效果</h5><p>地址栏会变成新网址，不管这个网址是否真的存在，只是添加了这个历史记录（历史记录里会有之前的URL和新网址的URL），页面不会刷新，点击后退，地址栏会变成之前的url。<br> 注意：只是URL改变，数据并没有发生任何变化。</p><ul><li>History length +1</li><li>url 改变</li><li>该索引History对应有一个State对象</li><li>这个时候若是点击浏览器的后退，便会触发popstate事件，将刚刚的存入数据对象读出</li></ul><h5 id="_3-3-注意" tabindex="-1"><a class="header-anchor" href="#_3-3-注意" aria-hidden="true">#</a> 3.3 注意</h5><p>进行pushState()改变后的页面，进行前进后台，也只是改变URL什么也不发生，所以需要利用popstate事件进行ajax的数据处理。</p><h4 id="_4-replacestate-方法" tabindex="-1"><a class="header-anchor" href="#_4-replacestate-方法" aria-hidden="true">#</a> 4. replaceState()方法</h4><p>类似于pushState()，只是将当前页面状态替换为新的状态，调用这个方法不会在历史状态栈中创建新状态，只会重写当前状态。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;html5&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;user account&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;user.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数与pushState方法一模一样，区别是它修改浏览历史中当前纪录。</p><h4 id="_5-popstate事件" tabindex="-1"><a class="header-anchor" href="#_5-popstate事件" aria-hidden="true">#</a> 5. popstate事件</h4><p>每当激活的历史记录发生变化时触发。</p><h5 id="_5-1-参数" tabindex="-1"><a class="header-anchor" href="#_5-1-参数" aria-hidden="true">#</a> 5.1 参数</h5><p>在事件处理函数中，读取触发触发事件的事件对象的state属性值。该属性为pushState()的第一个参数值。</p><h5 id="_5-2-注意" tabindex="-1"><a class="header-anchor" href="#_5-2-注意" aria-hidden="true">#</a> 5.2 注意</h5><p>仅仅调用history.pushState()或history.replaceState()方法时，并不会触发popstate事件。<br> 只有用户点击浏览器后退按钮和前进按钮，或者使用JavaScript调用history.back()、history.forward()和history.go()方法时才会触发。popstate事件只针对同一个文档，如果浏览器历史的切换，导致加载不同的文档，该事件也不会被触发。</p><h5 id="_5-3-示例" tabindex="-1"><a class="header-anchor" href="#_5-3-示例" aria-hidden="true">#</a> 5.3 示例</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onpopstate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//输出pushState()或replaceState()的state信息</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token comment">//或者这样绑定</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;location: &#39;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>location<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;state: &#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>   
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-history操作要点" tabindex="-1"><a class="header-anchor" href="#_6-history操作要点" aria-hidden="true">#</a> 6. history操作要点</h4><p>history API与Ajax结合使用才有价值，应用中主要掌握以下三个要点：</p><ul><li>Ajax更新数据：使用Ajax实现网页内容的更新</li><li>history更新浏览记录：使用 History API 实现浏览器历史记录的更新</li><li>history跟踪URL的变化并触发Ajax更新：用history实时跟踪浏览器导航响应，实现当浏览器历史记录发生变化时，页面内容也随之更新。</li></ul>`,60),i=[p];function o(c,l){return n(),s("div",null,i)}const u=a(e,[["render",o],["__file","x-1. History.html.vue"]]);export{u as default};
