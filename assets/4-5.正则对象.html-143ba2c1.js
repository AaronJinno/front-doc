import{_ as a,o as s,c as n,e}from"./app-68218236.js";const p={},t=e(`<h2 id="i-正则表达式" tabindex="-1"><a class="header-anchor" href="#i-正则表达式" aria-hidden="true">#</a> Ⅰ. 正则表达式</h2><p>正则表达式有自己独立的语法，所有语言的正则表达式的语法都是相通的。</p><h4 id="_1-使用构造函数定义正则表达式对象" tabindex="-1"><a class="header-anchor" href="#_1-使用构造函数定义正则表达式对象" aria-hidden="true">#</a> 1. 使用构造函数定义正则表达式对象</h4><p><code>new RegExp(正则表达式，模式修正符)</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;Aaron Jinno23234&#39;</span><span class="token punctuation">;</span>

<span class="token comment">//&#39;g&#39; JS独有的，全局匹配(相当于preg_math_all)</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> new_str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将匹配到的值赋给new_str;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用字面量来创建正则表达式" tabindex="-1"><a class="header-anchor" href="#_2-使用字面量来创建正则表达式" aria-hidden="true">#</a> 2. 使用字面量来创建正则表达式</h4><p>使用字面量的方式更加简单，使用构造函数创建更加灵活。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">var</span> 变量 <span class="token operator">=</span>  <span class="token operator">/</span>正则表达式<span class="token operator">/</span>匹配模式
 <span class="token keyword">var</span>  reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span> <span class="token comment">//跟使用new RegExp(&#39;/a/&#39;,&#39;i&#39;)一样，不用加引号</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-unicode的正则" tabindex="-1"><a class="header-anchor" href="#_3-unicode的正则" aria-hidden="true">#</a> 3. Unicode的正则</h4><p>JS内部，字符是以UTF-16格式储存的，所有字符都有自己的Unicode编码。</p><p>每个字符固定为2个字节，但是有些字符需要4个字节储存（Unicode码点大于0xffff比如汉字）,对于这类Unicode编码，JS会认为他是两个字符。</p><p>当需要匹配单个中文字符时，由于部分中文字符占用了4个字节，会误认为了两个字符，导致匹配失败。<br> 且，对字符串进行length求长度时，也未能得到准确的值。在ES6，该bug已经得到了解决，只要添加u模式修正符即可，详见ES6</p><h4 id="_4-表示中文的范围-u4e00-u9fa5" tabindex="-1"><a class="header-anchor" href="#_4-表示中文的范围-u4e00-u9fa5" aria-hidden="true">#</a> 4. 表示中文的范围<code>[\\u4e00-\\u9fa5]</code></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello 你好&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\u4300-\\u9fa5]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-正则方法" tabindex="-1"><a class="header-anchor" href="#ii-正则方法" aria-hidden="true">#</a> Ⅱ. 正则方法</h2><h4 id="_1-test-检测是否符合正则" tabindex="-1"><a class="header-anchor" href="#_1-test-检测是否符合正则" aria-hidden="true">#</a> 1. test：检测是否符合正则</h4><p>是就返回true，否就返回false。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]\\w{5,19}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string">&quot;Aaron JInno234&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-exec-检测符合正则的内容" tabindex="-1"><a class="header-anchor" href="#_2-exec-检测符合正则的内容" aria-hidden="true">#</a> 2. exec: 检测符合正则的内容</h4><p>符合就返回匹配的内容，不符合就返回null。</p><p>对于全局匹配，每执行一次，指针就向后移动一次（即每次只返回一个匹配结果）。</p><p>如果匹配成功，就返回一个数组，0：匹配结果，1：第一个子表达式匹配的结果，2：第二个值表达式匹配的结果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]\\w{5,19}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string">&quot;Aaron JInno234&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-split-正则-根据正则拆分字符串" tabindex="-1"><a class="header-anchor" href="#_3-split-正则-根据正则拆分字符串" aria-hidden="true">#</a> 3. split+正则: 根据正则拆分字符串</h4><p>该方法可以传递一个正则表达式作为参数，这样方法将根据正则表达式来拆分字符串。</p><ul><li>拆分方式：匹配到的内容作为分隔符进行拆分。</li><li>这个方法即使不指定全局匹配，也会全都拆分。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-search-正则-搜索字符串中是否含有指定内容" tabindex="-1"><a class="header-anchor" href="#_4-search-正则-搜索字符串中是否含有指定内容" aria-hidden="true">#</a> 4. search+正则: 搜索字符串中是否含有指定内容</h4><p>如果搜索到指定内容，这会返回第一次出现的索引，如果没有搜索到就返回-1，它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串。</p><p>search只会查找第一个，即使设置全局也没用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">serach</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-match-正则-提取符合正则的内容" tabindex="-1"><a class="header-anchor" href="#_5-match-正则-提取符合正则的内容" aria-hidden="true">#</a> 5. match+正则: 提取符合正则的内容</h4><p>可以根据正则表达式，从一个字符串中将符合条件的内容提取出来。</p><p>默认情况下我们的match只会找到第一个符合要求的内容，找到后就停止检索，我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容。</p><p>match会将匹配到的内容封装到一个数组中返回，即使查询到一个结果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-replace-正则-将字符串中指定内容替换为新的内容" tabindex="-1"><a class="header-anchor" href="#_6-replace-正则-将字符串中指定内容替换为新的内容" aria-hidden="true">#</a> 6. replace+正则: 将字符串中指定内容替换为新的内容</h4><p>默认只会替换第一个,可以设置全局模式，替换所有的。可以替换成空，来删除。</p><ul><li>参数1：被替换的内容，可以接受一个正则表达式作为参数</li><li>参数2：新的内容</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;@_@&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,40),c=[t];function o(l,r){return s(),n("div",null,c)}const u=a(p,[["render",o],["__file","4-5.正则对象.html.vue"]]);export{u as default};
