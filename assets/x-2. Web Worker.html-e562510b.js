import{_ as n,o as s,c as a,e}from"./app-2b89a278.js";const t={},p=e(`<h2 id="i-web-worker概述" tabindex="-1"><a class="header-anchor" href="#i-web-worker概述" aria-hidden="true">#</a> Ⅰ. Web Worker概述</h2><p>JavaScript 语言采用的是单线程模型，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。随着电脑计算能力的增强，尤其是多核 CPU 的出现，单线程带来很大的不便，无法充分发挥计算机的计算能力，而Web Worker就此诞生。</p><h4 id="_1-关于web-worker" tabindex="-1"><a class="header-anchor" href="#_1-关于web-worker" aria-hidden="true">#</a> 1. 关于Web Worker</h4><ul><li>作用：为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程</li><li>好处：一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</li><li>Worker 线程会始终运行：Worker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。这样有利于随时响应主线程的通信。但是，这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。</li></ul><h4 id="_2-web-workers运行原理" tabindex="-1"><a class="header-anchor" href="#_2-web-workers运行原理" aria-hidden="true">#</a> 2. web Workers运行原理</h4><p>Web Workers 是以加载 .js 文件的方式实现的，这些文件会在页面中异步加载。这些请求会被 Web Worker API 完全隐藏。Web Workers 运行于浏览器的一个隔离线程之中。因此，他们所执行的代码必须被包含在一个单独的文件之中。请谨记这一特性。</p><h4 id="_3-使用场景" tabindex="-1"><a class="header-anchor" href="#_3-使用场景" aria-hidden="true">#</a> 3. 使用场景</h4><p>主要作用是使数据交互不影响页面的正常交互以及监听后台的广播消息。</p><ul><li>图像处理：通过使用从canvas或video元素中获取的数据，可以把图像分割成几个不同的区域，并把它们推送给并行的不同的workers。这样就会在多线程中受益，加快运行速度。</li><li>加密：端到端的加密由于对保护个人和敏感数据日益严格的法律规定而变得越来越流行。</li><li>预取数据：为了优化网站或者网络应用及提升数据加载时间，你可以使用 Workers 来提前加载部分数据以备不时之需。</li><li>渐进式网络应用：即使在网络不稳定的情况下，它们必须快速加载。这意味着数据必须本地存储于浏览器中。配合indexDB来使用。</li><li>拼写检查：通过字典文件进行拼写检查，检查的工作就是由web worker完成的。</li><li>大数据检索：在调用ajax处理大数据是，如果处理所需时间的长短很重要，最好在WebWorkers中来做这些，避免冻结UI线程。这样可以保持一个可交互的应用。</li><li>视频游戏：可以考虑将人工智能或者物理引擎的数据发送到Web Workers.</li></ul><h4 id="_4-web-workers能够做什么" tabindex="-1"><a class="header-anchor" href="#_4-web-workers能够做什么" aria-hidden="true">#</a> 4. Web Workers能够做什么</h4><ul><li>加载JS文件，进行大量的复杂计算，而不用挂起主进程，并能与主进程进行通信。</li><li>可以通过importScript(url)方法加载JS脚本文件，可以加载多个JS脚本，且会按顺序执行。</li><li>可以使用setTimeout()、clearTimeout()、setInterval()、和clearInterval()。</li><li>可以使用XMLHttpRequest进行异步请求</li><li>可以访问navigator的部分属性和JS核心对象。</li></ul><h4 id="_5-web-worker使用注意事项" tabindex="-1"><a class="header-anchor" href="#_5-web-worker使用注意事项" aria-hidden="true">#</a> 5. Web Worker使用注意事项</h4><ul><li>同源限制：分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。不能跨域加载JS。</li><li>DOM 限制：Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用document、window、parent这些对象。但是，Worker 线程可以用navigator对象和location对象。</li><li>通信联系：Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。</li><li>脚本限制：Worker 线程不能执行alert()方法和confirm()方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。</li><li>文件限制：Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。</li><li>效率：使用Web Workers加载数据没有JSONP和Ajax高效。</li><li>嵌套：worker可以进行嵌套，但是子worker必须与父worker同源。</li></ul><h4 id="_6-web-worker的局限性" tabindex="-1"><a class="header-anchor" href="#_6-web-worker的局限性" aria-hidden="true">#</a> 6. Web Worker的局限性</h4><ul><li>不能跨域加载JS。</li><li>Woker内代码不能访问DOM。</li><li>兼容性不算太好，IE不支持，新特性有些浏览器也不支持。</li><li>使用Web Workers加载数据没有JSONP和Ajax高效。</li></ul><h4 id="_7-同页面的-web-worker" tabindex="-1"><a class="header-anchor" href="#_7-同页面的-web-worker" aria-hidden="true">#</a> 7. 同页面的 Web Worker</h4><p>通常情况下，Worker 载入的是一个单独的 JavaScript 脚本文件，但是也可以载入与主线程在同一个网页的代码。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>worker<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app/worker<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;some message&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是一段嵌入网页的脚本，注意必须指定<code>&lt;script&gt;</code>标签的type属性是一个浏览器不认识的值，上例是app/worker。然后，读取这一段嵌入页面的脚本，用 Worker 来处理。</p><p>先将嵌入网页的脚本代码，转成一个二进制对象，然后为这个二进制对象生成 URL，再让 Worker 加载这个 URL。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#worker&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// e.data === &#39;some message&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-基本用法" tabindex="-1"><a class="header-anchor" href="#ii-基本用法" aria-hidden="true">#</a> Ⅱ. 基本用法</h2><h4 id="_1-主线程" tabindex="-1"><a class="header-anchor" href="#_1-主线程" aria-hidden="true">#</a> 1. 主线程</h4><h5 id="_1-1-新建worker线程" tabindex="-1"><a class="header-anchor" href="#_1-1-新建worker线程" aria-hidden="true">#</a> 1.1 新建Worker线程</h5><p>主线程采用new命令，调用Worker()构造函数，新建一个 Worker 线程。</p><p>参数是一个脚本文件，该文件就是 Worker 线程所要执行的任务。由于 Worker 不能读取本地文件，所以这个脚本必须来自网络。如果下载没有成功（比如404错误），Worker 就会失败。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;work.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_1-2-向worker发消息" tabindex="-1"><a class="header-anchor" href="#_1-2-向worker发消息" aria-hidden="true">#</a> 1.2 向Worker发消息</h5><p>主线程调用worker.postMessage()方法，向 Worker 发消息。</p><ul><li>参数:就是主线程传给 Worker 的数据。它可以是各种数据类型，包括二进制数据。</li><li>注意 <ul><li>Worker向主线程发送消息用的也是postMessage()方法。</li><li>postMessage()是将数据发送到子线程worker，如果该方法在onmessage事件下，就是发送回上一个线程。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&#39;echo&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">args</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;Work&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-3-监听worker线程-接收返回的消息" tabindex="-1"><a class="header-anchor" href="#_1-3-监听worker线程-接收返回的消息" aria-hidden="true">#</a> 1.3 监听Worker线程，接收返回的消息</h5><p>主线程通过worker.onmessage属性指定监听函数，接收子线程（后台线程）发回来的消息。当worker的postMessage()方法被调用时，这个被绑定的函数就会调用。</p><p>注意：同样，Worker线程也是用此函数来监听主线程发送的数据，当主线程postMessage()方法调用时，触发绑定的函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">postMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//事件对象的data属性可以获取 Worker 发来的数据。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-4-关闭worker线程" tabindex="-1"><a class="header-anchor" href="#_1-4-关闭worker线程" aria-hidden="true">#</a> 1.4 关闭Worker线程</h5><p>Worker 完成任务以后，主线程就可以把它关掉。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>worker<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-worker线程-work-js文件" tabindex="-1"><a class="header-anchor" href="#_2-worker线程-work-js文件" aria-hidden="true">#</a> 2. Worker线程：work.js文件</h4><h5 id="_2-1-监听message事件" tabindex="-1"><a class="header-anchor" href="#_2-1-监听message事件" aria-hidden="true">#</a> 2.1 监听message事件</h5><p>Worker 线程内部需要有一个监听函数，监听message事件。</p><ul><li>self代表子线程自身，即子线程的全局对象。可以省略self直接写。</li><li>self.onmessage同样可以进行监听</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//事件对象的data属性包含主线程发来的数据。</span>
  <span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;You said: &#39;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-worker加载脚本" tabindex="-1"><a class="header-anchor" href="#_3-worker加载脚本" aria-hidden="true">#</a> 3. Worker加载脚本</h4><p>Worker 内部如果要加载其他脚本，有一个专门的方法importScripts()。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">importScripts</span><span class="token punctuation">(</span><span class="token string">&#39;script1.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;script2.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可同时加载多个脚本</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-错误处理" tabindex="-1"><a class="header-anchor" href="#_4-错误处理" aria-hidden="true">#</a> 4. 错误处理</h4><p>主线程可以监听 Worker 是否发生错误。如果发生错误，Worker 会触发主线程的error事件。</p><p>Worker 内部也可以监听error事件。error事件对象的三个属性如下：</p><ul><li>message：可读的错误信息</li><li>filename：发生错误的脚本文件名称</li><li>lineno：发生错误的脚本所在文件的行数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>worker<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string">&#39;ERROR: Line &#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>lineno<span class="token punctuation">,</span> <span class="token string">&#39; in &#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> <span class="token string">&#39;: &#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>message
  <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 或者</span>
worker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、关闭Worker<br> 使用完毕，为了节省系统资源，必须关闭 Worker。</p><p>注意：在主页面被终止的worker不能被重新启动，但可以使用同样的URL创建一个新的worker。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 主线程</span>
worker<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Worker 线程</span>
self<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-数据通信" tabindex="-1"><a class="header-anchor" href="#iii-数据通信" aria-hidden="true">#</a> Ⅲ. 数据通信</h2><p>主线程与 Worker 之间的通信内容，可以是文本，也可以是对象。</p><p>主线程与 Worker 之间也可以交换二进制数据</p><h4 id="_1-通信实例" tabindex="-1"><a class="header-anchor" href="#_1-通信实例" aria-hidden="true">#</a> 1. 通信实例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@主线程
<span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span>js<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//流程1：主线程向Worker发送数据。</span>
worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;hello worker&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//流程5：主线程监听到了worker线程的数据</span>
worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//流程6：主线程打印worker线程发送的数据。</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
@worker<span class="token punctuation">.</span>js
<span class="token comment">//流程2：Worker线程监听到主线程发送的数据。</span>
<span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//流程3：worker线程打印主线程的数据。</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//流程4：worker线程向主线程发送数据。</span>
    <span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;hello too&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-传递大文件" tabindex="-1"><a class="header-anchor" href="#_2-传递大文件" aria-hidden="true">#</a> 2. 传递大文件</h4><p>发送二进制数据，会造成性能问题。比如，主线程向 Worker 发送一个 500MB 文件，默认情况下浏览器会生成一个原文件的拷贝。为了解决这个问题，JavaScript 允许主线程把二进制数据直接转移给子线程。</p><p>一旦转移，主线程就无法再使用这些二进制数据了，这是为了防止出现多个线程同时修改数据的麻烦局面。这种转移数据的方法，叫做Transferable Objects。</p><p>这使得主线程可以快速把数据交给 Worker，对于影像处理、声音处理、3D 运算等就非常方便了，不会产生性能负担。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//转移数据的控制权，就要使用下面的写法。</span>
<span class="token comment">// Transferable Objects 格式</span>
worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>arrayBuffer<span class="token punctuation">,</span> <span class="token punctuation">[</span>arrayBuffer<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 例子</span>
<span class="token keyword">var</span> ab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>ab<span class="token punctuation">,</span> <span class="token punctuation">[</span>ab<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-错误数据" tabindex="-1"><a class="header-anchor" href="#_3-错误数据" aria-hidden="true">#</a> 3. 错误数据</h4><p>Worker中进出的对象不能包含函数和循环引用，因为JSON不支持它。<br> self.onmessageerror：指定 messageerror 事件的监听函数。发送的数据无法序列化成字符串时，会触发这个事件。</p><h2 id="iv-实例" tabindex="-1"><a class="header-anchor" href="#iv-实例" aria-hidden="true">#</a> Ⅳ. 实例</h2><h4 id="_1-后台计算" tabindex="-1"><a class="header-anchor" href="#_1-后台计算" aria-hidden="true">#</a> 1. 后台计算</h4><p>输入一个数字，按下计算，计算1到该数字的累加，并进行弹出。</p><ul><li>当不使用worker时：只有当结果弹出的时候，才能继续对界面进行交互（尤其是数字较大时）。</li><li>当使用worker时：结果未弹出时，也可以对界面进行交互。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>输入数字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>number<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>计算结果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

//主线程
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&quot;aworker.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> numdata <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;num&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>numdata<span class="token punctuation">)</span><span class="token punctuation">;</span>
        worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//aworker.js</span>
<span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> numdata <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>numdata<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        result <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">postMessage</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-数值过滤" tabindex="-1"><a class="header-anchor" href="#_2-数值过滤" aria-hidden="true">#</a> 2. 数值过滤</h4><p>设置一个过滤规则，对数组中的数值进行过滤。并将过滤后的数值显示在表格中。过滤的操作可以交给worker来完成。例如：生成一个200位的随机数值，过滤所有的偶数。<br> 代码略</p><h4 id="_3-并发处理" tabindex="-1"><a class="header-anchor" href="#_3-并发处理" aria-hidden="true">#</a> 3. 并发处理</h4><p>利用worker可以嵌套的特性，可以在Web应用中实现多个任务并发处理，这样能提高Web应用程序的执行效率和反应速度。同时通过线程嵌套把一个较大的后台任务切分成几个子线程，在每个子线程中各种完成相对独立的功能。</p><p>要求：页面不进行任何操作，主要操作交给主线程Worker，主线程跟计算有关的操作再转给子线程Worker，最后再讲数据返回到主页面。例如：主线程生成随机数，子线程负责计算。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>计算随机数乘以5的结果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;aworker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//主线程 aworker.js</span>
<span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> num<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        num <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&quot;bworker.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">postMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
<span class="token comment">//子线程 bworker.js</span>
<span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    num <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    num <span class="token operator">*=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token function">postMessage</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-轮询" tabindex="-1"><a class="header-anchor" href="#_4-轮询" aria-hidden="true">#</a> 4. 轮询</h4><p>有时，浏览器需要轮询服务器状态，以便第一时间得知状态改变。这个工作可以放在 Worker 里面。<br> 上</p>`,81),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","x-2. Web Worker.html.vue"]]);export{r as default};
