import{_ as n,o as a,c as s,e}from"./app-ba294a04.js";const t={},p=e(`<h4 id="_1-变量与字面量" tabindex="-1"><a class="header-anchor" href="#_1-变量与字面量" aria-hidden="true">#</a> 1. 变量与字面量</h4><ul><li>字面量：一些不可改变的值，比如1,2,3，a,b,c</li><li>变量：变量可以保存字面量，而且变量的值是可以任意改变的。</li></ul><h4 id="_2-声明变量" tabindex="-1"><a class="header-anchor" href="#_2-声明变量" aria-hidden="true">#</a> 2. 声明变量</h4><p>定义变量要使用var操作符(var是一个关键字),后跟变量名称。一旦浏览器看到var关键字，就会在内存中创建一块空间，用来存储数据</p><ul><li>可以在声明变量时直接初始化变量</li><li>可用一条语句定义多个变量,各变量用逗号分隔</li><li>未声明的变量，使用时会报错</li><li>只声明，未赋值的变量，使用时会变成undefined。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//声明变量</span>
<span class="token keyword">var</span> message 

<span class="token comment">//声明时直接初始化变量</span>
<span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token number">100</span> 

<span class="token comment">//同时定义多个变量</span>
<span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-变量的使用" tabindex="-1"><a class="header-anchor" href="#_3-变量的使用" aria-hidden="true">#</a> 3. 变量的使用</h4><p>使用变量时，不需要在加上var关键词。直接使用变量名（容器）便可。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> box <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token comment">//将300这个值付给box这个容器。</span>
box <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span> <span class="token comment">//重新赋值，容器已经定义过，不用重新定义</span>
<span class="token function">alert</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出变量，不用加var.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-命名规范" tabindex="-1"><a class="header-anchor" href="#_4-命名规范" aria-hidden="true">#</a> 4. 命名规范</h4><p>JS中所有的可以由我们自主命名的都可以称为是标识符，如：变量、函数名、属性名。<br> JS底层保存标识符时采用的是Unicode编码。</p><p>标识符的命名规则如下：</p><ul><li>由数字，字母，下划线和$组成,不能使用关键字（ES保留字），不能以数字开头</li><li>JS严格区分大小写</li><li>不推荐<code>$</code> 开头和中文变量【<code>$</code>开头容易跟PHP变量搞混】</li><li>标识符一般采用驼峰命名法，首字母小写，每个单词开头大写</li></ul><h4 id="_5-变量作用域" tabindex="-1"><a class="header-anchor" href="#_5-变量作用域" aria-hidden="true">#</a> 5. 变量作用域</h4><ul><li>全局变量: 在JS中，函数外部定义的变量就是全局变量，可以在脚本的任何地方使用</li><li>局部变量: 如果在函数内部定义的变量，就是局部变量，只能在函数内使用</li><li>变量的作用域链: 当我们在函数内部访问一个变量时，会先在函数内部查找，如果没有找到，则去上一级作用域查找，这个查找的过程就称之为作用域链</li></ul><h5 id="_5-1-函数内定义全局变量" tabindex="-1"><a class="header-anchor" href="#_5-1-函数内定义全局变量" aria-hidden="true">#</a> 5.1 函数内定义全局变量</h5><p>如果在函数内部声明变量时，没有使用var关键字，表示该变量就是全局的变量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> v1 <span class="token operator">=</span> <span class="token string">&#39;global&#39;</span><span class="token punctuation">;</span><span class="token comment">//全局变量</span>
<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> v1<span class="token punctuation">;</span><span class="token comment">//如果局部变量定义v1，就不去查找全局的v1;</span>
    <span class="token keyword">var</span> v2 <span class="token operator">=</span> <span class="token string">&#39;fucntion&#39;</span><span class="token comment">//局部变量</span>
    v3 <span class="token operator">=</span> <span class="token string">&#39;this is v2&#39;</span><span class="token punctuation">;</span> <span class="token comment">//函数内部定义的全局变量;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span>v2，v3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问所有变量.</span>
<span class="token punctuation">}</span>
<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问的是全局的v1,无法访问v2,可以调用方法后访问v3.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-注意事项" tabindex="-1"><a class="header-anchor" href="#_5-2-注意事项" aria-hidden="true">#</a> 5.2 注意事项</h5><ul><li>若在函数外使用函数内的全局变量,此函数必须调用</li><li>只要在函数体内定义了局部变量，该变量就会在整个函数体内有效，而不是从定义变量的哪一行有效(函数调用前会先加载)</li></ul>`,20),c=[p];function i(l,o){return a(),s("div",null,c)}const u=n(t,[["render",i],["__file","1-3.变量.html.vue"]]);export{u as default};
