import{_ as a,o as n,c as s,e as t}from"./app-c07941ad.js";const e="/front-doc/img/vue/vue/4-1-1.png",p={},i=t('<h2 id="i-组件化介绍" tabindex="-1"><a class="header-anchor" href="#i-组件化介绍" aria-hidden="true">#</a> Ⅰ. 组件化介绍</h2><h4 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h4><p>组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。</p><p>在实际应用中，组件常常被组织成层层嵌套的树状结构，这个结构和嵌套 HTML 元素的方式类似，Vue 实现了自己的组件模型，可以在每个组件内封装自定义内容与逻辑。</p><figure><img src="'+e+`" alt="4-1-1" tabindex="0" loading="lazy"><figcaption>4-1-1</figcaption></figure><p>总结：组件是可复用的 Vue 实例，且带有一个名字。</p><h4 id="_2-组件化思想" tabindex="-1"><a class="header-anchor" href="#_2-组件化思想" aria-hidden="true">#</a> 2. 组件化思想</h4><p>如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展。</p><p>但如果，我们将一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，那么之后整个页面的管理和维护就变得非常容易了。</p><h4 id="_3-组件化思想的应用" tabindex="-1"><a class="header-anchor" href="#_3-组件化思想的应用" aria-hidden="true">#</a> 3. 组件化思想的应用</h4><p>有了组件化的思想，我们在之后的开发中就要充分的利用它。尽可能的将页面拆分成一个个小的、可复用的组件。这样让我们的代码更加方便组织和管理，并且扩展性也更强。</p><h2 id="ii-单文件组件" tabindex="-1"><a class="header-anchor" href="#ii-单文件组件" aria-hidden="true">#</a> Ⅱ. 单文件组件</h2><div class="hint-container tip"><p class="hint-container-title">SFC</p><p>一般会将 Vue 组件定义在一个单独的 .vue 文件中，这被叫做单文件组件(简称 SFC)</p></div><h4 id="_1-定义一个组件" tabindex="-1"><a class="header-anchor" href="#_1-定义一个组件" aria-hidden="true">#</a> 1. 定义一个组件</h4><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 模板 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scss<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">div</span><span class="token punctuation">{</span>
    // CSS
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>
<span class="token comment">// JS</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-暴露组件" tabindex="-1"><a class="header-anchor" href="#_2-暴露组件" aria-hidden="true">#</a> 2. 暴露组件</h4><p>SFC语法会自动以默认导出的形式暴露给外部。<br> 需要用到就直接使用import导入。</p><h4 id="_3-import引入组件" tabindex="-1"><a class="header-anchor" href="#_3-import引入组件" aria-hidden="true">#</a> 3. import引入组件</h4><p>通过 <code>&lt;script setup&gt;</code> 导入的组件都在模板中直接可用。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">//导入ButtonCounter.vue组件</span>
<span class="token keyword">import</span> ButtonCounter <span class="token keyword">from</span> <span class="token string">&#39;./ButtonCounter.vue&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Here is a child component!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ButtonCounter</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- 使用组件 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-全局组件" tabindex="-1"><a class="header-anchor" href="#_3-1-全局组件" aria-hidden="true">#</a> 3.1 全局组件</h5><p>可以全局地注册一个组件，使得它在当前应用中的任何组件上都可以使用，而不需要额外再导入。</p><h5 id="_3-2-使用组件" tabindex="-1"><a class="header-anchor" href="#_3-2-使用组件" aria-hidden="true">#</a> 3.2 使用组件</h5><ul><li>通过&lt;组件名/&gt;标签的形式使用。</li><li>组件可以被重用任意多次。</li><li>组件的标签名是区分大小写的。</li><li>如果直接在 DOM 中书写模板 (例如原生 <code>&lt;template&gt;</code> 元素的内容)，模板的编译需要遵从浏览器中 HTML 的解析行为。 <ul><li>需要使用 kebab-case 形式并显式地关闭这些组件的标签。</li></ul></li></ul><h4 id="_4-组件状态" tabindex="-1"><a class="header-anchor" href="#_4-组件状态" aria-hidden="true">#</a> 4. 组件状态</h4><p>每当使用一个组件，就创建了一个新的实例。<br> 每一个组件都维护着自己的状态。</p><h4 id="_5-props" tabindex="-1"><a class="header-anchor" href="#_5-props" aria-hidden="true">#</a> 5. Props</h4><p>父组件向子组件传递信息。<br> Props 是一种特别的 attributes，可以在组件上声明注册，props是用来传递数据的。</p><ul><li>这里要用到defineProp宏：是一个仅 <code>&lt;script setup&gt;</code> 中可用的编译宏命令</li><li>声明的 props 会自动暴露给模板。defineProps 会返回一个对象，其中包含了可以传递给组件的所有 props</li></ul><h4 id="_6-监听事件" tabindex="-1"><a class="header-anchor" href="#_6-监听事件" aria-hidden="true">#</a> 6. 监听事件</h4><p>子组件向父组件传递信息。<br> 子组件监听一个事件，并通过内置的 $emit 方法，将该事件向上抛给父组件。<br> 父组件会接收该事件，并获取子组件要传递的信息。</p><h4 id="_7-slot插槽" tabindex="-1"><a class="header-anchor" href="#_7-slot插槽" aria-hidden="true">#</a> 7. slot插槽</h4><p>使用 <code>&lt;slot&gt;</code> 作为一个占位符，父组件传递进来的内容就会渲染在这里。</p><h4 id="_8-动态组件" tabindex="-1"><a class="header-anchor" href="#_8-动态组件" aria-hidden="true">#</a> 8. 动态组件</h4><p>有些场景会需要在两个组件间来回切换，比如 Tab 界面，这就要用到动态组件。</p>`,35),l=[i];function c(o,r){return n(),s("div",null,l)}const d=a(p,[["render",c],["__file","4-1.组件介绍.html.vue"]]);export{d as default};
