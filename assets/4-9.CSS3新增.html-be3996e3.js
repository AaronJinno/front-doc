import{_ as a,o as n,c as s,e}from"./app-c07941ad.js";const i={},l=e(`<h2 id="i-定义显示方式" tabindex="-1"><a class="header-anchor" href="#i-定义显示方式" aria-hidden="true">#</a> Ⅰ. 定义显示方式</h2><h4 id="_1-说明" tabindex="-1"><a class="header-anchor" href="#_1-说明" aria-hidden="true">#</a> 1. 说明</h4><p>在CSS3后盒模型有两种显示方式。</p><ul><li>方式一：传统方式，规定好元素长宽后，该长宽仅作为content的长宽值，再增加padding，border，margin，都会使元素整体的长宽额外变大，元素的“占地面积”也会变大。</li><li>方式二：新方式，规定好元素的长宽后，该长宽不是content的长宽，而是整个元素的长宽，再增加padding、border，margin，都算在元素之前规定的长宽内，元素的“占地面积”不会变大。</li></ul><h4 id="_2-box-sizing" tabindex="-1"><a class="header-anchor" href="#_2-box-sizing" aria-hidden="true">#</a> 2. box-sizing</h4><p>该属性可以事先定义盒模型的尺寸解决方式。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">box-sizing</span><span class="token punctuation">:</span>content-box|border-box|inherit<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>content-box：传统方式，即元素整体width/height = content+padding+border+margin</li><li>border-box：固定方式，即元素整体width、height不会随着padding、margin、border改变。</li></ul><h2 id="ii-可控大小" tabindex="-1"><a class="header-anchor" href="#ii-可控大小" aria-hidden="true">#</a> Ⅱ. 可控大小</h2><p>可控大小指的是用户可以改变元素的大小，类似于原始状态下的textarea一样，用户可以拖动文本域的右下角来改变文本域的大小。</p><h4 id="_1-resize" tabindex="-1"><a class="header-anchor" href="#_1-resize" aria-hidden="true">#</a> 1. resize</h4><p>该属性用来使元素变得可以由用户自由调整大小。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">resize</span><span class="token punctuation">:</span> none|both|horizontal|vertical<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>none：用户无法调整元素的尺寸</li><li>both：用户可调整元素的高度和宽度</li><li>horizontal：用户可调整元素的宽度</li><li>vertical：用户可调整元素的高度</li></ul><h4 id="_2-设置调控的范围" tabindex="-1"><a class="header-anchor" href="#_2-设置调控的范围" aria-hidden="true">#</a> 2. 设置调控的范围</h4><p>默认情况下可以无限的拖动元素的宽高，可以设置元素的最大拖动范围。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">max-width</span><span class="token punctuation">:</span>800px<span class="token punctuation">;</span>
<span class="token property">max-height</span><span class="token punctuation">:</span>600px<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>max-width 定义元素的最大宽度</li><li>max-height 定义元素的最大高度</li></ul><h4 id="_3-设置overflow" tabindex="-1"><a class="header-anchor" href="#_3-设置overflow" aria-hidden="true">#</a> 3. 设置overflow</h4><p>必须同时定义<code>overflow：auto</code>，否则resize属性声明无效，无法进行拖动缩放。</p><h4 id="_4-示例" tabindex="-1"><a class="header-anchor" href="#_4-示例" aria-hidden="true">#</a> 4. 示例</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#resize</span> <span class="token punctuation">{</span>
    <span class="token comment">/*以背景方式显示图像，这样可以更轻松的控制缩放操作*/</span> 
    <span class="token property">background</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>iamges/1.jpg<span class="token punctuation">)</span></span> no-repeat center<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span>120px<span class="token punctuation">;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span>800px<span class="token punctuation">;</span>
    <span class="token property">max-height</span><span class="token punctuation">:</span>600px<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span>6px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>
    <span class="token property">resize</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
&lt;div id=<span class="token string">&quot;resize&quot;</span>&gt;&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-内容溢出" tabindex="-1"><a class="header-anchor" href="#iii-内容溢出" aria-hidden="true">#</a> Ⅲ. 内容溢出</h2><h4 id="_1-overflow" tabindex="-1"><a class="header-anchor" href="#_1-overflow" aria-hidden="true">#</a> 1. overflow</h4><p>overflow 属性规定当内容溢出元素框时发生的事情。可能的值如下：</p><ul><li>visible：默认值。内容不会被修剪，会呈现在元素框之外</li><li>hidden：内容会被修剪，并且其余内容是不可见的</li><li>scroll：内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容 <ul><li>如果值为 scroll，不论是否需要，用户代理都会提供一种滚动机制。因此，有可能即使元素框中可以放下所有内容也会出现滚动条</li></ul></li><li>auto：如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容</li><li>inherit：规定应该从父元素继承 overflow 属性的值</li></ul><h4 id="_2-overflow-x" tabindex="-1"><a class="header-anchor" href="#_2-overflow-x" aria-hidden="true">#</a> 2. overflow-x</h4><p>overflow-x 属性规定是否对内容的左/右边缘进行裁剪 - 如果溢出元素内容区域的话。</p><ul><li>visible：不裁剪内容，可能会显示在内容框之外</li><li>hidden：裁剪内容 - 不提供滚动机制</li><li>scroll：裁剪内容 - 提供滚动机制</li><li>auto：如果溢出框，则应该提供滚动机制</li><li>no-display：如果内容不适合内容框，则删除整个框</li><li>no-content：如果内容不适合内容框，则隐藏整个内容</li></ul><h4 id="_3-overflow-y" tabindex="-1"><a class="header-anchor" href="#_3-overflow-y" aria-hidden="true">#</a> 3. overflow-y</h4><p>overflow-y 属性规定是否对内容的上/下边缘进行裁剪 - 如果溢出元素内容区域的话。</p><p>属性值同上。</p><h4 id="_4-overflow-x与overflow-y的交叉使用" tabindex="-1"><a class="header-anchor" href="#_4-overflow-x与overflow-y的交叉使用" aria-hidden="true">#</a> 4. overflow-x与overflow-y的交叉使用</h4><p>当设置了一个元素为overflow-x，没有设置-y时，-y默认是scroll（？或auto）</p><p>故，当你设置一个方向hidden时，如果元素出了边框，另一个方法自动会产生滚动条。</p>`,35),o=[l];function t(r,p){return n(),s("div",null,o)}const d=a(i,[["render",t],["__file","4-9.CSS3新增.html.vue"]]);export{d as default};
