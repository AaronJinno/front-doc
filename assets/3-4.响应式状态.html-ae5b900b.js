import{_ as n,o as s,c as a,e as t}from"./app-2b89a278.js";const e={},p=t(`<h2 id="i-介绍" tabindex="-1"><a class="header-anchor" href="#i-介绍" aria-hidden="true">#</a> Ⅰ. 介绍</h2><p>响应式状态(state reactivity)是指当程序状态发生改变时，比如说某个变量的值发生了变化，就自动执行某些指定的操作。</p><p>Vue的核心功能之一，即自动跟踪 JS 状态变化并在改变发生时响应式地更新 DOM。</p><h4 id="_1-响应式状态的理解" tabindex="-1"><a class="header-anchor" href="#_1-响应式状态的理解" aria-hidden="true">#</a> 1. 响应式状态的理解</h4><p>从MVVM框架的设计初心来看，除了作为框架的VM之外，两侧分别是M和V，M对应的是数据，V对应的是视图，所谓数据驱动就是视图随着数据的变化而更新。</p><p>进一步扩展，数据可以理解为状态，视图可以扩展为一切回调操作，于是MVVM就可以理解为：当状态变化时自动执行对应的回调操作，这就是响应式的核心。</p><h4 id="_2-概念" tabindex="-1"><a class="header-anchor" href="#_2-概念" aria-hidden="true">#</a> 2. 概念</h4><p>在Vue3当中，</p><ul><li>响应式状态叫做响应式对象(ReactiveObjects)</li><li>响应式操作叫做响应式副作用(ReactiveEffect)， <ul><li>副作用是相对于纯函数的一个概念。如果一个函数和外界产生了交互，如调用接口、DOM操作、修改全局变量等，该函数就被称作副作用。考虑到实际使用中大部分函数都是副作用，我们可以将所有状态绑定的回调都称作副作用，即状态变化时要做的额外操作。</li></ul></li><li>响应式对象对于操作的绑定叫做跟踪(Track)，</li><li>对于操作的调用叫做触发(Trigger)。</li></ul><h4 id="_3-底层原理" tabindex="-1"><a class="header-anchor" href="#_3-底层原理" aria-hidden="true">#</a> 3. 底层原理</h4><p>Vue响应式状态的实现利用对象的getter和setter方法和Proxy代理功能。</p><ul><li>基于第一种方式，Vue3提供了ref，</li><li>基于第二种方式，Vue3提供了reactive。</li></ul><p>这也是为什么响应式非要是对象，因为JavaScript中只能干预对象属性的读写过程。</p><h4 id="_4-响应式状态的行为" tabindex="-1"><a class="header-anchor" href="#_4-响应式状态的行为" aria-hidden="true">#</a> 4. 响应式状态的行为</h4><p>响应式对象其实是 JavaScript Proxy，其行为表现与一般对象相似。不同之处在于 Vue 能够跟踪对响应式对象属性的访问与更改操作。</p><h4 id="_5-dom更新时机" tabindex="-1"><a class="header-anchor" href="#_5-dom更新时机" aria-hidden="true">#</a> 5. DOM更新时机</h4><p>更改响应式状态后，DOM 会自动更新，不过DOM的更新并不是同步的。<br> Vue 将缓冲它们直到更新周期的 “下个时机” 以确保无论你进行了多少次状态更改，每个组件都只需要更新一次。<br> 在更改响应式状态后，若要访问更新后的DOM，需要使用nextTick()API。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>nextTick<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token comment">//访问更新后的DOM    </span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-深层响应性" tabindex="-1"><a class="header-anchor" href="#_6-深层响应性" aria-hidden="true">#</a> 6. 深层响应性</h4><p>在Vue中，状态都是默认深层响应式的，即使在更改深层次的对象或数组，改动也能被检测到。</p><h2 id="ii-声明-选项式" tabindex="-1"><a class="header-anchor" href="#ii-声明-选项式" aria-hidden="true">#</a> Ⅱ. 声明-选项式</h2><h4 id="_1-声明响应式状态" tabindex="-1"><a class="header-anchor" href="#_1-声明响应式状态" aria-hidden="true">#</a> 1. 声明响应式状态</h4><p>选用选项式 API 使用data选项来声明组件的响应式状态。</p><p>此选项的值应为返回一个对象的函数。Vue 将在创建新组件实例的时候调用此函数，并将函数返回的对象用响应式系统进行包装。此对象的所有顶层属性都会被代理到组件实例 (即方法和生命周期钩子中的 this) 上。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>
    <span class="token comment">//data选项：一个函数，vue创建组件时自动调用</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token comment">//该函数返回一个对象</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token comment">//对象的顶层属性：被代理到组件实例上(响应式的原理)</span>
            <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">1</span>        
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-注意事项" tabindex="-1"><a class="header-anchor" href="#_2-注意事项" aria-hidden="true">#</a> 2. 注意事项</h4><ul><li>这些实例上的属性仅在实例首次创建时被添加，因此需要确保它们都出现在 data 函数返回的对象上。 <ul><li>若所需的值还未准备好，在必要时也可以使用 null、undefined 或者其他一些值占位。</li><li>虽然也可以不在 data 上定义，直接向组件实例添加新属性，但这个属性将无法触发响应式更新。</li></ul></li><li>避免在顶层 data 上使用$和_作为属性前缀，以免和内置API冲突</li></ul><h4 id="_3-methods-声明方法" tabindex="-1"><a class="header-anchor" href="#_3-methods-声明方法" aria-hidden="true">#</a> 3. methods：声明方法</h4><p>data选项是声明响应式状态的，要为组件添加方法，需要用到methods选项。</p><p>该选项的值是一个对象，对象包含了所有方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">{</span>
            <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span>        
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span> <span class="token comment">//可以操纵data中的数据        </span>
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-this" tabindex="-1"><a class="header-anchor" href="#_3-1-this" aria-hidden="true">#</a> 3.1 this</h5><p>Vue 自动为 methods 中的方法绑定了永远指向组件实例的 this。<br> 在定义 methods 时不要使用箭头函数，因为箭头函数没有自己的 this 上下文。</p><h5 id="_3-2-使用" tabindex="-1"><a class="header-anchor" href="#_3-2-使用" aria-hidden="true">#</a> 3.2 使用</h5><p>方法也可以在模板上被访问，在模板中它们常常被用作事件监听器：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="iii-声明-组合式" tabindex="-1"><a class="header-anchor" href="#iii-声明-组合式" aria-hidden="true">#</a> Ⅲ. 声明-组合式</h2><h4 id="_1-创建响应式对象或数组" tabindex="-1"><a class="header-anchor" href="#_1-创建响应式对象或数组" aria-hidden="true">#</a> 1. 创建响应式对象或数组</h4><p>可以使用内置的reactive函数创建一个响应式对象或数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> state<span class="token punctuation">.</span>count <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>


<span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-setup" tabindex="-1"><a class="header-anchor" href="#_2-setup" aria-hidden="true">#</a> 2. setup()</h4><p>若要在组件模板中使用响应式状态，需要在setup()函数中定义并返回。</p><p>setup 是一个专门用于组合式 API 的特殊钩子函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;increment&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> state<span class="token punctuation">.</span>count <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span>        
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment">//在同一作用域下定义一个更新响应式状态的函数</span>
        <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            state<span class="token punctuation">.</span>count<span class="token operator">++</span>        
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            state<span class="token punctuation">,</span> <span class="token comment">//暴露state到模板 </span>
            increment <span class="token comment">//同样也暴露出去 ，该方法通常会被用作事件监听器</span>
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-script-setup" tabindex="-1"><a class="header-anchor" href="#_3-script-setup" aria-hidden="true">#</a> 3. <code>&lt;script setup&gt;</code></h4><p>在 setup() 函数中手动暴露大量的状态和方法非常繁琐。</p><p>可以通过使用构建工具来简化该操作。当使用单文件组件（SFC）时，我们可以使用 <code>&lt;script setup&gt;</code> 来大幅度地简化代码。</p><p><code>&lt;script setup&gt;</code> 中的顶层的导入和变量声明可在同一组件的模板中直接使用。<br> 也就是模板中的表达式和 <code>&lt;script setup&gt;</code> 中的代码处在同一个作用域中。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span>reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>count<span class="token operator">++</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ state.count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-响应式代理-与-原始对象" tabindex="-1"><a class="header-anchor" href="#_4-响应式代理-与-原始对象" aria-hidden="true">#</a> 4. 响应式代理 与 原始对象</h4><p>reactive() 返回的是一个原始对象的 Proxy，它和原始对象是不相等的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> raw <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy <span class="token operator">===</span> raw<span class="token punctuation">)</span> <span class="token comment">// false,代理对象和原始对象不是全等的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-1-响应式" tabindex="-1"><a class="header-anchor" href="#_4-1-响应式" aria-hidden="true">#</a> 4.1 响应式</h5><p>响应式对象指的就是代理后的对象，更改原始对象是不会触发响应式更新的。</p><h5 id="_4-2一致性" tabindex="-1"><a class="header-anchor" href="#_4-2一致性" aria-hidden="true">#</a> 4.2一致性</h5><p>为保证访问代理的一致性，对同一个原始对象调用 reactive() 会总是返回同样的代理对象，而对一个已存在的代理对象调用 reactive() 会返回其本身：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在同一个对象上调用 reactive() 会返回相同的代理</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">reactive</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span> <span class="token operator">===</span> proxy<span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token comment">// 在一个代理上调用 reactive() 会返回它自己</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">reactive</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span> <span class="token operator">===</span> proxy<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-reactive-的局限性" tabindex="-1"><a class="header-anchor" href="#_5-reactive-的局限性" aria-hidden="true">#</a> 5. reactive()的局限性</h4><ul><li>仅对对象类型有效（对象、数组和 Map、Set 这样的集合类型），对 string、number、boolean 这样的 原始类型无效。</li><li>Vue 的响应式系统是通过属性访问进行追踪的 <ul><li>因此我们必须始终保持对该响应式对象的相同引用。这意味着我们不可以随意地“替换”一个响应式对象，因为这将导致对初始引用的响应性连接丢失</li><li>当我们将响应式对象的属性赋值或解构至本地变量时，或是将该属性传入一个函数时，同样会失去响应性</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 上面的引用 ({ count: 0 }) 将不再被追踪（响应性连接已丢失！）</span>
state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-ref-定义响应式变量" tabindex="-1"><a class="header-anchor" href="#_6-ref-定义响应式变量" aria-hidden="true">#</a> 6. ref()：定义响应式变量</h4><p>reactive() 的种种限制归根结底是因为 JavaScript 没有可以作用于所有值类型的 “引用” 机制。<br> 为此，Vue 提供了一个 ref() 方法来允许我们创建可以使用任何值类型的响应式 ref：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-1-原理" tabindex="-1"><a class="header-anchor" href="#_6-1-原理" aria-hidden="true">#</a> 6.1 原理</h5><p>ref() 将传入参数的值包装为一个带 .value 属性的 ref 对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token comment">// { value: 0 }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 0</span>
count<span class="token punctuation">.</span>value<span class="token operator">++</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-2-ref-value" tabindex="-1"><a class="header-anchor" href="#_6-2-ref-value" aria-hidden="true">#</a> 6.2 ref.value</h5><p>和响应式对象的属性类似，ref 的 .value 属性也是响应式的。<br> 同时，当值为对象类型时，会用 reactive() 自动转换它的 .value。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> objectRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 响应式的替换</span>
objectRef<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-3-不丢失响应性" tabindex="-1"><a class="header-anchor" href="#_6-3-不丢失响应性" aria-hidden="true">#</a> 6.3 不丢失响应性</h5><p>ref 被传递给函数或是从一般对象上被解构时，不会丢失响应性。</p><p>简言之，ref() 让我们能创造一种对任意值的 “引用”，并能够在不丢失响应性的前提下传递这些引用。</p><p>这个功能很重要，因为它经常用于将逻辑提取到 组合函数 中。</p><h4 id="_7-ref的解包" tabindex="-1"><a class="header-anchor" href="#_7-ref的解包" aria-hidden="true">#</a> 7. ref的解包</h4><h4 id="_7-1-ref在模板中的解包" tabindex="-1"><a class="header-anchor" href="#_7-1-ref在模板中的解包" aria-hidden="true">#</a> 7.1 ref在模板中的解包</h4><p>当 ref 在模板中作为顶层属性被访问时，它们会被自动“解包”，所以不需要使用 .value。</p><p>必须是顶层才可以，类似于某个对象的属性采用ref，是不算顶层的。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 无需 .value,直接使用count即可 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ count }} <span class="token comment">&lt;!-- 无需 .value --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  count<span class="token punctuation">.</span>value<span class="token operator">++</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7-2-非模板顶层的解包" tabindex="-1"><a class="header-anchor" href="#_7-2-非模板顶层的解包" aria-hidden="true">#</a> 7.2 非模板顶层的解包</h5><p>对于文本插值计算的最终值，不算顶层也能被解包，这是文本插值的一个方便功能。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{object.foo}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> //这个表达式可以被正常解包
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ object.foo + 1 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>//这个表达式不会正常被解包
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7-3-ref-在响应式对象中的解包" tabindex="-1"><a class="header-anchor" href="#_7-3-ref-在响应式对象中的解包" aria-hidden="true">#</a> 7.3 ref 在响应式对象中的解包</h5><p>当一个 ref 被嵌套在一个响应式对象中，作为属性被访问或更改时，它会自动解包，表现得和一般的属性一样</p><p>注意：只有当嵌套在一个深层响应式对象内时，才会发生 ref 解包。作为浅层响应式对象的属性被访问不会解包。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  count
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 0</span>
state<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 1</span>

<span class="token comment">//如果将一个新的 ref 赋值给一个关联了已有 ref 的属性，那么它会替换掉旧的 ref：</span>
<span class="token keyword">const</span> otherCount <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
state<span class="token punctuation">.</span>count <span class="token operator">=</span> otherCount
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 2</span>
<span class="token comment">// 原始 ref 现在已经和 state.count 失去联系</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7-4-数组和集合类型的-ref-解包" tabindex="-1"><a class="header-anchor" href="#_7-4-数组和集合类型的-ref-解包" aria-hidden="true">#</a> 7.4 数组和集合类型的 ref 解包</h5><p>当 ref 作为响应式数组或像 Map 这种原生集合类型的元素被访问时，不会进行解包。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;Vue 3 Guide&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// 这里需要 .value</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>books<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 这里需要 .value</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-ref的响应性语法糖【实验性的功能】" tabindex="-1"><a class="header-anchor" href="#_8-ref的响应性语法糖【实验性的功能】" aria-hidden="true">#</a> 8. ref的响应性语法糖【实验性的功能】</h4><p>通过编译时转换，我们可以让编译器帮我们省去使用 .value 的麻烦。</p><p>Vue 提供了一种编译时转换：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">$ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 无需 .value</span>
  count<span class="token operator">++</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,92),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(e,[["render",o],["__file","3-4.响应式状态.html.vue"]]);export{r as default};
