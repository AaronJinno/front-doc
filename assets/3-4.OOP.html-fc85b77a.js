import{_ as n,o as a,c as s,e}from"./app-f9b28035.js";const t={},p=e(`<h2 id="i-js的oop" tabindex="-1"><a class="header-anchor" href="#i-js的oop" aria-hidden="true">#</a> Ⅰ. JS的OOP</h2><p>JavaScript是一个基于对象语言，就是由一个一个的对象组成的语言。</p><h4 id="_1-万物皆对象" tabindex="-1"><a class="header-anchor" href="#_1-万物皆对象" aria-hidden="true">#</a> 1. 万物皆对象</h4><p>我们使用字符串,数值等一切元素,都是对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//为number</span>
a <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
b <span class="token operator">==</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-对象的分类" tabindex="-1"><a class="header-anchor" href="#_2-对象的分类" aria-hidden="true">#</a> 2. 对象的分类</h4><ul><li>内置对象</li><li>宿主对象</li><li>自定义对象</li></ul><h4 id="_3-对象与函数的区别" tabindex="-1"><a class="header-anchor" href="#_3-对象与函数的区别" aria-hidden="true">#</a> 3. 对象与函数的区别</h4><p>变量、函数没有归属，而属性、方法属于对象的，有归属。</p><h4 id="_4-面向对象的特点" tabindex="-1"><a class="header-anchor" href="#_4-面向对象的特点" aria-hidden="true">#</a> 4. 面向对象的特点</h4><p>封装、继承和多态是面向对象的三大特点。</p><h2 id="ii-封装" tabindex="-1"><a class="header-anchor" href="#ii-封装" aria-hidden="true">#</a> Ⅱ. 封装</h2><h4 id="_1-含义" tabindex="-1"><a class="header-anchor" href="#_1-含义" aria-hidden="true">#</a> 1. 含义</h4><p>将重用的代码，提取到公共的地方，或将变量、函数使用对象进行收编。</p><h4 id="_2-为什么要封装" tabindex="-1"><a class="header-anchor" href="#_2-为什么要封装" aria-hidden="true">#</a> 2. 为什么要封装</h4><p>如下：创建验证用户登录的JS，如果不封装需要创建三个对象。</p><p>下面定义使用了三个全局变量，造成了全局作用域污染。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">checkUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//验证用户名</span>
<span class="token keyword">function</span> <span class="token function">cheskPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//验证密码</span>
<span class="token keyword">function</span> <span class="token function">checkEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//验证邮箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-封装示例" tabindex="-1"><a class="header-anchor" href="#_3-封装示例" aria-hidden="true">#</a> 3. 封装示例</h4><p>这样，在内存中，只需要创建；一个对象，其次，由于验证功能只用到verify对象，就减少了全局变量被污染。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> verify <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">//json格式</span>
    <span class="token function-variable function">checkUser</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    checkEmail<span class="token punctuation">.</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function-variable function">checkPass</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-工厂模式" tabindex="-1"><a class="header-anchor" href="#_4-工厂模式" aria-hidden="true">#</a> 4. 工厂模式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">verfy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">checkUser</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">checkPass</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">checkEmail</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">var</span> v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> v2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-继承" tabindex="-1"><a class="header-anchor" href="#iii-继承" aria-hidden="true">#</a> Ⅲ. 继承</h2><h4 id="_1-说明" tabindex="-1"><a class="header-anchor" href="#_1-说明" aria-hidden="true">#</a> 1. 说明</h4><p>JavaScript的继承性体现在prototype原型上面。</p><h4 id="_2-做法" tabindex="-1"><a class="header-anchor" href="#_2-做法" aria-hidden="true">#</a> 2. 做法</h4><p>通常我们在封装一些可重用的插件的时候，都会将重用性强的代码，提取到原型中。通过传递参数来调用。</p><h2 id="iv-多态" tabindex="-1"><a class="header-anchor" href="#iv-多态" aria-hidden="true">#</a> Ⅳ. 多态</h2><p>多态性在弱类型的语言中，体现的不是很明显。</p><p>在JS中，多态性的体现就表现在this的使用上。</p><h2 id="v-其他特性" tabindex="-1"><a class="header-anchor" href="#v-其他特性" aria-hidden="true">#</a> Ⅴ. 其他特性</h2><h4 id="_1-成员修饰" tabindex="-1"><a class="header-anchor" href="#_1-成员修饰" aria-hidden="true">#</a> 1. 成员修饰</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Snake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>公共: 在构造器内部通过this声明的成员，就是公共的，既可以在构造器内部使用，也可以在构造器外部使用。</li><li>私有: 在构造器内部通过var关键字声明的变量，只能在构造器内部使用，体现了private。</li></ul><h4 id="_2-访问其他对象成员" tabindex="-1"><a class="header-anchor" href="#_2-访问其他对象成员" aria-hidden="true">#</a> 2. 访问其他对象成员</h4><p>例如，对象a要访问对象b的skill方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">skill</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),c=[p];function o(i,l){return a(),s("div",null,c)}const r=n(t,[["render",o],["__file","3-4.OOP.html.vue"]]);export{r as default};
