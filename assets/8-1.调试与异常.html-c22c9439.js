import{_ as n,o as s,c as a,e as t}from"./app-c07941ad.js";const e={},p=t(`<h2 id="i-代码计时" tabindex="-1"><a class="header-anchor" href="#i-代码计时" aria-hidden="true">#</a> Ⅰ. 代码计时</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启计时器test</span>

<span class="token punctuation">{</span>
    要测试的代码块
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">Endtime</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结束计时器test;将打印经历的时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-try-catch" tabindex="-1"><a class="header-anchor" href="#ii-try-catch" aria-hidden="true">#</a> Ⅱ. try...catch</h2><h4 id="_1-异常的捕获" tabindex="-1"><a class="header-anchor" href="#_1-异常的捕获" aria-hidden="true">#</a> 1. 异常的捕获</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
    code<span class="token operator">...</span><span class="token comment">//可能出现异常的代码</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//e==自定义的异常信息</span>
    code<span class="token operator">...</span><span class="token comment">//出现异常后执行的代码</span>
<span class="token punctuation">}</span>

<span class="token comment">//示例</span>
<span class="token keyword">try</span><span class="token punctuation">{</span>
  a<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span> 
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;error:&#39;</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//error:ReferenceError: a is not defined</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-throw-直接抛出异常" tabindex="-1"><a class="header-anchor" href="#_2-throw-直接抛出异常" aria-hidden="true">#</a> 2. throw：直接抛出异常</h4><p>e是异常信息，如果未自己抛出异常，e就是系统异常信息，如果自己抛出了异常，e就是抛出的异常信息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
    code<span class="token operator">...</span><span class="token comment">//可能出现异常的代码</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;出错了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Error:出错了</span>
    <span class="token keyword">throw</span> <span class="token string">&#39;出错了&#39;</span><span class="token comment">// 没有Error，直接输出：出错了</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//e==自定义的异常信息</span>
    code<span class="token operator">...</span><span class="token comment">//出现异常后执行的代码</span>
<span class="token punctuation">}</span>

<span class="token comment">//示例</span>
<span class="token keyword">try</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token string">&#39;a不能小于18&#39;</span><span class="token punctuation">;</span> <span class="token comment">//也可以 throw new Error(...)</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token string">&#39;a不能大于100&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token string">&#39;a是非法的值&#39;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token string">&#39;未定义a&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    consoel<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;error:&#39;</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-try-catch-finally" tabindex="-1"><a class="header-anchor" href="#_3-try-catch-finally" aria-hidden="true">#</a> 3. try...catch...finally</h4><p>无论是否出错，都会执行finally语句。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token string">&#39;this is a error&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;error:&#39;</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//该行无论是否抛出异常都会执行。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>省略catch，没出错的话，同上，如果出错，finally处的代码除了会正常执行外，还会自动报错。</p><h4 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h4><ul><li>如果try块中抛出错误，那么try块中错误抛出语句后面的其他语句均不会执行；</li><li>不管try块中是否抛出错误，finally块语句一定会被执行；</li><li>内层try块抛出的错误会被对应内层的catch块捕获，如果不存在对应的内层catch块，那么会被抛到上一层，被上一层的catch块捕获，如果还没有被捕获，那么继续抛到上一层，直到最外层。</li></ul>`,14),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(e,[["render",o],["__file","8-1.调试与异常.html.vue"]]);export{r as default};
