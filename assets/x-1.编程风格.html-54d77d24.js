import{_ as n,o as a,c as s,e}from"./app-277eb25d.js";const t={},p=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>主要参考了 Airbnb 的 JavaScript 风格规范。</p><p>开发时可以使用ESLint强制采用优秀的编程风格。</p></div><h4 id="_1-块级作用域" tabindex="-1"><a class="header-anchor" href="#_1-块级作用域" aria-hidden="true">#</a> 1. 块级作用域</h4><h5 id="_1-1-let取代var" tabindex="-1"><a class="header-anchor" href="#_1-1-let取代var" aria-hidden="true">#</a> 1.1 let取代var</h5><p>let完全可以取代var，因为两者语义相同，而且let没有副作用。</p><p>建议不再使用var命令，而是使用let命令取代。</p><h5 id="_1-2-const-全局常量和线程安全" tabindex="-1"><a class="header-anchor" href="#_1-2-const-全局常量和线程安全" aria-hidden="true">#</a> 1.2 const：全局常量和线程安全</h5><p>let和const之间，优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。</p><p>所有的函数都应该设置为常量，未来做多线程，方便共享。</p><p>原因：</p><ul><li>const可以提醒阅读程序的人，这个变量不应该改变；</li><li>const比较符合函数式编程思想，运算不改变值，只是新建值</li><li>JavaScript 编译器会对const进行优化，效率更高</li><li>防止了无意间修改变量值所导致的错误</li></ul><h4 id="_2-字符串" tabindex="-1"><a class="header-anchor" href="#_2-字符串" aria-hidden="true">#</a> 2. 字符串</h4><p>静态字符串一律使用单引号（优先单引号）或反引号，不使用双引号。</p><p>动态字符串（带变量的字符串）使用反引号。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">foo</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">bar</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-解构赋值" tabindex="-1"><a class="header-anchor" href="#_3-解构赋值" aria-hidden="true">#</a> 3. 解构赋值</h4><h5 id="_3-1-数组赋值" tabindex="-1"><a class="header-anchor" href="#_3-1-数组赋值" aria-hidden="true">#</a> 3.1 数组赋值</h5><p>使用数组成员对变量赋值时，优先使用解构赋值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-函数的参数" tabindex="-1"><a class="header-anchor" href="#_3-2-函数的参数" aria-hidden="true">#</a> 3.2 函数的参数</h5><p>函数的参数如果是对象的成员，优先使用解构赋值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 不要这样</span>
<span class="token keyword">function</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> firstName <span class="token operator">=</span> user<span class="token punctuation">.</span>firstName<span class="token punctuation">;</span>
  <span class="token keyword">const</span> lastName <span class="token operator">=</span> user<span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 还行</span>
<span class="token keyword">function</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//最佳</span>
<span class="token keyword">function</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-返回值" tabindex="-1"><a class="header-anchor" href="#_3-3-返回值" aria-hidden="true">#</a> 3.3 返回值</h5><p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。</p><p>这样便于以后添加返回值，以及更改返回值的顺序。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 不好</span>
<span class="token keyword">function</span> <span class="token function">processInput</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> top<span class="token punctuation">,</span> bottom<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//最佳</span>
<span class="token keyword">function</span> <span class="token function">processInput</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> top<span class="token punctuation">,</span> bottom <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//他们是属性名，他们的值是属性值</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> left<span class="token punctuation">,</span> right <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">processInput</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-对象" tabindex="-1"><a class="header-anchor" href="#_4-对象" aria-hidden="true">#</a> 4. 对象</h4><h5 id="_4-1-定义对象" tabindex="-1"><a class="header-anchor" href="#_4-1-定义对象" aria-hidden="true">#</a> 4.1 定义对象</h5><ul><li>单行定义的对象，最后一个成员不以逗号结尾。</li><li>多行定义的对象，最后一个成员以逗号结尾。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">k1</span><span class="token operator">:</span> v1<span class="token punctuation">,</span> <span class="token literal-property property">k2</span><span class="token operator">:</span> v2 <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">k1</span><span class="token operator">:</span> v1<span class="token punctuation">,</span>
  <span class="token literal-property property">k2</span><span class="token operator">:</span> v2<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-对象静态化" tabindex="-1"><a class="header-anchor" href="#_4-2-对象静态化" aria-hidden="true">#</a> 4.2 对象静态化</h5><p>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用Object.assign方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">//万不得已，可以这样加属性</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-3-动态属性名" tabindex="-1"><a class="header-anchor" href="#_4-3-动态属性名" aria-hidden="true">#</a> 4.3 动态属性名</h5><p>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;San Francisco&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">[</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token string">&#39;enabled&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token comment">// good</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;San Francisco&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token string">&#39;enabled&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，对象obj的最后一个属性名，需要计算得到。这时最好采用属性表达式，在新建obj的时候，将该属性与其他属性定义在一起。这样一来，所有属性就在一个地方定义了。</p><h5 id="_4-4-简洁表达式" tabindex="-1"><a class="header-anchor" href="#_4-4-简洁表达式" aria-hidden="true">#</a> 4.4 简洁表达式</h5><p>对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> atom <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span>a<span class="token punctuation">,</span> <span class="token comment">//bad</span>
    a<span class="token punctuation">,</span><span class="token comment">//直接a就可以额，a会成为属性名，a的值会成为属性值</span>
    <span class="token function-variable function">add</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//bad</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//good</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-数组" tabindex="-1"><a class="header-anchor" href="#_5-数组" aria-hidden="true">#</a> 5. 数组</h4><h5 id="_5-1-拷贝" tabindex="-1"><a class="header-anchor" href="#_5-1-拷贝" aria-hidden="true">#</a> 5.1 拷贝</h5><p>使用扩展运算符（...）拷贝数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> itemsCopy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>items<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_5-2-转换数组" tabindex="-1"><a class="header-anchor" href="#_5-2-转换数组" aria-hidden="true">#</a> 5.2 转换数组</h5><p>使用 Array.from 方法，将类似数组的对象转为数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> nodes <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-函数" tabindex="-1"><a class="header-anchor" href="#_6-函数" aria-hidden="true">#</a> 6. 函数</h4><h5 id="_6-1-iife函数-箭头函数" tabindex="-1"><a class="header-anchor" href="#_6-1-iife函数-箭头函数" aria-hidden="true">#</a> 6.1 IIFE函数：箭头函数</h5><p>立即执行函数可以写成箭头函数的形式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome to the Internet.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-2-匿名函数-箭头函数" tabindex="-1"><a class="header-anchor" href="#_6-2-匿名函数-箭头函数" aria-hidden="true">#</a> 6.2 匿名函数：箭头函数</h5><p>使用匿名函数当作参数的场合，尽量用箭头函数代替。更简洁，而且绑定了 this。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_6-3-bind-箭头函数" tabindex="-1"><a class="header-anchor" href="#_6-3-bind-箭头函数" aria-hidden="true">#</a> 6.3 bind：箭头函数</h5><p>箭头函数取代Function.prototype.bind，不应再用 self/_this/that 绑定 this。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">boundMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">method</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// best</span>
<span class="token keyword">const</span> <span class="token function-variable function">boundMethod</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">method</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-4-简单函数-箭头函数" tabindex="-1"><a class="header-anchor" href="#_6-4-简单函数-箭头函数" aria-hidden="true">#</a> 6.4 简单函数：箭头函数</h5><p>简单的、单行的、不会复用的函数，建议采用箭头函数。</p><h5 id="_6-5-参数" tabindex="-1"><a class="header-anchor" href="#_6-5-参数" aria-hidden="true">#</a> 6.5 参数</h5><p>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">function</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> option <span class="token operator">=</span> <span class="token boolean">false</span></span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// good</span>
<span class="token keyword">function</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">{</span> option <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-6-不要用arguments" tabindex="-1"><a class="header-anchor" href="#_6-6-不要用arguments" aria-hidden="true">#</a> 6.6 不要用arguments</h5><p>不要在函数体内使用 arguments 变量，使用 rest 运算符（...）代替。因为 rest 运算符显式表明你想要获取参数</p><p>而且 arguments 是一个类似数组的对象，而 rest 运算符可以提供一个真正的数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">function</span> <span class="token function">concatenateAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// good</span>
<span class="token keyword">function</span> <span class="token function">concatenateAll</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-7-默认值语法" tabindex="-1"><a class="header-anchor" href="#_6-7-默认值语法" aria-hidden="true">#</a> 6.7 默认值语法</h5><p>使用默认值语法设置函数参数的默认值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">function</span> <span class="token function">handleThings</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  opts <span class="token operator">=</span> opts <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// good</span>
<span class="token keyword">function</span> <span class="token function">handleThings</span><span class="token punctuation">(</span><span class="token parameter">opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-map结构" tabindex="-1"><a class="header-anchor" href="#_7-map结构" aria-hidden="true">#</a> 7. Map结构</h4><p>注意区分 Object 和 Map，只有模拟现实世界的实体对象时，才使用 Object。</p><p>如果只是需要key: value的数据结构，使用 Map 结构。Map 有内建的遍历机制。</p><h4 id="_8-class" tabindex="-1"><a class="header-anchor" href="#_8-class" aria-hidden="true">#</a> 8. Class</h4><p>总是用 Class，取代需要 prototype 的操作。因为 Class 的写法更简洁，更易于理解。</p><p>继承时使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。</p><h4 id="_9-模块" tabindex="-1"><a class="header-anchor" href="#_9-模块" aria-hidden="true">#</a> 9. 模块</h4><h5 id="_9-1-module语法" tabindex="-1"><a class="header-anchor" href="#_9-1-module语法" aria-hidden="true">#</a> 9.1 module语法</h5><p>Module 语法是 JavaScript 模块的标准写法，坚持使用这种写法。使用import取代require。使用export取代module.exports。</p><h5 id="_9-2-通配符" tabindex="-1"><a class="header-anchor" href="#_9-2-通配符" aria-hidden="true">#</a> 9.2 通配符</h5><p>不要在模块输入中使用通配符。这样可以确保你的模块之中，有一个默认输出（export default）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// bad</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> myObject <span class="token keyword">from</span> <span class="token string">&#39;./importModule&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// good</span>
<span class="token keyword">import</span> myObject <span class="token keyword">from</span> <span class="token string">&#39;./importModule&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_9-3-大小写" tabindex="-1"><a class="header-anchor" href="#_9-3-大小写" aria-hidden="true">#</a> 9.3 大小写</h5><ul><li>模块输出函数：如果模块默认输出一个函数，函数名的首字母应该小写。</li><li>模块输出对象：如果模块默认输出一个对象，对象名的首字母应该大写。</li></ul>`,82),o=[p];function c(i,l){return a(),s("div",null,o)}const r=n(t,[["render",c],["__file","x-1.编程风格.html.vue"]]);export{r as default};
