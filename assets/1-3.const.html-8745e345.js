import{_ as n,P as s,Q as a,a5 as e}from"./framework-3728cbf1.js";const t={},o=e(`<h4 id="_1-基本用法" tabindex="-1"><a class="header-anchor" href="#_1-基本用法" aria-hidden="true">#</a> 1. 基本用法</h4><p>const声明一个只读的常量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>
<span class="token constant">PI</span> <span class="token comment">// 3.1415</span>
<span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//改变常量将报错：TypeError: Assignment to constant variable.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-特性" tabindex="-1"><a class="header-anchor" href="#_2-特性" aria-hidden="true">#</a> 2. 特性</h4><ul><li>声明常量时必须赋值</li><li>一般常量使用大写</li><li>常量的值不能修改</li><li>块级作用域</li><li>对于数组和对象的元素修改，不算做对常量的修改，不会报错</li><li>因为常量指向的内存地址没有发生改变，常量不变指的就是指向的内存地址不变。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo<span class="token punctuation">;</span><span class="token comment">//不赋值也会报错：SyntaxError: Missing initializer in const declaration</span>

<span class="token keyword">const</span> <span class="token constant">TEAM</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Jinno&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Aaron&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token constant">TEAM</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;Mark&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组可以被正常修改。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-const的作用域" tabindex="-1"><a class="header-anchor" href="#_3-const的作用域" aria-hidden="true">#</a> 3. const的作用域</h4><p>const的作用域与let命令相同：只在声明所在的块级作用域内有效。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token constant">MAX</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token constant">MAX</span> <span class="token comment">//区块外使用报错： Uncaught ReferenceError: MAX is not defined</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">MAX</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//声明前使用报错： ReferenceError</span>
  <span class="token keyword">const</span> <span class="token constant">MAX</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">===</span><span class="token operator">===</span>
<span class="token comment">//const声明的常量与let一样，不可重复声明</span>
<span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
<span class="token comment">// 以下两行都会报错</span>
<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">&quot;Goodbye!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-const本质" tabindex="-1"><a class="header-anchor" href="#_4-const本质" aria-hidden="true">#</a> 4. const本质</h4><p>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// let b = 30; //PI = 30;</span>
    <span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment">//PI = 20;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>简单类型数据: 对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。</li><li>复合类型数据：对象和数组，变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。</li><li>冻结对象：如果真想冻结对象，使其不可变，应该使用Object.freeze方法。</li></ul><h4 id="_5-es6声明变量的六种方法" tabindex="-1"><a class="header-anchor" href="#_5-es6声明变量的六种方法" aria-hidden="true">#</a> 5. ES6声明变量的六种方法</h4><p>ES5 只有两种声明变量的方法：var命令和function命令。ES6 除了添加let和const命令，后面章节还会提到另外两种声明变量的方法：import命令和class命令。所以，ES6 一共有 6 种声明变量的方法。</p><h4 id="_6-let、const不属于window对象" tabindex="-1"><a class="header-anchor" href="#_6-let、const不属于window对象" aria-hidden="true">#</a> 6. let、const不属于window对象</h4><p>即便let和const定义在全局，他也不属于window对象，如果使用window打印，会显示undefined。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;xyc&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &quot;xyc&quot;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&quot;lxy&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &quot;undefined&quot;</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token string">&quot;lxyc&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &quot;undefined&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以chrome 控制台为例，console输入的都会包裹在一个script里执行，所以debugger的时候会有两层作用域，而let是局部的不是全局的，只存在于script作用域。 因此即便是全局的let、const，他的作用域也仅仅属于所在的script。</p><p>let 在全局中创建的变量存在于Script中,它与window平级, var 在全局中创建的变量存在于window中;</p><p>script和window都属于global对象（在浏览器中可以使用self表示global对象）</p>`,21),p=[o];function c(l,i){return s(),a("div",null,p)}const u=n(t,[["render",c],["__file","1-3.const.html.vue"]]);export{u as default};
