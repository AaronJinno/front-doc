import{_ as a,P as e,Q as n,a5 as i}from"./framework-3728cbf1.js";const s="/front-doc/img/applet/uniapp/2-3-1.jpg",t={},l=i(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>vue3语法结合 uni-app 做了部分调整。<br> 发布到App和小程序时，由于平台限制，无法实现全部vue语法。</p><ul><li>新增：增加了应用生命周期及页面的生命周期。</li><li>受限：在小程序和 App 端部分功能支持不完善</li></ul></div><h2 id="i-基础" tabindex="-1"><a class="header-anchor" href="#i-基础" aria-hidden="true">#</a> Ⅰ. 基础</h2><h4 id="_1-vue3支持情况" tabindex="-1"><a class="header-anchor" href="#_1-vue3支持情况" aria-hidden="true">#</a> 1. vue3支持情况</h4><ul><li>Web平台：支持。</li><li>小程序平台：HBuilderX 3.3.3+ 编译器改为 vite，之前版本的编译器为webpack。</li><li>App 平台：uni-app 3.2.5+支持。HBuilderX 3.3.13 起 nvue编译器升级为vite。</li></ul><p>PS：vue3 响应式基于 Proxy 实现，不支持iOS9和ie11；暂不支持新增的 Teleport,Suspense 组件。</p><h4 id="_2-组件-标签变换" tabindex="-1"><a class="header-anchor" href="#_2-组件-标签变换" aria-hidden="true">#</a> 2. 组件/标签变换</h4><p>以前是html标签，比如 <code>&lt;div&gt;</code> ，现在是小程序组件，比如 <code>&lt;view&gt;</code>。</p><ul><li>标签：标签是老的概念，标签属于浏览器内置的东西。</li><li>组件：可以自由扩展的。类似你可以把一段js封装成函数或模块，你也可以把一个ui控件封装成一个组件。</li></ul><h4 id="_3-指令" tabindex="-1"><a class="header-anchor" href="#_3-指令" aria-hidden="true">#</a> 3. 指令</h4><p>以下两个受限：</p><ul><li>v-once：h5、微信小程序均不支持</li><li>v-html：pc端和H5端支持 v-html ，微信小程序会被转为 rich-text，其他端不支持 v-html 。</li></ul><h4 id="_4-条件渲染" tabindex="-1"><a class="header-anchor" href="#_4-条件渲染" aria-hidden="true">#</a> 4. 条件渲染</h4><p>v-show：nvue 页面不支持 v-show</p><h4 id="_5-列表渲染" tabindex="-1"><a class="header-anchor" href="#_5-列表渲染" aria-hidden="true">#</a> 5. 列表渲染</h4><ul><li>在H5平台 使用 v-for 循环整数时和其他平台存在差异</li><li>在H5平台 item 从 1 开始，其他平台 item 从 0 开始，可使用第二个参数 index 来保持一致。</li><li>在非H5平台 循环对象时不支持第三个参数，如 v-for=&quot;(value, name, index) in object&quot; 中，index 参数是不支持的</li><li>小程序端数据为差量更新方式，由于小程序不支持删除对象属性，使用的设置值为 null 的方式替代，导致遍历时可能出现不符合预期的情况，需要自行过滤一下值为 null 的数据</li></ul><h4 id="_6-事件处理" tabindex="-1"><a class="header-anchor" href="#_6-事件处理" aria-hidden="true">#</a> 6. 事件处理</h4><ul><li>@事件（v-on）提供了事件修饰符，除了.stop各平台都支持，其他修饰符只有H5平台支持。</li><li>为兼容各端，事件需使用 @ 的方式绑定，请勿使用小程序端的 bind 和 catch 进行事件绑定；也不能在 JS 中使用event.preventDefault()和event.stopPropagation()方法；</li><li>若需要禁止蒙版下的页面滚动，可使用 @touchmove.stop.prevent=&quot;moveHandle&quot;，moveHandle 可以用来处理 touchmove 的事件，也可以是一个空函数。</li><li>按键修饰符：uni-app 运行在手机端，没有键盘事件，所以不支持按键修饰符。</li><li>click事件在uniapp中对应的事件为tap</li></ul><h4 id="_7-表单输入绑定" tabindex="-1"><a class="header-anchor" href="#_7-表单输入绑定" aria-hidden="true">#</a> 7. 表单输入绑定</h4><p>建议开发过程中直接使用 uni-app的表单组件</p><ul><li>H5 的 select 标签用 picker 组件进行代替</li><li>表单元素 radio 用 radio-group 组件进行代替</li></ul><h2 id="ii-组件" tabindex="-1"><a class="header-anchor" href="#ii-组件" aria-hidden="true">#</a> Ⅱ. 组件</h2><h4 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1. 介绍</h4><ul><li>根节点为 <code>&lt;template&gt;</code>，这个<code>&lt;template&gt;</code> 下在App、H5可以有多个根 <code>&lt;view&gt;</code> 组件，在小程序只能有一个根<code>&lt;view&gt;</code> 组件。</li><li>一个组件的 data 选项必须是一个函数。</li><li>uni-app只支持 vue单文件组件（.vue 组件），其他类型的组件，非H5端，不支持。</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span> //view就是uniapp版的div
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">&gt;</span></span>{{userName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-1-基础组件" tabindex="-1"><a class="header-anchor" href="#_1-1-基础组件" aria-hidden="true">#</a> 1.1 基础组件</h5><p>基础组件是内置在uni-app框架中的，包括view、text、input、button、video等几十个基础组件。</p><p>列表详见：uni-app基础组件。</p><h5 id="_1-2-自定义组件" tabindex="-1"><a class="header-anchor" href="#_1-2-自定义组件" aria-hidden="true">#</a> 1.2 自定义组件</h5><p>仅有基础组件是不够用的，实际开发中会有很多封装的组件。<br> 插件市场里可以获取到很多封装好的组件。</p><h5 id="_1-3-优势" tabindex="-1"><a class="header-anchor" href="#_1-3-优势" aria-hidden="true">#</a> 1.3 优势</h5><ul><li>可以将组件进行任意次数的复用。</li><li>合理的划分组件，有助于提高应用性能。</li><li>代码更加方便组织和管理，并且扩展性也更强，便于多人协同开发。</li><li>组件化开发能大幅度提高应用开发效率、测试性、复用性等。</li></ul><h4 id="_2-注册组件" tabindex="-1"><a class="header-anchor" href="#_2-注册组件" aria-hidden="true">#</a> 2. 注册组件</h4><p>在uni-app工程根目录下的 components 目录，创建并存放自定义组件。</p><h5 id="_2-1-全局注册" tabindex="-1"><a class="header-anchor" href="#_2-1-全局注册" aria-hidden="true">#</a> 2.1 全局注册</h5><p>uni-app 支持配置全局组件，需在 main.js 里进行全局注册，注册后就可在所有页面里使用该组件。</p><p>nvue 页面暂不支持全局组件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;my-component&#39;</span><span class="token punctuation">,</span> myComponent<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-2-局部注册" tabindex="-1"><a class="header-anchor" href="#_2-2-局部注册" aria-hidden="true">#</a> 2.2 局部注册</h5><p>通过uni-app的easycom将组件引入精简为一步。只要组件安装在项目的 components 目录下，并符合 components/组件名称/组件名称.vue 目录结构。就可以不用引用、注册，直接在页面中使用。</p><ul><li>easycom是自动开启的，不需要手动开启，有需求时可以在 pages.json 的 easycom 节点进行个性化设置</li><li>不管components目录下安装了多少组件，easycom打包后会自动剔除没有使用的组件。</li></ul><h5 id="_2-3-注册示例" tabindex="-1"><a class="header-anchor" href="#_2-3-注册示例" aria-hidden="true">#</a> 2.3 注册示例</h5><p>右键根目录下的components目录，选择创建组件，出现如下弹出框：</p><figure><img src="`+s+`" alt="2-3-1" tabindex="0" loading="lazy"><figcaption>2-3-1</figcaption></figure><p>注意勾选创建同名目录，这样就会完全符合easycom的规范。</p><h5 id="_2-4-组件目录结构" tabindex="-1"><a class="header-anchor" href="#_2-4-组件目录结构" aria-hidden="true">#</a> 2.4 组件目录结构</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>│─components  
│  └─componentA 
│      └─componentA.vue       
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-5-组件市场" tabindex="-1"><a class="header-anchor" href="#_2-5-组件市场" aria-hidden="true">#</a> 2.5 组件市场</h5><p>uni-app 搭建了组件的插件市场，有很多现成的组件，下载符合components/组件名称/组件名称.vue目录结构的组件，可直接使用。</p><h4 id="_3-小程序不支持的组件列表" tabindex="-1"><a class="header-anchor" href="#_3-小程序不支持的组件列表" aria-hidden="true">#</a> 3. 小程序不支持的组件列表</h4><ul><li>作用域插槽</li><li>动态组件</li><li>异步组件</li><li>inline-template</li><li>X-Templates</li><li>keep-alive（App端也未支持）</li><li>transition （可使用 animation 或 CSS 动画替代）</li></ul><h4 id="_4-命名限制" tabindex="-1"><a class="header-anchor" href="#_4-命名限制" aria-hidden="true">#</a> 4. 命名限制</h4><p>以下的关键字为uniapp保留字，不可作用域组件名。</p><p>a、canvas、cell、content、countdown、datepicker、div、element、embed、header、image、img、indicator、input、link、list、loading-indicator、loading、marquee、meta、refresh、richtext、script、scrollable、scroller、select、slider-neighbor、slider、slot、span、spinner、style、svg、switch、tabbar、tabheader、template、text、textarea、timepicker、transition-group、transition、video、view、web。</p><p>除以上列表中的名称外，标准的 HTML 及 SVG 标签名也不能作为组件名。</p><h4 id="_5-注意事项" tabindex="-1"><a class="header-anchor" href="#_5-注意事项" aria-hidden="true">#</a> 5. 注意事项</h4><ul><li>在百度小程序中使用时，不要在 data 内使用 hidden，可能会导致渲染错误。</li><li>methods中不可使用与生命周期同名的方法名。</li></ul><h2 id="iii-api" tabindex="-1"><a class="header-anchor" href="#iii-api" aria-hidden="true">#</a> Ⅲ. API</h2><h4 id="_1-应用配置" tabindex="-1"><a class="header-anchor" href="#_1-应用配置" aria-hidden="true">#</a> 1. 应用配置</h4><p>config是一个包含了 Vue 应用全局配置的对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span>config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在应用挂载前修改其以下 property，其中performance只有H5端支持。</p><h4 id="_2-应用api" tabindex="-1"><a class="header-anchor" href="#_2-应用api" aria-hidden="true">#</a> 2. 应用API</h4><p>在 Vue 3 中，改变全局 Vue 行为的 API 现在被移动到了由新的 createApp 方法所创建的应用实例上。</p><p>此外，现在它们的影响仅限于该特定应用实例：调用 createApp 返回一个应用实例。该实例提供了一个应用上下文。应用实例挂载的整个组件树共享相同的上下文，该上下文提供了之前在 Vue 2.x 中“全局”的配置。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 createApp 方法返回应用实例本身，因此可以在其后链式调用其它方法，这些方法可以在以下部分中找到。</p><ul><li>component：注册或检索全局组件</li><li>config：包含应用配置对象</li><li>directive：注册或检索全局指令（微信小程序不支持）</li><li>mixin：在整个应用范围内应用混入（mixin已经被淘汰）</li><li>provide：设置一个可以被注入到应用范围内所有组件中的值</li><li>use：安装 Vue.js 插件</li></ul><h4 id="_3-全局api" tabindex="-1"><a class="header-anchor" href="#_3-全局api" aria-hidden="true">#</a> 3. 全局APi</h4><p>只有createAPP是全部支持的，其他全局API只有H5支持。</p><h4 id="_4-生命周期钩子" tabindex="-1"><a class="header-anchor" href="#_4-生命周期钩子" aria-hidden="true">#</a> 4. 生命周期钩子</h4><ul><li>activated：被 keep-alive 缓存的组件激活时调用（微信小程序不支持）。</li><li>deactivated：被 keep-alive 缓存的组件停用时调用（微信小程序不支持）。</li></ul><h4 id="_5-指令" tabindex="-1"><a class="header-anchor" href="#_5-指令" aria-hidden="true">#</a> 5. 指令</h4><ul><li>v-text：微信小程序不支持</li><li>v-pre：微信小程序不支持</li><li>v-cloak：微信小程序和APP不支持</li><li>v-once：微信小程序不支持</li></ul><h4 id="_6-内置组件" tabindex="-1"><a class="header-anchor" href="#_6-内置组件" aria-hidden="true">#</a> 6. 内置组件</h4><p>大部分内置组件，APP和微信小程序都是不支持的。</p><ul><li>component：APP支持</li><li>slot：都支持。</li></ul><h4 id="_7-全局变量" tabindex="-1"><a class="header-anchor" href="#_7-全局变量" aria-hidden="true">#</a> 7. 全局变量</h4><p>实现全局变量的方式需要遵循 Vue 单文件模式的开发规范。</p><p>vue3使用pinia</p><h2 id="iv-扩展" tabindex="-1"><a class="header-anchor" href="#iv-扩展" aria-hidden="true">#</a> Ⅳ. 扩展</h2><h4 id="_1-组合式api" tabindex="-1"><a class="header-anchor" href="#_1-组合式api" aria-hidden="true">#</a> 1. 组合式API</h4><p>uniapp支持组合式API。</p><ul><li>Vue：从 vue 包内导入并使用基础的组合式API。</li><li>uniapp：从 @dcloudio/uni-app 包内导入 uni-app 应用生命周期及页面的生命周期</li></ul><h4 id="_2-pinia" tabindex="-1"><a class="header-anchor" href="#_2-pinia" aria-hidden="true">#</a> 2. pinia</h4><p>uni-app 内置了 Pinia ，HBuilder X 不需要手动安装，直接使用即可。<br> pinia的用法和vuex类似，在项目结构中，也是在stores目录。</p>`,85),p=[l];function d(r,c){return e(),n("div",null,p)}const u=a(t,[["render",d],["__file","2-3.Vue支持.html.vue"]]);export{u as default};
