import{_ as a,P as n,Q as s,a5 as e}from"./framework-3728cbf1.js";const i={},t=e(`<h4 id="_1-含义" tabindex="-1"><a class="header-anchor" href="#_1-含义" aria-hidden="true">#</a> 1. 含义</h4><p>async 本质上是 Generator 函数的语法糖，使得异步操作更加方便。async函数就是将Generator函数的星号（*）替换成async，yield替换成await而已。</p><p>async相比于Generator的改进为：</p><ul><li>内置执行器 <ul><li>像普通函数一样直接执行，不用调用next，或借用co模块。</li><li>内部所有的await会依次执行的。</li></ul></li><li>更好的语义</li><li>更广的适用性：co模块约定，yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是 Promise 对象和原始类型的值</li><li>返回值是Promise：async函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而await命令就是内部then命令的语法糖。</li></ul><h4 id="_2-声明async" tabindex="-1"><a class="header-anchor" href="#_2-声明async" aria-hidden="true">#</a> 2. 声明async</h4><ul><li>函数前面加async，就可以将函数变为async函数，函数状态由return决定。</li><li>async函数返回一个 Promise 对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</li><li>async函数内部return语句返回的值，会成为then方法回调函数的参数，可以直接return一个await作为返回值。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-基本使用" tabindex="-1"><a class="header-anchor" href="#_3-基本使用" aria-hidden="true">#</a> 3. 基本使用</h4><ul><li>只要return的不是一个Promise对象，都算成功</li><li>return空，会抛出错误返回一个失败的Promise</li><li>async函数内部抛出错误（无论是否是主动抛出的错误），会导致返回的Promise对象变成reject状态，被catch捕获</li></ul>`,9),c=[t];function l(r,o){return n(),s("div",null,c)}const u=a(i,[["render",l],["__file","4-4.async.html.vue"]]);export{u as default};
