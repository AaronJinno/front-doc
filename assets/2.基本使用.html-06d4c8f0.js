import{_ as n,o as a,c as s,e}from"./app-351da1f5.js";const t={},p=e(`<h2 id="i-vue-router基本使用" tabindex="-1"><a class="header-anchor" href="#i-vue-router基本使用" aria-hidden="true">#</a> Ⅰ. Vue Router基本使用</h2><p>使用步骤如下：</p><ul><li>创建路由组件：也就是每个URL对应的页面（一个页面就是一个组件）</li><li>配置路由映射：组件和路径进行映射配置</li><li>挂载路由：将路由挂载到根组件</li><li>使用路由：通过<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code>使用</li></ul><h4 id="_1-创建路由组件" tabindex="-1"><a class="header-anchor" href="#_1-创建路由组件" aria-hidden="true">#</a> 1. 创建路由组件</h4><p>默认在 <code>./src/views</code>中创建页面，如：About.vue; Home.vue;</p><h4 id="_2-配置路由映射" tabindex="-1"><a class="header-anchor" href="#_2-配置路由映射" aria-hidden="true">#</a> 2. 配置路由映射</h4><p>在 <code>./src/router/index.js</code>中进行配置。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span> <span class="token comment">//引入router</span>
<span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">&#39;../views/Home.vue&#39;</span> <span class="token comment">//引入组件</span>

<span class="token comment">//定义路由映射数组</span>
<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Home&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> Home
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;About&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="token string">&#39;../views/About.vue&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
<span class="token comment">//创建路由对象：参数也是一个对象</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//导出路由对象</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-history" tabindex="-1"><a class="header-anchor" href="#_2-1-history" aria-hidden="true">#</a> 2.1 history</h5><p>路由模式，默认是history模式。<br> createWebHistory函数受一个base字符串可选参数，该参数提供了一个基础路径。</p><h5 id="_2-2-routes" tabindex="-1"><a class="header-anchor" href="#_2-2-routes" aria-hidden="true">#</a> 2.2 routes</h5><p>这是个缩写，相当于 routes: routes，配置的是路由和组件之间的对应关系</p><h5 id="_2-3-路由映射数组" tabindex="-1"><a class="header-anchor" href="#_2-3-路由映射数组" aria-hidden="true">#</a> 2.3 路由映射数组</h5><p>路由数组可以直接在VueRouter对象中设置，但最好提取出来，方便管理。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token comment">//每个具体的路由就是一个对象</span>
        path <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>  
        name <span class="token string">&#39;Home&#39;</span><span class="token punctuation">,</span> <span class="token comment">//路由别名</span>
        <span class="token literal-property property">component</span><span class="token operator">:</span>Home <span class="token comment">//组件对象，需要提前导入</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-挂载路由" tabindex="-1"><a class="header-anchor" href="#_3-挂载路由" aria-hidden="true">#</a> 3. 挂载路由</h4><p>在根实例上挂载路由。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//file：main.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span> <span class="token comment">//导入vue</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span> <span class="token comment">//导入根组件</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;./router&#39;</span> <span class="token comment">//导入所有路由组件</span>

<span class="token comment">//createApp(App).use(router).mount(&#39;#app&#39;)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//创建实例</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span> <span class="token comment">//调用插件，使用路由</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token comment">//挂载实例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-使用路由" tabindex="-1"><a class="header-anchor" href="#_4-使用路由" aria-hidden="true">#</a> 4. 使用路由</h4><p>在一个页面中，通过router-link进行组件导航，通过router-view显示组件内容。<br> 如下：在App.vue（首页）使用路由：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello App!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--使用 router-link 组件进行导航 --&gt;</span>
    <span class="token comment">&lt;!--通过传递 \`to\` 来指定链接 --&gt;</span>
    <span class="token comment">&lt;!--\`&lt;router-link&gt;\` 将呈现一个带有正确 \`href\` 属性的 \`&lt;a&gt;\` 标签--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Go to Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Go to About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 路由出口 --&gt;</span>
  <span class="token comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-1-router-link" tabindex="-1"><a class="header-anchor" href="#_4-1-router-link" aria-hidden="true">#</a> 4.1 router-link</h5><p>该标签是一个vue-router中已经内置的组件, 它会被渲染成一个<code>&lt;a&gt;</code>标签.（设置CSS的时候设置a标签即可）。<br> to属性用于指定跳转的路径。</p><h5 id="_4-2-router-view" tabindex="-1"><a class="header-anchor" href="#_4-2-router-view" aria-hidden="true">#</a> 4.2 router-view</h5><p>该标签会根据当前的路径, 动态渲染出不同的组件。</p><h5 id="_4-3-其他内容" tabindex="-1"><a class="header-anchor" href="#_4-3-其他内容" aria-hidden="true">#</a> 4.3 其他内容</h5><p>比如顶部的标题/导航, 或者底部的一些版权信息等会和<code>&lt;router-view&gt;</code>处于同一个等级。<br> 在路由切换时, 切换的是<code>&lt;router-view&gt;</code>挂载的组件, 其他内容不会发生改变。</p><h2 id="ii-使用细节补充" tabindex="-1"><a class="header-anchor" href="#ii-使用细节补充" aria-hidden="true">#</a> Ⅱ. 使用细节补充</h2><h4 id="_1-router-link" tabindex="-1"><a class="header-anchor" href="#_1-router-link" aria-hidden="true">#</a> 1. router-link</h4><p>router-link是其他组件的链接。当点击router-link时：</p><ul><li>router-link是当前路由的子路由（children） <ul><li>如果当前页面有router-view，就将组件的内容加载到router-view处，没有router-view，就无法加载该子组件内容。</li><li>注意，这里的子路由必须是children中设置的子路由。</li></ul></li><li>如果router-link不是当前路由的子路由， <ul><li>将会直接渲染目标路由对应的组件，当前组件的内容全部被覆盖。</li></ul></li><li>router-link在入口文件中 <ul><li>如果router-link是在入口文件中（App.vue），那么点击链接，会将路由对应的组件直接渲染到router-view中。</li></ul></li></ul><h5 id="_1-1-router-link-exact-active" tabindex="-1"><a class="header-anchor" href="#_1-1-router-link-exact-active" aria-hidden="true">#</a> 1.1 router-link-exact-active</h5><p>当<code>&lt;router-link&gt;</code>对应的路由匹配成功时, 会自动给当前元素设置一个router-link-exact-active的class，可以给该class添加css，修改激活时的样式。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#nav a.router-link-exact-active</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #42b983<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-route-view" tabindex="-1"><a class="header-anchor" href="#_2-route-view" aria-hidden="true">#</a> 2. route-view</h4><p>route-view是用来加载子路由对应的组件内容的。</p><h5 id="_2-1-加载的时机" tabindex="-1"><a class="header-anchor" href="#_2-1-加载的时机" aria-hidden="true">#</a> 2.1 加载的时机</h5><p>当当前路由转换到子路由时进行加载（必须是children中的子路由）<br> 如果不是子路由，会直接跳转到目标组件，进行渲染。</p><h5 id="_2-2-加载的方式" tabindex="-1"><a class="header-anchor" href="#_2-2-加载的方式" aria-hidden="true">#</a> 2.2 加载的方式</h5><p>将子组件的内容引入到<code>&lt;router-view&gt;</code>处。<br> 如果没有<code>&lt;router-view&gt;</code>，就什么也不做。</p><h4 id="_3-app-vue与-路由" tabindex="-1"><a class="header-anchor" href="#_3-app-vue与-路由" aria-hidden="true">#</a> 3. App.vue与 / 路由</h4><h5 id="_3-1-路由" tabindex="-1"><a class="header-anchor" href="#_3-1-路由" aria-hidden="true">#</a> 3.1 / 路由</h5><p>/ 路由是输入网址后默认加载的路由。该路由如果有组件，就将组件加载到入口文件的<code>&lt;router-view&gt;</code>处，没组件就只加载入口文件（默认是App.vue）。</p><p>注意：不要混淆入口文件和 / 路由的组件。</p><h5 id="_3-2-入口文件必须要有-router-view" tabindex="-1"><a class="header-anchor" href="#_3-2-入口文件必须要有-router-view" aria-hidden="true">#</a> 3.2 入口文件必须要有<code>&lt;router-view&gt;</code></h5><p>项目是从入口文件（默认是 App.vue）进行渲染的，该文件必须要有<code>&lt;router-view/&gt;</code>，不然就无法加载任何组件了，只能显示该文件（App.vue）自身的内容。</p><h5 id="_3-3-路由与app-vue" tabindex="-1"><a class="header-anchor" href="#_3-3-路由与app-vue" aria-hidden="true">#</a> 3.3 / 路由与App.vue</h5><ul><li>App.vue默认是整个项目的根节点，所以，渲染项目时，会首先渲染App.vue。 <ul><li>如果想渲染别的组件，就必须在App.vue这个跟节点处添加 <code>&lt;router-view&gt;</code>。</li></ul></li><li>同时，App.vue对应的路由也是根路由（/），会自动加载跟路由对应的组件，如果根路由没有设置组件，就什么也不加载，只显示App.vue内的template。</li><li>一般我们会在App.vue中设置几个分类页面的根链接（nav）用于动态渲染其他页面的组件，同时nav依然保存。</li><li>由于App.vue的是根节点，任何组件渲染时，都会先渲染App.vue，因此在App.vue中写的内容，在任何组件（任何路由）中都会显示。我们一般只用来写header、footer和nav的内容，其他内容用<code>&lt;route-view&gt;</code>加载。</li></ul><h5 id="_3-4-为-路由分配一个组件" tabindex="-1"><a class="header-anchor" href="#_3-4-为-路由分配一个组件" aria-hidden="true">#</a> 3.4 为 / 路由分配一个组件</h5><p>也可以给 / 路由分配一个组件，这个组件将加载到 <code>&lt;router-view/&gt;</code>处。</p><p>虽然该组件的路由会变成 / 和直接渲染App.vue，一样，但是该组件不是App.vue，这里写的内容，不会在所有组件中显示。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">/&gt;</span></span> //直接加载默认的组件，跟组件什么也不渲染。
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-路由元信息" tabindex="-1"><a class="header-anchor" href="#_4-路由元信息" aria-hidden="true">#</a> 4. 路由元信息</h4><p>定义路由的时候可以配置meta字段。元信息被储存到了$route对象的matched数组中，遍历她并检查meta字段就可以拿到。</p><h5 id="_4-1-定义meta" tabindex="-1"><a class="header-anchor" href="#_4-1-定义meta" aria-hidden="true">#</a> 4.1 定义meta</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/posts&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> PostsLayout<span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;new&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">component</span><span class="token operator">:</span> PostsNew<span class="token punctuation">,</span>
        <span class="token comment">// 只有经过身份验证的用户才能创建帖子</span>
        <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">requiresAuth</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;:id&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">component</span><span class="token operator">:</span> PostsDetail
        <span class="token comment">// 任何人都可以阅读文章</span>
        <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">requiresAuth</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-访问meta" tabindex="-1"><a class="header-anchor" href="#_4-2-访问meta" aria-hidden="true">#</a> 4.2 访问meta</h5><p>一个路由匹配到的所有路由记录会暴露为 <code>$route</code> 对象(还有在导航守卫中的路由对象)的<code>$route</code>.matched 数组，遍历这个数组来检查路由记录中的 meta 字段。</p><p>Vue Router 还提供了一个 <code>$route.meta</code> 方法，它是一个非递归合并所有 meta 字段的（从父字段到子字段）的方法。</p><p>路由记录：routes 配置中的每个路由对象为 路由记录。路由记录可以是嵌套的，因此，当一个路由匹配成功后，它可能匹配多个路由记录。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 而不是去检查每条路由记录</span>
  <span class="token comment">// to.matched.some(record =&gt; record.meta.requiresAuth)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requiresAuth <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>auth<span class="token punctuation">.</span><span class="token function">isLoggedIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 此路由需要授权，请检查是否已登录</span>
    <span class="token comment">// 如果没有，则重定向到登录页面</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// 保存我们所在的位置，以便以后再来</span>
      <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> to<span class="token punctuation">.</span>fullPath <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,61),o=[p];function c(i,l){return a(),s("div",null,o)}const u=n(t,[["render",c],["__file","2.基本使用.html.vue"]]);export{u as default};
