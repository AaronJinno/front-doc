import{_ as n,o as s,c as a,e}from"./app-c07941ad.js";const t={},p=e(`<h4 id="_1-响应式介绍" tabindex="-1"><a class="header-anchor" href="#_1-响应式介绍" aria-hidden="true">#</a> 1. 响应式介绍</h4><p>本质：响应性是一种可以使我们声明式地处理变化的编程范式。</p><h5 id="_1-1-非响应式介绍" tabindex="-1"><a class="header-anchor" href="#_1-1-非响应式介绍" aria-hidden="true">#</a> 1.1 非响应式介绍</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token constant">A0</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">let</span> <span class="token constant">A1</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">let</span> <span class="token constant">A2</span> <span class="token operator">=</span> <span class="token constant">A0</span> <span class="token operator">+</span> <span class="token constant">A1</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">A2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>

<span class="token constant">A0</span> <span class="token operator">=</span> <span class="token number">2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">A2</span><span class="token punctuation">)</span> <span class="token comment">// 仍然是 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，更改 A0 后，A2 不会自动更新，这就是JS中默认的非响应式。</p><h5 id="_1-2-响应式处理" tabindex="-1"><a class="header-anchor" href="#_1-2-响应式处理" aria-hidden="true">#</a> 1.2 响应式处理</h5><p>将上述例子改成响应式，即A0和A1更改后，A2的值需要重新计算。</p><p>方案：将计算A2的过程包装成一个函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token constant">A2</span>

<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token constant">A2</span> <span class="token operator">=</span> <span class="token constant">A0</span> <span class="token operator">+</span> <span class="token constant">A1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：虽然每次获取A2的值都是重新计算的，但该函数并不会自动执行。</p><h5 id="_1-3-魔法函数" tabindex="-1"><a class="header-anchor" href="#_1-3-魔法函数" aria-hidden="true">#</a> 1.3 魔法函数</h5><p>用来A0 或 A1 (这两个依赖) 变化时调用 update() (产生作用)，只有更改A0或A1时自动更新A2才叫响应式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">whenDepsChange</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>跟踪变量：执行A0+A1这个表达式时，A0和A1都被读取到了，此时进行跟踪</li><li>设置订阅者：当变量在当前运行的副作用中被读取了，就将该副作用设为此变量的一个订阅者</li><li>监测变量的变化：当我们给 A0 赋了一个新的值后，应该通知其所有订阅了的副作用重新执行。</li></ul><h5 id="_1-4-术语" tabindex="-1"><a class="header-anchor" href="#_1-4-术语" aria-hidden="true">#</a> 1.4 术语</h5><ul><li>副作用：这个 update() 函数会产生一个副作用，或者就简称为作用 (effect)</li><li>依赖：A0 和 A1 被视为这个作用的依赖 (dependency)，因为它们的值被用来执行这个作用 <ul><li>也可以说是一个它依赖的订阅者 (subscriber)。</li></ul></li></ul><h4 id="_2-vue中响应性的工作方式" tabindex="-1"><a class="header-anchor" href="#_2-vue中响应性的工作方式" aria-hidden="true">#</a> 2. Vue中响应性的工作方式</h4><p>原生JS无法追踪局部变量，但可以追踪对象属性的读写。</p><h5 id="_2-1-拦截属性" tabindex="-1"><a class="header-anchor" href="#_2-1-拦截属性" aria-hidden="true">#</a> 2.1 拦截属性</h5><p>JS中可以通过：getter/setters 和 Proxies拦截属性。</p><p>Vue2使用的是getter/setters ，Vue3使用的是Proxy</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//用于演示的伪代码</span>
<span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
      <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-解析" tabindex="-1"><a class="header-anchor" href="#_2-2-解析" aria-hidden="true">#</a> 2.2 解析</h5><ul><li>从 reactive() 返回的代理尽管行为上表现得像原始对象，但我们通过使用 === 运算符还是能够比较出它们的不同。</li><li>将一个响应性对象的属性解构为一个局部变量时，响应性就会“断开连接”（无法追踪局部变量）。</li></ul><h5 id="_2-3-track" tabindex="-1"><a class="header-anchor" href="#_2-3-track" aria-hidden="true">#</a> 2.3 track</h5><p>在 track() 内部，会检查当前是否有正在运行的副作用。</p><p>如果有，会查找到一个存储了所有追踪了该属性的订阅者的 Set，然后将当前这个副作用作为新订阅者添加到该 Set 中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 这会在一个副作用就要运行之前被设置</span>
<span class="token comment">// 我们会在后面处理它</span>
<span class="token keyword">let</span> activeEffect

<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> effects <span class="token operator">=</span> <span class="token function">getSubscribersForProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    effects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-4-副作用的储存" tabindex="-1"><a class="header-anchor" href="#_2-4-副作用的储存" aria-hidden="true">#</a> 2.4 副作用的储存</h5><p>副作用订阅将被存储在一个全局的 <code>WeakMap&lt;target, Map&lt;key, Set&lt;effect&gt;&gt;&gt;</code> 数据结构中。</p><p>如果在第一次追踪时没有找到对相应属性订阅的副作用集合，它将会在这里新建，这就是 getSubscribersForProperty() 函数所做的事。</p><h5 id="_2-5-更新" tabindex="-1"><a class="header-anchor" href="#_2-5-更新" aria-hidden="true">#</a> 2.5 更新</h5><p>在 trigger() 之中，会再查找到该属性的所有订阅副作用。但这一次需要执行：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> effects <span class="token operator">=</span> <span class="token function">getSubscribersForProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-6-总结" tabindex="-1"><a class="header-anchor" href="#_2-6-总结" aria-hidden="true">#</a> 2.6 总结</h5><p>回到之前设想的魔法函数whenDepsChange，如下伪代码：</p><p>它将原本的 update 函数包装在了一个副作用函数中。在运行实际的更新之前，这个外部函数会将自己设为当前活跃的副作用。这使得在更新期间的 track() 调用都能定位到这个当前活跃的副作用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">whenDepsChange</span><span class="token punctuation">(</span><span class="token parameter">update</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    activeEffect <span class="token operator">=</span> effect
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    activeEffect <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>
  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，已经创建了一个能自动跟踪其依赖的副作用，它会在任意依赖被改动时重新运行。我们称其为响应式副作用。</p><h4 id="_3-watcheffect" tabindex="-1"><a class="header-anchor" href="#_3-watcheffect" aria-hidden="true">#</a> 3. watchEffect</h4><p>Vue 提供了一个 API 来创建响应式副作用：watchEffect()。</p><h5 id="_3-1-使用示例" tabindex="-1"><a class="header-anchor" href="#_3-1-使用示例" aria-hidden="true">#</a> 3.1 使用示例</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watchEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> <span class="token constant">A0</span> <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">A1</span> <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">A2</span> <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 追踪 A0 和 A1</span>
  <span class="token constant">A2</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token constant">A0</span><span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token constant">A1</span><span class="token punctuation">.</span>value
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 将触发副作用</span>
<span class="token constant">A0</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-computed" tabindex="-1"><a class="header-anchor" href="#_3-2-computed" aria-hidden="true">#</a> 3.2 computed</h5><p>computed 会使用响应式副作用来管理失效与重新计算的过程。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> <span class="token constant">A0</span> <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">A1</span> <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">A2</span> <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">A0</span><span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token constant">A1</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>

<span class="token constant">A0</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-响应式渲染" tabindex="-1"><a class="header-anchor" href="#_3-3-响应式渲染" aria-hidden="true">#</a> 3.3 响应式渲染</h5><p>常见的响应式副作用就是响应式渲染，自动更新DOM。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watchEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">计数：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 更新 DOM</span>
count<span class="token punctuation">.</span>value<span class="token operator">++</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：Vue 组件使用了比 innerHTML 更高效的方式来更新 DOM。</p><h4 id="_4-运行时-vs-编译时响应性" tabindex="-1"><a class="header-anchor" href="#_4-运行时-vs-编译时响应性" aria-hidden="true">#</a> 4. 运行时 vs. 编译时响应性</h4><p>Vue 的响应式系统基本是基于运行时的，追踪和触发都是在浏览器中运行时进行的。</p><p>Vue采用响应式对象、ref，并通过响应性语法糖简化代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token constant">A0</span> <span class="token operator">=</span> <span class="token function">$ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> <span class="token constant">A1</span> <span class="token operator">=</span> <span class="token function">$ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment">// 在变量读取时追踪</span>
<span class="token keyword">const</span> <span class="token constant">A2</span> <span class="token operator">=</span> <span class="token function">$computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">A0</span> <span class="token operator">+</span> <span class="token constant">A1</span><span class="token punctuation">)</span>

<span class="token comment">// 在变量写入时触发</span>
<span class="token constant">A0</span> <span class="token operator">=</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-响应性调试" tabindex="-1"><a class="header-anchor" href="#_5-响应性调试" aria-hidden="true">#</a> 5. 响应性调试</h4><p>响应性系统是自动追踪依赖的，某些情况下，我们需要知道追踪的情况。</p><h5 id="_5-1-组件调试钩子" tabindex="-1"><a class="header-anchor" href="#_5-1-组件调试钩子" aria-hidden="true">#</a> 5.1 组件调试钩子</h5><p>在一个组件渲染时使用 onRenderTracked 生命周期钩子来调试查看哪些依赖正在被使用，或是用 onRenderTriggered 来确定哪个依赖正在触发更新（组件调试钩子仅会在开发模式下工作）。</p><p>这些钩子都会收到一个调试事件，其中包含了触发相关事件的依赖的信息。在回调中放置一个 debugger 语句，可以在开发者工具中交互式地查看依赖：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> onRenderTracked<span class="token punctuation">,</span> onRenderTriggered <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token function">onRenderTracked</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">debugger</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">onRenderTriggered</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">debugger</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-计算属性调试" tabindex="-1"><a class="header-anchor" href="#_5-2-计算属性调试" aria-hidden="true">#</a> 5.2 计算属性调试</h5><p>向 computed() 传入第二个参数，是一个包含了 onTrack 和 onTrigger 两个回调函数的对象：</p><ul><li>onTrack 将在响应属性或引用作为依赖项被跟踪时被调用。</li><li>onTrigger 将在侦听器回调被依赖项的变更触发时被调用。</li></ul><h5 id="_5-3-侦听器调试" tabindex="-1"><a class="header-anchor" href="#_5-3-侦听器调试" aria-hidden="true">#</a> 5.3 侦听器调试</h5><p>和 computed() 类似，侦听器也支持 onTrack 和 onTrigger 选项。</p><h4 id="_6-与外部状态系统集成" tabindex="-1"><a class="header-anchor" href="#_6-与外部状态系统集成" aria-hidden="true">#</a> 6. 与外部状态系统集成</h4><p>Vue 的响应性系统是通过深度转换普通 JavaScript 对象为响应式代理来实现的。这种深度转换在一些情况下是不必要的，在和一些外部状态管理系统集成时，甚至是需要避免的。</p><h5 id="_6-1-不可变数据" tabindex="-1"><a class="header-anchor" href="#_6-1-不可变数据" aria-hidden="true">#</a> 6.1 不可变数据</h5><p>例如：正在实现一个撤销/重做的功能，你可能想要对用户编辑时应用的状态进行快照记录。然而，如果状态树很大的话，Vue 的可变响应性系统没法很好地处理这种情况。</p><p>不可变数据结构通过永不更改状态对象来解决这个问题。</p><h5 id="_6-2-状态机" tabindex="-1"><a class="header-anchor" href="#_6-2-状态机" aria-hidden="true">#</a> 6.2 状态机</h5><p>状态机是一种数据模型，用于描述应用可能处于的所有可能状态，以及从一种状态转换到另一种状态的所有可能方式。</p><h4 id="_7-响应性语法糖" tabindex="-1"><a class="header-anchor" href="#_7-响应性语法糖" aria-hidden="true">#</a> 7. 响应性语法糖</h4><p>实验功能，暂略。</p>`,74),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","7-4.深入响应式.html.vue"]]);export{r as default};
