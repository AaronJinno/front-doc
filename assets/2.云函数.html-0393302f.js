import{_ as e,P as o,Q as t,S as n,a3 as s,a4 as i,a5 as p,C as c}from"./framework-3728cbf1.js";const l={},u=n("h2",{id:"介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),s(" 介绍")],-1),r=n("p",null,"云函数是运行在云端的 JavaScript 代码，是基于 Node.js 的扩展。",-1),d={href:"https://uniapp.dcloud.net.cn/uniCloud/cf-functions.html",target:"_blank",rel:"noopener noreferrer"},m=p(`<h4 id="_1-unicloud对象" tabindex="-1"><a class="header-anchor" href="#_1-unicloud对象" aria-hidden="true">#</a> 1. uniCloud对象</h4><p>在常规的 Node API 基础上，uniCloud的云函数环境内置了uniCloud对象，这个对象内置了网络、数据库等各种API。日常开发，这些API已经基本够用了。</p><h4 id="_2-云函数的分类" tabindex="-1"><a class="header-anchor" href="#_2-云函数的分类" aria-hidden="true">#</a> 2. 云函数的分类</h4><p>云函数有若干子概念，包括 普通云函数、云对象、公共模块、clientDB的action云函数、uniCloud扩展库。</p><ul><li>云函数：通过传统json接口方式和客户端通信，客户端使用uniCloud.callfunction(&quot;&quot;)调用云函数</li><li>云对象：是通过前端导入对象来操作的，客户端使用uniCloud.importObject(&quot;&quot;)导入云对象。</li><li>公共模块：用于不同的云函数/云对象，抽取和共享相同代码。</li><li>action云函数（不推荐使用）：略，推荐使用数据库触发器替代action云函数。</li><li>uniCloud扩展库：为了裁剪和控制云函数体积而设计的，避免增大每个云函数的体积</li></ul><h4 id="_3-新建云函数" tabindex="-1"><a class="header-anchor" href="#_3-新建云函数" aria-hidden="true">#</a> 3. 新建云函数</h4><p>右键根目录下的UniCloud/cloudfunctions目录-&gt;新建云函数/云对象。</p><p>每个云函数是一个目录，其中普通云函数有index.js入口文件，云对象的入口文件则是index.obj.js，目录结构如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>|——— cloudfunctions               云函数目录
|   │───common                    云函数公用模块目录
|   |   └──hello-common           云函数公用模块
|   |      │──index.js            公用模块代码
|   |      └──package.json        公用模块package.json
|   │───function-name             云函数目录
|   │     │──index.js             云函数代码
|   │     └──package.json         包含云函数的配置信息，如url化、定时设置等
|   └───object-name               云对象目录
|         │──index.obj.js         云对象代码
|         └──package.json         包含云对象的配置信息，可用内存等内容 详情
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个最简单的云函数只需要这个入口js文件，在里面编写代码即可。当然也可以在这个js中require该云函数目录下的其他js、json文件。</p><h4 id="_4-package-json" tabindex="-1"><a class="header-anchor" href="#_4-package-json" aria-hidden="true">#</a> 4. package.json</h4><p>云函数的配置文件和npm规范 相同，在云函数目录下可新建一个 package.json 来存放配置。uniCloud云函数扩展了 package.json，增加了一些特有的配置项。</p><h5 id="_4-1-标准package-json示例" tabindex="-1"><a class="header-anchor" href="#_4-1-标准package-json示例" aria-hidden="true">#</a> 4.1 标准package.json示例</h5><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;add-article&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;新增文章&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 云函数的依赖，包括公共模块及自行安装的npm依赖</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;extensions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 云函数使用的扩展库</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;cloudfunction-config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">//云函数的配置</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-cloudfunction-conf" tabindex="-1"><a class="header-anchor" href="#_4-2-cloudfunction-conf" aria-hidden="true">#</a> 4.2 cloudfunction-conf</h5><p>cloudfunction-config字段是云函数配置，支持的配置如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;concurrency&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 单个云函数实例最大并发量，不配置的情况下默认是1</span>
    <span class="token property">&quot;memorySize&quot;</span><span class="token operator">:</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token comment">// 函数的最大可用内存，单位MB，默认值256</span>
    <span class="token property">&quot;timeout&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 函数的超时时间，单位秒，默认值5。最长为60秒，阿里云在定时触发时最长可以是600秒</span>
    <span class="token comment">// triggers 字段是触发器数组，目前仅支持一个触发器，即数组只能填写一个，不可添加多个</span>
    <span class="token property">&quot;triggers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> 
        <span class="token comment">// name: 触发器的名字，name不对阿里云生效</span>
        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;myTrigger&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// type: 触发器类型，，type不对阿里云生效</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// config: 触发器配置，，使用阿里云时会自动忽略最后一位</span>
        <span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0 0 2 1 * * *&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 云函数Url化path部分</span>
    <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;runtime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token comment">// nodejs版本</span>
    <span class="token property">&quot;keepRunningAfterReturn&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 是否在云函数return之后继续执行，仅腾讯云生效</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-3-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-3-注意事项" aria-hidden="true">#</a> 4.3 注意事项</h5><ul><li>插件作者在发布插件时，如果云函数有特殊设置，应该放入package.json中，然后发布到插件市场。</li><li>在web控制台修改云函数配置后，通过HBuilderX的下载云函数菜单会在package.json内添加修改后的云函数配置</li><li>上传云函数时，如果项目下的package.json内包含云函数配置会同时进行云函数的配置更新</li><li>package.json只有云端部署才生效，本地运行不生效。</li><li>cloudfunction-config不可删除云端配置。例：云端已配置triggers（定时触发器），删除cloudfunction-config内的trigger不会删掉云端的定时触发器</li><li>runtime参数（nodejs版本）仅可在创建云函数时生效，不可修改</li></ul><h4 id="_5-tips" tabindex="-1"><a class="header-anchor" href="#_5-tips" aria-hidden="true">#</a> 5. tips</h4><ul><li>云函数内使用commonjs规范，不可使用import、export</li><li>不同项目使用同一个服务空间时，不可使用同名云函数。同名云函数会相互覆盖</li><li>在HBuilderX创建云函数时，如果新云函数与服务器上已存在同名云函数，会用新函数覆盖。所以应先选择从服务空间下载云函数</li></ul>`,21);function k(v,b){const a=c("ExternalLinkIcon");return o(),t("div",null,[u,r,n("p",null,[n("a",d,[s("详见"),i(a)])]),m])}const q=e(l,[["render",k],["__file","2.云函数.html.vue"]]);export{q as default};
