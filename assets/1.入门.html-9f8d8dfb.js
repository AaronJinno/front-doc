import{_ as a,o as n,c as s,e}from"./app-277eb25d.js";const t={},i=e(`<p>vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建SPA。</p><h2 id="i-vue-route介绍" tabindex="-1"><a class="header-anchor" href="#i-vue-route介绍" aria-hidden="true">#</a> Ⅰ. Vue Route介绍</h2><p>vue-router是基于路由和组件的，路由用于设定访问路径, 将路径和组件映射起来，在vue-router的单页面应用中, 页面的路径的改变就是组件的切换。</p><h4 id="_1-vue-router的功能" tabindex="-1"><a class="header-anchor" href="#_1-vue-router的功能" aria-hidden="true">#</a> 1. Vue Router的功能</h4><ul><li>嵌套路由映射</li><li>动态路由选择</li><li>模块化、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>展示由 Vue.js 的过渡系统提供的过渡效果</li><li>细致的导航控制</li><li>自动激活 CSS 类的链接</li><li>HTML5 history 模式或 hash 模式</li><li>可定制的滚动行为</li><li>URL 的正确编码</li></ul><h4 id="_2-安装" tabindex="-1"><a class="header-anchor" href="#_2-安装" aria-hidden="true">#</a> 2. 安装</h4><p>可以在使用vue cli项目时，直接选择添加vue-route。</p><h5 id="_2-1-npm" tabindex="-1"><a class="header-anchor" href="#_2-1-npm" aria-hidden="true">#</a> 2.1 npm</h5><div class="language-dash line-numbers-mode" data-ext="dash"><pre class="language-dash"><code>npm install vue-router@4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-2-vue项目添加route" tabindex="-1"><a class="header-anchor" href="#_2-2-vue项目添加route" aria-hidden="true">#</a> 2.2 Vue项目添加Route</h5><p>在没有Route功能的Vue项目中，添加Route功能。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>vue add router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-3-vue-ui安装" tabindex="-1"><a class="header-anchor" href="#_2-3-vue-ui安装" aria-hidden="true">#</a> 2.3 Vue ui安装</h5><p>在Vue ui中安装</p><h4 id="_3-router的url风格" tabindex="-1"><a class="header-anchor" href="#_3-router的url风格" aria-hidden="true">#</a> 3. Router的URL风格</h4><p>在交互中选择history风格的URL（Vue3中默认就是该风格）。</p><p>该风格的URL中不会有#。</p><h4 id="_4-目录规划" tabindex="-1"><a class="header-anchor" href="#_4-目录规划" aria-hidden="true">#</a> 4. 目录规划</h4><p>在src/下创建router文件夹，用来存放路由文件，默认的路由文件为index.js。</p><p>PS：如果使用Vue-cli时带了vue-router组件，会自动生成该文件夹的。并创建index.js路由文件</p><h4 id="_5-路由文件解析" tabindex="-1"><a class="header-anchor" href="#_5-路由文件解析" aria-hidden="true">#</a> 5. 路由文件解析</h4><p>仅对路由文件做简单了解。</p><h5 id="_5-1-定义路由" tabindex="-1"><a class="header-anchor" href="#_5-1-定义路由" aria-hidden="true">#</a> 5.1 定义路由</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//file:src/router/index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span> 
<span class="token comment">//1.定义路由组件：导入被路由的组件</span>
<span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">&#39;../views/Home.vue&#39;</span> 

<span class="token comment">//2.定义一些路由：每个路由都需要映射到一个组件</span>
<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Home&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> Home
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;About&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="token string">&#39;../views/About.vue&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

<span class="token comment">//创建路由实例，参数是一个配置对象</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  
  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//history模式</span>
  routes <span class="token comment">//routers:routes的缩写，路由实例管理的路由数组</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> router <span class="token comment">//将路由导出</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-使用路由" tabindex="-1"><a class="header-anchor" href="#_5-2-使用路由" aria-hidden="true">#</a> 5.2 使用路由</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//file:src/main.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span> 

<span class="token keyword">import</span> <span class="token string">&#39;./assets/main.css&#39;</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;./router&#39;</span> <span class="token comment">//导入路由文件</span>

<span class="token comment">//使用use挂载路由</span>
<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-路由介绍" tabindex="-1"><a class="header-anchor" href="#ii-路由介绍" aria-hidden="true">#</a> Ⅱ. 路由介绍</h2><h4 id="_1-路由是什么" tabindex="-1"><a class="header-anchor" href="#_1-路由是什么" aria-hidden="true">#</a> 1. 路由是什么</h4><p>路由（routing）就是通过互联的网络把信息从源地址传输到目的地址的活动。</p><p>在web中，路由的功能就是翻译URL，得到要返回的文件。<br> 路由的本质就是一个映射表。</p><h4 id="_2-路由器原理" tabindex="-1"><a class="header-anchor" href="#_2-路由器原理" aria-hidden="true">#</a> 2. 路由器原理</h4><p>以公司为例，每个公司的网络只有一个公网IP。</p><ul><li>当用户A向公司里的用户B发送邮件时，该邮件首先发送到了公网的IP。</li><li>公网IP绑定的不是某个人的电脑，而是路由器，路由器再连接所有员工的电脑。</li><li>公司有很多电脑，每个电脑都有自己的内网IP，我们需要将邮件转发到内网IP。</li><li>在路由器中，有一个路由表（本质是映射表），储存了所有内网IP和对应电脑的mac地址。路由器根据这个映射表，将邮件转发到目的电脑，完成路由的工作。</li></ul><h4 id="_3-后端渲染与后端路由" tabindex="-1"><a class="header-anchor" href="#_3-后端渲染与后端路由" aria-hidden="true">#</a> 3. 后端渲染与后端路由</h4><h5 id="_3-1-后端渲染" tabindex="-1"><a class="header-anchor" href="#_3-1-后端渲染" aria-hidden="true">#</a> 3.1 后端渲染</h5><p>在早期，网站的整个HTML页面是由服务器来渲染的。</p><p>每个页面有一个自己的URL，浏览器将该URL发送到服务器，服务器通过正则（路由）对该URL进行匹配，并且最后交给一个Controller进行处理，处理后生成HTML+数据返回给前端。<br> 这种渲染模式就是后端渲染</p><h5 id="_3-2-后端路由" tabindex="-1"><a class="header-anchor" href="#_3-2-后端路由" aria-hidden="true">#</a> 3.2 后端路由</h5><p>上面的这种操作，就是后端路由。</p><p>当我们页面中需要请求不同的路径内容时, 交给服务器来进行处理, 服务器渲染好整个页面, 并且将页面返回给客户端。</p><p>缺点：前后端耦合。</p><h4 id="_4-前端渲染" tabindex="-1"><a class="header-anchor" href="#_4-前端渲染" aria-hidden="true">#</a> 4. 前端渲染</h4><p>所有的前端页面处理都由前端来完成，后端只负责提供数据API。</p><p>当浏览器发送URL的时候，静态服务器会返回对应的HTML+CSS+JS给浏览器。<br> 浏览器执行JS中的ajax时，再去调用后端的接口拿数据，最终渲染出页面。</p><h4 id="_5-spa与前端路由" tabindex="-1"><a class="header-anchor" href="#_5-spa与前端路由" aria-hidden="true">#</a> 5. SPA与前端路由</h4><p>SPA：单页面富应用，整个网站只有一个HTML文件，当请求不同的页面时，再去抽取相应的组件加载页面。</p><p>这个抽取不同组件的功能就需要前端路由来完成，SPA就是前后端分离+一层前端路由。<br> 在Vue中，路由的作用就是进行组件和URL的映射。</p><h4 id="_6-前端路由的核心" tabindex="-1"><a class="header-anchor" href="#_6-前端路由的核心" aria-hidden="true">#</a> 6. 前端路由的核心</h4><p>SPA应用：点击不同的页面（请求不同的URL）网页是不会进行刷新的，有两种技术可以做到不刷新，这两种技术Vue都可以实现</p><h5 id="_6-1-url-hash-锚点" tabindex="-1"><a class="header-anchor" href="#_6-1-url-hash-锚点" aria-hidden="true">#</a> 6.1 url.hash：锚点</h5><p>URL的hash也就是锚点(#)， 本质上是改变window.location的href属性。<br> 我们可以通过直接赋值location.hash来改变href， 但是页面不发生刷新。</p><p>Vue默认采用就是这种，弊端是路径里会有#</p><h5 id="_6-2-h5-history【推荐】" tabindex="-1"><a class="header-anchor" href="#_6-2-h5-history【推荐】" aria-hidden="true">#</a> 6.2 h5.history【推荐】</h5><p>就是采用H5的history，详见H5。</p><p>Vue也集成了该方法，vue3默认就是history。</p>`,55),p=[i];function r(o,c){return n(),s("div",null,p)}const u=a(t,[["render",r],["__file","1.入门.html.vue"]]);export{u as default};
