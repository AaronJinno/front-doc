import{_ as s,P as e,Q as i,S as a,a3 as t,a4 as c,a5 as l,C as p}from"./framework-3728cbf1.js";const o={},r=a("p",null,"uni-app的 js API 由标准 ECMAScript 的 js API 和 uni 扩展 API 这两部分组成。",-1),u={href:"https://uniapp.dcloud.net.cn/api/",target:"_blank",rel:"noopener noreferrer"},d=l(`<h4 id="_1-标准js和浏览器js" tabindex="-1"><a class="header-anchor" href="#_1-标准js和浏览器js" aria-hidden="true">#</a> 1. 标准JS和浏览器JS</h4><p>uni-app的 js 代码，web端运行于浏览器中。非web端（包含小程序和 App），Android 平台运行在 v8 引擎中，iOS 平台运行在 iOS 自带的 jscore 引擎中，都没有运行在浏览器或 webview 里。</p><p>非web端，不支持 window、document、navigator 等浏览器的 js API，支持标准 ECMAScript。 不要把浏览器里的 js 等价于标准 js</p><h4 id="_2-各端特色api调用" tabindex="-1"><a class="header-anchor" href="#_2-各端特色api调用" aria-hidden="true">#</a> 2. 各端特色API调用</h4><p>通过uni-app的条件编译可以调用各端特色的API。</p><h4 id="_3-api特性" tabindex="-1"><a class="header-anchor" href="#_3-api特性" aria-hidden="true">#</a> 3. API特性</h4><ul><li>uni.on 开头的 API 是监听某个事件发生的 API 接口，接受一个 CALLBACK 函数作为参数。 <ul><li>当该事件触发时，会调用 CALLBACK 函数。</li></ul></li><li>如未特殊约定，其他 API 接口都接受一个 OBJECT 作为参数。 <ul><li>OBJECT 中可以指定 success，fail，complete 来接收接口调用结果。</li></ul></li><li>异步 API 会返回 errMsg 字段，同步 API 则不会。</li></ul><h4 id="_4-api-promise化" tabindex="-1"><a class="header-anchor" href="#_4-api-promise化" aria-hidden="true">#</a> 4. API Promise化</h4><h5 id="_4-1-api-promise-化的策略" tabindex="-1"><a class="header-anchor" href="#_4-1-api-promise-化的策略" aria-hidden="true">#</a> 4.1 API Promise 化的策略</h5><ul><li>异步的方法，如果不传入 success、fail、complete 等 callback 参数，将以 Promise 返回数据。</li><li>异步的方法，且有返回对象，如果希望获取返回对象，必须至少传入一项 success、fail、complete 等 callback 参数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.正常使用</span>
<span class="token keyword">const</span> task <span class="token operator">=</span> uni<span class="token punctuation">.</span><span class="token function">connectSocket</span><span class="token punctuation">(</span>
    <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">//会返回task对象  </span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token comment">//2.promise化：无法获取task对象</span>
uni<span class="token punctuation">.</span><span class="token function">connnectSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此处即为正常使用时 success 回调的 res</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-不进行-promise-化-的-api" tabindex="-1"><a class="header-anchor" href="#_4-2-不进行-promise-化-的-api" aria-hidden="true">#</a> 4.2 不进行 Promise 化 的 API</h5><ul><li>同步的方法（即以 sync 结束）</li><li>以 create 开头的方法。</li><li>以 manager 结束的方法</li></ul><h5 id="_4-3-vue-2-和-vue-3-的-api-promise-化" tabindex="-1"><a class="header-anchor" href="#_4-3-vue-2-和-vue-3-的-api-promise-化" aria-hidden="true">#</a> 4.3 Vue 2 和 Vue 3 的 API Promise 化</h5><p>Vue 2 和 Vue 3 项目中 API Promise 化 返回格式不一致</p><ul><li>Vue2 ：对部分 API 进行了 Promise 封装，返回数据的第一个参数是错误对象，第二个参数是返回数据。此时使用 catch 是拿不到报错信息的，因为内部对错误进行了拦截。</li><li>Vue3 ：对部分 API 进行了 Promise 封装，调用成功会进入 then 方法 回调。调用失败会进入 catch 方法 回调。</li></ul><h4 id="_5-api列表" tabindex="-1"><a class="header-anchor" href="#_5-api列表" aria-hidden="true">#</a> 5. API列表</h4><p>大概可以分如下几个大类：</p><ul><li>基础：日志打印、定时器、转base64、应用级事件、拦截器、全局API</li><li>媒体和文件：图片、文件、录音、背景音、音频、视频、相机、直播</li><li>设备：系统信息、内存、网络状态、加速度计、罗盘、陀螺仪、拨打电话、扫码、剪切板、亮度、截屏事件、振动、手机联系人、蓝牙、低耗蓝牙、iBeacon、生物认证、操作键盘</li><li>界面：交互反馈、设置导航条、TabBar、背景、动画、滚动、绘画、下拉刷新、节点信息、节点布局相交状态</li><li>网络：发起请求、上传下载、WebSocket、SocketTask</li><li>缓存：设置缓存、读取缓存、删除缓存</li><li>位置：获取位置、查看位置、地图组件</li><li>第三方：第三方服务、广告服务、平台扩展</li><li>路由：跳转页面、关闭页面</li><li>其他：授权、设置、收货地址、获取发票抬头、小程序跳转、模板消息、小程序更新、调试、获取第三方平台数据</li></ul>`,19);function h(k,m){const n=p("ExternalLinkIcon");return e(),i("div",null,[r,a("p",null,[a("a",u,[t("详见文档"),c(n)])]),d])}const v=s(o,[["render",h],["__file","4-5.API.html.vue"]]);export{v as default};
