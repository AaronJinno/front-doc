import{_ as a,P as s,Q as n,a5 as e}from"./framework-3728cbf1.js";const p={},t=e(`<p>运算符也叫操作符，通过运算符可以对一个或多个值进行运算，并获取运算结果。</p><p>运算不会改变变量本身，而是将运算的结果进行返回。</p><h2 id="i-算术运算符" tabindex="-1"><a class="header-anchor" href="#i-算术运算符" aria-hidden="true">#</a> Ⅰ. 算术运算符</h2><p>算术运算包含：+、-、*、/、%、++、--。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">200</span><span class="token operator">-</span><span class="token string">&#39;100&#39;</span><span class="token operator">+</span><span class="token string">&#39;100&#39;</span><span class="token operator">=</span><span class="token number">100100</span><span class="token punctuation">;</span>
<span class="token string">&#39;200&#39;</span><span class="token operator">-</span><span class="token string">&#39;100a&#39;</span><span class="token operator">=</span><span class="token number">NaN</span><span class="token punctuation">;</span><span class="token comment">//&#39;100a&#39;=NaN;</span>
<span class="token number">200</span> <span class="token operator">*</span> <span class="token string">&#39;100&#39;</span> <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span>
<span class="token string">&#39;20000&#39;</span><span class="token operator">/</span><span class="token string">&#39;100&#39;</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-加法" tabindex="-1"><a class="header-anchor" href="#_1-加法" aria-hidden="true">#</a> 1. 加法</h4><ul><li>任何数字与NaN运算,结果都为NaN;</li><li>JavaScript里面的 +，除了四则运算的功能之外，还用来连接字符串，如果两个字符串进行加法运算，会拼接在一起。</li><li>如何值与字符串做加法运算都会先转换为字符串。</li></ul><p>可以对任意数据类型＋一个空字符串，而将其转换为字符串类型的数据。</p><h4 id="_2-减、乘、除" tabindex="-1"><a class="header-anchor" href="#_2-减、乘、除" aria-hidden="true">#</a> 2. 减、乘、除</h4><p>任何值进行 <code>-</code> <code>*</code> <code>/</code> 的运算，都会将字符串转换为数字类型。 可以利用 <code>-</code> <code>*</code> <code>/</code> 的特点，对其进行 <code>-0</code>，<code>*1</code>，<code>/1</code>进行隐式类型转换，转为number类型。</p><h4 id="_3-取模" tabindex="-1"><a class="header-anchor" href="#_3-取模" aria-hidden="true">#</a> 3. %：取模</h4><p>取模就是求余数。</p><h4 id="_4-一元运算符" tabindex="-1"><a class="header-anchor" href="#_4-一元运算符" aria-hidden="true">#</a> 4. 一元运算符</h4><p>只需要一个操作数的的运算符</p><ul><li><code>+</code>：正号 （正号不会对数据产生影响）</li><li><code>-</code>：负号（负号可以取反）</li><li>对于非number类型的值，会先转换为number再进行运算 <ul><li>可以利用这个特点，对其它类型的数据，取+ ，使其转换为number类型。</li></ul></li></ul><h4 id="_5-自增自减-前-与-后" tabindex="-1"><a class="header-anchor" href="#_5-自增自减-前-与-后" aria-hidden="true">#</a> 5. 自增自减：前++ /-- 与 后++/--</h4><ul><li>前++/--：先++/--，再运算。</li><li>后++/--：先运算，再++/--，也就是说先运算，第二次使用该值时，值才发生变化。</li></ul><h5 id="_5-1-前后-的不同" tabindex="-1"><a class="header-anchor" href="#_5-1-前后-的不同" aria-hidden="true">#</a> 5.1 前后++ --的不同</h5><p>对于原变量来说，无论先++--还是后++--都是一样的，原变量都会立即改变，不同的是 两个表达式返回的值（指的是表达式，而不是原变量）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//b=10,因为++在后要先运算(赋值)，再进行自增</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token operator">--</span>b<span class="token punctuation">;</span> <span class="token comment">//c=9,--在前，要先进行自减，再进行运算(赋值)</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> c<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span> c <span class="token punctuation">;</span><span class="token comment">//d=9+11=20;</span>
<span class="token keyword">var</span> e <span class="token operator">=</span> d<span class="token operator">--</span> <span class="token operator">-</span> <span class="token operator">--</span>d<span class="token punctuation">;</span><span class="token comment">//e=20-18=2;</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>a <span class="token operator">+</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">+</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">12</span> <span class="token operator">=</span> <span class="token number">34</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>a ：变量a,</li><li>a++：表达式a++ ，a++ = a 返回旧值，再次取值才是新增</li><li>++a：表达式++a， ++a = a+1 直接返回新值</li></ul><h2 id="ii-赋值运算符" tabindex="-1"><a class="header-anchor" href="#ii-赋值运算符" aria-hidden="true">#</a> Ⅱ. 赋值运算符</h2><p>将符号右边的值，赋值给左边，包含：\`= 、 += 、-= 、 *= 、/= 、%=</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//将100保存到num这个变量中</span>
<span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
num2 <span class="token operator">+=</span> num<span class="token punctuation">;</span> <span class="token comment">//num2 = num + num2 = 150;</span>

<span class="token comment">//+=练习</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;&lt;table border=&quot;</span><span class="token number">1</span><span class="token string">&quot;&gt;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    str <span class="token operator">+</span> <span class="token operator">=</span> <span class="token string">&#39;&lt;tr&gt;&lt;td&gt;&#39;</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">&#39;&lt;/td&gt;&lt;/tr&gt;&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
str <span class="token operator">+=</span> <span class="token string">&#39;&lt;/table&gt;&#39;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-比较运算符" tabindex="-1"><a class="header-anchor" href="#iii-比较运算符" aria-hidden="true">#</a> Ⅲ. 比较运算符</h2><p>用来比较值的关系：<code>&gt;</code> 、 <code>&lt;</code> <code>==</code> 、 <code>===</code> 、 <code>!=</code> 、<code>!==</code> 、 <code>&gt;=</code>、 <code>&lt;=</code>。</p><p>如果关系成立就返回true，如果关系不成立就返回false。</p><h4 id="_1-等号" tabindex="-1"><a class="header-anchor" href="#_1-等号" aria-hidden="true">#</a> 1. 等号</h4><ul><li>==：等于 <ul><li>用来比较值是否相等</li><li>如果两个值的类型不同，会自动进行类型转换，转换成相同的类型，再进行比较。</li><li>undefined衍生自null，两个值比较时，会返回true（但是不全等）。</li><li>NaN不可与任何值比较，包括他本身，任何比较都返回false。如果想判断一个值是否是NaN，要使用isNaN()函数。</li></ul></li><li>!= 不相等：就是相等取反，其他特性都一样</li><li>===：恒等于：用来比较值、数据类型是否全等，不会进行数据类型转换，类型不同，直接返回false。</li><li>!==：不全等：和不等类似，不会做类型转换，如果类型不同会直接返回true。</li></ul><h4 id="_2-对于非数字类型" tabindex="-1"><a class="header-anchor" href="#_2-对于非数字类型" aria-hidden="true">#</a> 2. 对于非数字类型</h4><p>会先转换为number类型，再进行比较。</p><ul><li>任何值和NaN做任何比较都是false</li><li>如果符号两侧的值都是字符串，不会将其转换为数字进行比较，而会比价他们的Unicode编码。比较字符编码时，会一位一位比较，如果两位一样就比较下一位，有值的比没值的打。 <ul><li>用途：可以借用他对人名进行排序。</li></ul></li><li>注意比较两个数字时，一定要转为number类型，因为两个数字类型的字符串，比较时是按Unicode编码比较的。</li></ul><h2 id="iv-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#iv-逻辑运算符" aria-hidden="true">#</a> Ⅳ. 逻辑运算符</h2><h4 id="_1-或" tabindex="-1"><a class="header-anchor" href="#_1-或" aria-hidden="true">#</a> 1. 或：||</h4><p>两者只要有一个为true，则为true。</p><p>JS中的或也会短路，如果第一个值为true，就不会检测第二个值了。</p><h4 id="_2-与" tabindex="-1"><a class="header-anchor" href="#_2-与" aria-hidden="true">#</a> 2. 与：&amp;&amp;</h4><p>两者都为true，结果才为true。</p><p>JS中的与是短路的与，如果第一个值是false，就不会再看第二个值了。</p><h4 id="_3-非" tabindex="-1"><a class="header-anchor" href="#_3-非" aria-hidden="true">#</a> 3. 非：！</h4><p>true变false，false变true。</p><p>对一个值进行两次取反，他不会变化，对非布尔值进行取反，会先将其转换为布尔值，再取反。 可以利用这两个特点点，将一个其他数据类型的值转换为布尔值。</p><h4 id="_4-非布尔值的-和-情况" tabindex="-1"><a class="header-anchor" href="#_4-非布尔值的-和-情况" aria-hidden="true">#</a> 4. 非布尔值的 &amp;&amp; 和 || 情况</h4><p>对于非布尔值，进行&amp;&amp; 和 || 运算时，会将其转换为布尔值，再进行运算，并且返回的是原值。</p><h5 id="_4-1" tabindex="-1"><a class="header-anchor" href="#_4-1" aria-hidden="true">#</a> 4.1 &amp;&amp;</h5><ul><li>如果两个值都为true，则返回后面的。</li><li>如果两个值中有false，则返回第一个false；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token punctuation">;</span><span class="token comment">//result = 2;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//result =0;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2" tabindex="-1"><a class="header-anchor" href="#_4-2" aria-hidden="true">#</a> 4.2 ||</h5><ul><li>如果第一个值是true，会直接返回第一个值</li><li>如果第一个值为false，会直接返回第二个值。</li></ul><h2 id="v-其他" tabindex="-1"><a class="header-anchor" href="#v-其他" aria-hidden="true">#</a> Ⅴ. 其他</h2><h4 id="_1-三元运算符" tabindex="-1"><a class="header-anchor" href="#_1-三元运算符" aria-hidden="true">#</a> 1. 三元运算符</h4><p>条件表达式？表达式为true-执行语句1：表达式为false-执行语句2；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token operator">?</span> <span class="token string">&#39;yes&#39;</span><span class="token operator">:</span><span class="token string">&#39;no&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-逗号运算符" tabindex="-1"><a class="header-anchor" href="#_2-逗号运算符" aria-hidden="true">#</a> 2. 逗号运算符</h4><p>使用 <code>,</code> 可以分割多个语句，一般在声明多个变量时使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-运算符的优先级" tabindex="-1"><a class="header-anchor" href="#_3-运算符的优先级" aria-hidden="true">#</a> 3. 运算符的优先级</h4><ul><li>算数: +、-、*、/、%、++、--</li><li>字符: + (连接字符串)</li><li>赋值: = 、 += 、-= 、 *= 、/= 、%=</li><li>比较: &gt; 、 &lt; 、<code>==</code>、 <code>===</code> 、 != 、!== 、 &gt;=、 &lt;=、</li><li>逻辑: &amp;&amp; ,|| !</li><li>位: ^&amp;,|,&lt;&lt;,&gt;&gt;</li><li>其他: 三元-&gt;&quot; : ? &quot;</li></ul><h4 id="_4-typeof" tabindex="-1"><a class="header-anchor" href="#_4-typeof" aria-hidden="true">#</a> 4. typeof</h4><p>typeof也是一个运算符，用来获得一个值的类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">typeof</span> a <span class="token punctuation">;</span> <span class="token comment">//b = number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,61),o=[t];function r(l,i){return s(),n("div",null,o)}const d=a(p,[["render",r],["__file","1-7.运算符.html.vue"]]);export{d as default};
