import{_ as a,o as n,c as s,e as t}from"./app-2b89a278.js";const e={},l=t(`<h2 id="i-插入css的方式" tabindex="-1"><a class="header-anchor" href="#i-插入css的方式" aria-hidden="true">#</a> Ⅰ. 插入CSS的方式</h2><h4 id="_1-行内-内联-样式-inline-style" tabindex="-1"><a class="header-anchor" href="#_1-行内-内联-样式-inline-style" aria-hidden="true">#</a> 1. 行内（内联）样式：Inline style</h4><p>内联方式指的是直接在 HTML 标签中的 style 属性中添加 CSS。style 属性可以包含任何 CSS 属性。</p><p>由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势，慎用这种方法，行内式只对其所在的标签及嵌套在其中的子标签起作用。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">属性1</span><span class="token punctuation">:</span> 属性值1<span class="token punctuation">;</span> <span class="token property">属性2</span><span class="token punctuation">:</span>属性值2<span class="token punctuation">;</span> <span class="token property">属性n</span><span class="token punctuation">:</span>属性值n<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>标签名</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-内部样式表-internal-style-sheet" tabindex="-1"><a class="header-anchor" href="#_2-内部样式表-internal-style-sheet" aria-hidden="true">#</a> 2. 内部样式表：Internal style sheet</h4><p>单个文档需要特殊的样式时，就应该使用内部样式表。<br> 可以使用 <code>&lt;style&gt;</code> 标签在文档头部定义内部样式表</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
         <span class="token selector">hr</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>sienna<span class="token punctuation">;</span><span class="token punctuation">}</span>
         <span class="token selector">p</span> <span class="token punctuation">{</span><span class="token property">margin-left</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token punctuation">}</span>
         <span class="token selector">body</span> <span class="token punctuation">{</span><span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;images/back40.gif&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-外部样式表-external-style-sheet" tabindex="-1"><a class="header-anchor" href="#_3-外部样式表-external-style-sheet" aria-hidden="true">#</a> 3. 外部样式表：External style sheet</h4><p>在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。</p><h5 id="_3-1-编写外部css" tabindex="-1"><a class="header-anchor" href="#_3-1-编写外部css" aria-hidden="true">#</a> 3.1 编写外部CSS</h5><p>外部样式表可以在任何文本编辑器中进行编辑。文件不能包含任何的 html 标签。样式表应该以 .css 扩展名进行保存。</p><h5 id="_3-2-link引入" tabindex="-1"><a class="header-anchor" href="#_3-2-link引入" aria-hidden="true">#</a> 3.2 link引入</h5><p>每个外部CSS文件都可以使用 <code>&lt;link&gt;</code> 标签链接到样式表， <code>&lt;link&gt;</code> 标签在（文档的）头部。</p><p>如下：浏览器会从文件 mystyle.css 中读到样式声明，并根据它来格式文档。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mystyle.css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-import导入" tabindex="-1"><a class="header-anchor" href="#_3-3-import导入" aria-hidden="true">#</a> 3.3 @import导入</h5><p>导入方式指的是使用 CSS 规则引入外部 CSS 文件。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>style.css<span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-4-link和-import的比较" tabindex="-1"><a class="header-anchor" href="#_3-4-link和-import的比较" aria-hidden="true">#</a> 3.4 link和@import的比较</h5><p>链接方式（下面用 link 代替）和导入方式（下面用 @import 代替）都是引入外部的 CSS 文件的方式</p><ul><li>link 属于 HTML，通过 <code>&lt;link&gt;</code> 标签中的 href 属性来引入外部文件，而 @import 属于 CSS，所以导入语句应写在 CSS 中，要注意的是导入语句应写在样式表的开头，否则无法正确导入外部文件；</li><li><code>@import</code> 是 CSS2.1 才出现的概念，所以如果浏览器版本较低，无法正确导入外部样式文件；</li><li>当 HTML 文件被加载时，link 引用的文件会同时被加载，而 @import 引用的文件则会等页面全部下载完毕再被加载；</li></ul><h4 id="_4-三种引入方式对比" tabindex="-1"><a class="header-anchor" href="#_4-三种引入方式对比" aria-hidden="true">#</a> 4. 三种引入方式对比</h4><table><thead><tr><th style="text-align:left;">样式表</th><th style="text-align:left;">优点</th><th style="text-align:left;">缺点</th><th style="text-align:left;">使用情况</th><th style="text-align:left;">控制范围</th></tr></thead><tbody><tr><td style="text-align:left;">行内样式表</td><td style="text-align:left;">书写方便，权重高</td><td style="text-align:left;">没有实现样式和结构相分离</td><td style="text-align:left;">较少</td><td style="text-align:left;">控制一个标签（少）</td></tr><tr><td style="text-align:left;">内部样式表</td><td style="text-align:left;">部分结构和样式相分离</td><td style="text-align:left;">没有彻底分离</td><td style="text-align:left;">较多</td><td style="text-align:left;">控制一个页面（中）</td></tr><tr><td style="text-align:left;">外部样式表</td><td style="text-align:left;">完全实现结构和样式相分离</td><td style="text-align:left;">需要引入</td><td style="text-align:left;">最多，强烈推荐</td><td style="text-align:left;">控制整个站点（多）</td></tr></tbody></table><h4 id="_5-多重样式" tabindex="-1"><a class="header-anchor" href="#_5-多重样式" aria-hidden="true">#</a> 5. 多重样式</h4><ul><li>如果某些属性在不同的样式表中被同样的选择器定义，那么属性值将从更具体的样式表中被继承过来。</li><li>优先级：内联样式 &gt; 内部样式 &gt;外部样式 &gt; 浏览器默认样式</li><li>如果外部样式放在内部样式的后面，则外部样式将覆盖内部样式</li></ul><h4 id="_6-css的层叠性" tabindex="-1"><a class="header-anchor" href="#_6-css的层叠性" aria-hidden="true">#</a> 6. CSS的层叠性</h4><p>所谓层叠性是指多种CSS样式的叠加。如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉。</p><h5 id="_6-1-样式冲突" tabindex="-1"><a class="header-anchor" href="#_6-1-样式冲突" aria-hidden="true">#</a> 6.1 样式冲突</h5><p>比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。</p><h5 id="_6-2-就近原则" tabindex="-1"><a class="header-anchor" href="#_6-2-就近原则" aria-hidden="true">#</a> 6.2 就近原则</h5><p>一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。样式不冲突，不会层叠。</p><h4 id="_7-css的继承性" tabindex="-1"><a class="header-anchor" href="#_7-css的继承性" aria-hidden="true">#</a> 7. CSS的继承性</h4><p>所谓继承性是指书写CSS样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。</p><p>恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性</p><h2 id="ii-样式的优先级" tabindex="-1"><a class="header-anchor" href="#ii-样式的优先级" aria-hidden="true">#</a> Ⅱ. 样式的优先级</h2><p>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，具体应该显示那个样式，这时就会出现优先级的问题。</p><h4 id="_1-规则总结" tabindex="-1"><a class="header-anchor" href="#_1-规则总结" aria-hidden="true">#</a> 1. 规则总结</h4><ul><li>CSS 优先规则1-&gt;继承，自身样式覆盖继承的样式，最近的祖先样式比其他祖先样式优先级高。</li><li>CSS 优先规则2-&gt;选择器：内联样式 &gt; ID 选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器 = 伪元素选择器</li><li>CSS 优先规则2-&gt;就近原则：相同权重，按就近原则。</li></ul><h4 id="_2-important" tabindex="-1"><a class="header-anchor" href="#_2-important" aria-hidden="true">#</a> 2. ！important</h4><p>有 <strong>!important</strong> 的属性拥有最高优先级。若同时插有 <strong>!important</strong>，则再利用其他规则判断优先级。</p><h4 id="_3-specificity权重" tabindex="-1"><a class="header-anchor" href="#_3-specificity权重" aria-hidden="true">#</a> 3. Specificity权重</h4><p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity，我们称为CSS 特性或称非凡性，它是一个衡量CSS值优先级的一个标准。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>没必要计算，现实中的css没那么复杂。</p></div>`,44),p=[l];function i(c,o){return n(),s("div",null,p)}const d=a(e,[["render",i],["__file","1-2.插入CSS.html.vue"]]);export{d as default};
