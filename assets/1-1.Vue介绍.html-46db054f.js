import{_ as s,r as l,o as i,c,a as t,b as a,d as e,e as p}from"./app-ba294a04.js";const o="/front-doc/img/vue/vue/1-1-1.png",r={},d={class:"hint-container tip"},u=t("p",{class:"hint-container-title"},"Line",-1),h={href:"https://cn.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://cn.vuejs.org/guide",target:"_blank",rel:"noopener noreferrer"},k={href:"https://cn.vuejs.org/api/",target:"_blank",rel:"noopener noreferrer"},v=p('<h2 id="i-基本介绍" tabindex="-1"><a class="header-anchor" href="#i-基本介绍" aria-hidden="true">#</a> Ⅰ. 基本介绍</h2><h4 id="_1-vuejs是什么" tabindex="-1"><a class="header-anchor" href="#_1-vuejs是什么" aria-hidden="true">#</a> 1. Vuejs是什么</h4><p><code>Vue /vju/</code> 是一套用于前端的渐进式JavaScript框架。</p><p>Vue 被设计为可以自底向上逐层应用，Vue是MVVM模式。</p><figure><img src="'+o+`" alt="1-1-1" tabindex="0" loading="lazy"><figcaption>1-1-1</figcaption></figure><h4 id="_2-vue的优点" tabindex="-1"><a class="header-anchor" href="#_2-vue的优点" aria-hidden="true">#</a> 2. Vue的优点</h4><ul><li>体积小：压缩后20KB左右（无任何依赖）</li><li>运行效率高（使用Virtual DOM）：基于虚拟DOM技术，一种可以预先通过JS进行各种计算，把最终DOM操作计算出来并优化的技术，并没有真正的操作DOM，所以叫虚拟DOM，该技术效率很高。</li><li>双向数据绑定 <ul><li>单项数据绑定：只能后台操纵前台的数据</li><li>双向数据绑定：数据的改变会引起DOM的改变、DOM的改变也会引起数据的变化。互相影响。双向数据绑定，可以把精力都投入到业务逻辑上。</li></ul></li><li>生态丰富：可以直接使用基于Vue的ui框架和常用主键，实现敏捷开发。</li></ul><h4 id="_3-三大主流框架对比" tabindex="-1"><a class="header-anchor" href="#_3-三大主流框架对比" aria-hidden="true">#</a> 3. 三大主流框架对比</h4><table><thead><tr><th style="text-align:left;"></th><th style="text-align:center;">Angular</th><th style="text-align:center;">React</th><th style="text-align:center;">Vue</th></tr></thead><tbody><tr><td style="text-align:left;">组织方式</td><td style="text-align:center;">MVC</td><td style="text-align:center;">模块化</td><td style="text-align:center;">模块化</td></tr><tr><td style="text-align:left;">数据绑定</td><td style="text-align:center;">双向绑定</td><td style="text-align:center;">单向绑定</td><td style="text-align:center;">双向绑定</td></tr><tr><td style="text-align:left;">模板能力</td><td style="text-align:center;">强大</td><td style="text-align:center;">自由</td><td style="text-align:center;">自由</td></tr><tr><td style="text-align:left;">自由度</td><td style="text-align:center;">较小</td><td style="text-align:center;">大</td><td style="text-align:center;">较大</td></tr><tr><td style="text-align:left;">路由</td><td style="text-align:center;">静态路由</td><td style="text-align:center;">动态路由</td><td style="text-align:center;">动态路由</td></tr><tr><td style="text-align:left;">国内占有率</td><td style="text-align:center;">1-5%</td><td style="text-align:center;">5-20%</td><td style="text-align:center;">80%</td></tr></tbody></table><h4 id="_4-使用场景" tabindex="-1"><a class="header-anchor" href="#_4-使用场景" aria-hidden="true">#</a> 4. 使用场景</h4><p>Vue一般用于网站开发，也可以用于进行手机APP开发，但要借助其他框架。</p><h4 id="_5-兼容性" tabindex="-1"><a class="header-anchor" href="#_5-兼容性" aria-hidden="true">#</a> 5. 兼容性</h4><p>Vue 不支持 IE8 及以下版本</p><h2 id="ii-vue的特点" tabindex="-1"><a class="header-anchor" href="#ii-vue的特点" aria-hidden="true">#</a> Ⅱ. Vue的特点</h2><p>Vue.js 是一套构建用户界面的框架，只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）。</p><p>在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；</p><h4 id="_1-渐进式框架" tabindex="-1"><a class="header-anchor" href="#_1-渐进式框架" aria-hidden="true">#</a> 1. 渐进式框架</h4><p>Vue 是一个框架，也是一个生态，其功能覆盖了大部分前端开发常见的需求。Vue 的设计非常注重灵活性和“可以被逐步集成”这个特点。</p><p>据需求场景，可以用不同的方式使用 Vue。</p><ul><li>无需构建步骤，渐进式增强静态的 HTML</li><li>在任何页面中作为 Web Components 嵌入</li><li>单页应用 (SPA)</li><li>全栈 / 服务端渲染 (SSR)</li><li>Jamstack / 静态站点生成 (SSG)</li><li>开发桌面端、移动端、WebGL，甚至是命令行终端中的界面</li></ul><h4 id="_2-单文件组件" tabindex="-1"><a class="header-anchor" href="#_2-单文件组件" aria-hidden="true">#</a> 2. 单文件组件</h4><p>在大多数启用了构建工具的 Vue 项目中，可以使用一种类似 HTML 格式的文件来书写 Vue 组件，它被称为单文件组件 (也被称为 <code>*.vue</code> 文件，英文 Single-File Components，缩写为 SFC)。</p><p>顾名思义，Vue 的单文件组件会将一个组件的逻辑 (JavaScript)，模板 (HTML) 和样式 (CSS) 封装在同一个文件里。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Count is: {{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">button</span> <span class="token punctuation">{</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-声明式渲染" tabindex="-1"><a class="header-anchor" href="#_3-声明式渲染" aria-hidden="true">#</a> 3. 声明式渲染</h4><p>Vue可以采用简洁的语法模版来声明式的将数据渲染进DOM系统中，也就是可以通过 <code>{{data}}</code> 的方式直接将数据写入DOM中，这种方式大大提高了开发效率。</p><h4 id="_4-响应式" tabindex="-1"><a class="header-anchor" href="#_4-响应式" aria-hidden="true">#</a> 4. 响应式</h4><p>数据是双向绑定，且是响应式更新的。<br> Vue端修改源代码，页面立马发生了改变，不用刷新浏览器。</p>`,28);function _(b,x){const n=l("ExternalLinkIcon");return i(),c("div",null,[t("div",d,[u,t("p",null,[t("a",h,[a("官网"),e(n)])]),t("p",null,[t("a",g,[a("文档"),e(n)])]),t("p",null,[t("a",k,[a("API"),e(n)])])]),v])}const y=s(r,[["render",_],["__file","1-1.Vue介绍.html.vue"]]);export{y as default};
