import{_ as n,o as s,c as a,e as t}from"./app-c07941ad.js";const p="/front-doc/img/vue/vue/4-7-1.png",e="/front-doc/img/vue/vue/4-7-2.png",o={},c=t('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>用于解决数据透传问题。</p><ul><li>Provide：数据提供者</li><li>Inject：数据注入者</li></ul></div><h4 id="_1-prop逐级透传问题" tabindex="-1"><a class="header-anchor" href="#_1-prop逐级透传问题" aria-hidden="true">#</a> 1. prop逐级透传问题</h4><p>当我们需要从父组件向子组件传递数据时，会使用 props。</p><p>对于一个多层嵌套的组件，形成了一颗巨大的组件树，若某个深层的子组件需要一个很远的祖先组件中的数据，如果使用props，则必须将其沿着组件链逐级传递下去。</p><p>那些根本不需要这些数据的组件也能访问到数据。如果组件链路非常长，可能会影响到更多这条路上的组件。这一问题被称为“prop 逐级透传”，要尽量避免这种情况。</p><figure><img src="'+p+'" alt="4-7-1" tabindex="0" loading="lazy"><figcaption>4-7-1</figcaption></figure><h4 id="_2-解决prop逐级透传问题" tabindex="-1"><a class="header-anchor" href="#_2-解决prop逐级透传问题" aria-hidden="true">#</a> 2. 解决prop逐级透传问题</h4><p>provide 和 inject 可以解决prop逐级透传的问题。</p><ul><li>一个父组件相对于其所有的后代组件，会作为依赖提供者。</li><li>任何后代的组件树，无论层级有多深，都可以注入由父组件提供给整条链路的依赖。</li></ul><figure><img src="'+e+`" alt="4-7-2" tabindex="0" loading="lazy"><figcaption>4-7-2</figcaption></figure><h4 id="_3-provide-提供" tabindex="-1"><a class="header-anchor" href="#_3-provide-提供" aria-hidden="true">#</a> 3. Provide：提供</h4><p>要为组件后代提供数据，需要使用到 provide() 函数，该函数有两个参数：</p><ul><li>参数1：注入名，可以是一个字符串或是一个 Symbol <ul><li>后代组件会用注入名来查找期望注入的值</li><li>一个组件可以多次调用 provide()，使用不同的注入名，注入不同的依赖值。</li></ul></li><li>参数2：提供的值，值可以是任意类型，包括响应式的状态，比如一个 ref <ul><li>提供的响应式状态使后代组件可以由此和提供者建立响应式的联系。</li></ul></li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span>provide<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>应用层Provide</strong></p><p>除了在一个组件中提供依赖，我们还可以在整个应用层面提供依赖：<br> 在应用级别提供的数据在该应用内的所有组件中都可以注入。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;hello!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-inject-注入" tabindex="-1"><a class="header-anchor" href="#_4-inject-注入" aria-hidden="true">#</a> 4. Inject：注入</h4><p>要注入上层组件提供的数据，需使用 inject() 函数。</p><p>如果提供的值是一个 ref，注入进来的会是该 ref 对象，而不会自动解包为其内部的值。这使得注入方组件能够通过 ref 对象保持了和供给方的响应性链接。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span>inject<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注入默认值</strong></p><p>默认情况下，inject 假设传入的注入名会被某个祖先链上的组件提供。</p><ul><li>如果该注入名的确没有任何组件提供，则会抛出一个运行时警告。</li><li>如果在注入一个值时不要求必须有提供者，那么我们应该声明一个默认值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//祖先组件若未提供message的值，就使用默认值</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;这是默认值&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-和响应式数据配合使用" tabindex="-1"><a class="header-anchor" href="#_5-和响应式数据配合使用" aria-hidden="true">#</a> 5. 和响应式数据配合使用</h4><p>当<code>提供 / 注入</code> 响应式的数据时，尽可能将任何对响应式状态的变更都保持在供给方组件中。<br> 这样可以确保所提供状态的声明和变更操作都内聚在同一个组件内，使其更容易维护。<br> 如果要在注入方组件中更改数据，推荐声明一个更新数据的函数。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 组件：供给方，提供数据 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> provide<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;North Pole&#39;</span><span class="token punctuation">)</span> <span class="token comment">//响应式数据</span>

<span class="token keyword">function</span> <span class="token function">updateLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//更改响应式数据</span>
  location<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;South Pole&#39;</span>
<span class="token punctuation">}</span>

<span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;location&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">//提供响应式数据，同时提供修改响应式数据的函数</span>
  location<span class="token punctuation">,</span>
  updateLocation
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 组件：注入方，使用数据 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> location<span class="token punctuation">,</span> updateLocation <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;location&#39;</span><span class="token punctuation">)</span> <span class="token comment">//使用响应式数据</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  //通过方法事件触发修改响应式数据的方法
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>updateLocation<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ location }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-用-symbol-作注入名" tabindex="-1"><a class="header-anchor" href="#_6-用-symbol-作注入名" aria-hidden="true">#</a> 6. 用 Symbol 作注入名</h4><p>构建大型应用或包含的依赖过多，或开发的是用来消费的组件，可能发生命名冲突，此时最好采用Symbol命名。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.key.js：专门用来导出注入名Symbol</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> myInjectionKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//2.组件：供给方，提供数据</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> myInjectionKey <span class="token punctuation">}</span> <span class="token keyword">from</span> &#39;<span class="token punctuation">.</span><span class="token operator">/</span>keys<span class="token punctuation">.</span>js
<span class="token function">provide</span><span class="token punctuation">(</span>myInjectionKey<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">/*
  要提供的数据
*/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//组件：注入方，使用数据</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> myInjectionKey <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./keys.js&#39;</span>
<span class="token keyword">const</span> injected <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>myInjectionKey<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),i=[c];function l(u,r){return s(),a("div",null,i)}const k=n(o,[["render",l],["__file","4-7.依赖注入.html.vue"]]);export{k as default};
