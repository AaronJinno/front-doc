import{_ as n,o as a,c as s,e as t}from"./app-351da1f5.js";const e={},p=t(`<div class="hint-container tip"><p class="hint-container-title">向父组件传递数据</p><p>当子组件需要向父组件传递数据时，就要用到自定义事件了。<br> 自定义事件就是由开发人员定义的非原生事件，触发自定义事件需要靠其他事件。</p></div><h2 id="i-自定义组件事件" tabindex="-1"><a class="header-anchor" href="#i-自定义组件事件" aria-hidden="true">#</a> Ⅰ. 自定义组件事件</h2><h4 id="_1-自定义事件的流程" tabindex="-1"><a class="header-anchor" href="#_1-自定义事件的流程" aria-hidden="true">#</a> 1. 自定义事件的流程</h4><h5 id="_1-1-父组件-绑定自定义事件" tabindex="-1"><a class="header-anchor" href="#_1-1-父组件-绑定自定义事件" aria-hidden="true">#</a> 1.1 父组件：绑定自定义事件</h5><p>父组件通过v-on在子组件标签上绑定一个自定义事件</p><ul><li>该事件只是作为标识符，事件名随意。</li><li>该事件并不是在父组件上触发的，而是通过子组件的事件触发。</li><li>该事件绑定到哪个子组件标签上，就监听哪个子组件（由哪个子组件来触发）。</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>App.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentA</span> <span class="token attr-name">@touch</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>touchme<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">&#39;./components/ComponentA.vue&#39;</span>
<span class="token keyword">function</span> <span class="token function">touchme</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;toch me &quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-子组件-传递事件" tabindex="-1"><a class="header-anchor" href="#_1-2-子组件-传递事件" aria-hidden="true">#</a> 1.2 子组件：传递事件</h5><p>在子组件上，监听一个原生事件（可以触发的），该原生事件用来触发父组件的自定义事件。</p><ul><li>子组件监听事件时，可以通过调用内建的 $emit 方法来传递事件，该方法的第一个参数就是父组件上的自定义事件名。</li><li>子组件的原生事件被触发时，$emit方法执行，并将参数传递给父组件。</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>ComponentA.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$emit(&#39;touch&#39;)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>click it<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-3-父组件-触发事件" tabindex="-1"><a class="header-anchor" href="#_1-3-父组件-触发事件" aria-hidden="true">#</a> 1.3 父组件：触发事件</h5><p>父组件接收子组件$emit传递的参数，并将第一个参数与自定义事件进行匹配，如果名字一样，就触发该自定义事件。</p><h4 id="_2-emit" tabindex="-1"><a class="header-anchor" href="#_2-emit" aria-hidden="true">#</a> 2. $emit</h4><p>在组件的模板表达式中，$emit方法就是用来触发自定义事件的。<br> 父组件可以通过 v-on来监听事件。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 子组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$emit(&#39;someEvent&#39;)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 父组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token attr-name">@some-event</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>callback<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-事件的命名" tabindex="-1"><a class="header-anchor" href="#_3-事件的命名" aria-hidden="true">#</a> 3. 事件的命名</h4><p>事件的名字也提供了自动的格式转换。<br> 注意这里我们触发了一个以 camelCase 形式命名的事件，但在父组件中可以使用 kebab-case 形式来监听。<br> 在模板中推荐使用 kebab-case 形式来编写监听器。</p><h4 id="_4-事件参数" tabindex="-1"><a class="header-anchor" href="#_4-事件参数" aria-hidden="true">#</a> 4. 事件参数</h4><p>有时，需要在子组件触发原生事件时附带一个值（可以利用这个原理将值从子组件传递给父组件）。</p><p>所有传入 <code>$emit()</code> 的额外参数都会被直接传向父组件的监听器。<br> 举例来说，<code>$emit(&#39;foo&#39;, 1, 2, 3)</code> 触发后，父组件监听器函数将会收到 1 2 3 这三个参数值。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- file：子组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$emit(&#39;touch&#39;,100)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> click it <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>


<span class="token comment">&lt;!-- file：父组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Mybutton</span> <span class="token attr-name">@touch(&quot;touchme&quot;)</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">function</span> <span class="token function">touchme</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//获取子组件传递的参数</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;touch me &quot;</span> <span class="token operator">+</span> n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-defineemits" tabindex="-1"><a class="header-anchor" href="#_5-defineemits" aria-hidden="true">#</a> 5. defineEmits()</h4><p>组件要触发的事件可以显式地通过 defineEmits() 宏来声明。</p><p>在 <code>&lt;template&gt;</code> 中使用的 $emit 方法不能在组件的 <code>&lt;script setup&gt;</code> 中使用，但defineEmits() 会返回一个相同作用的函数。</p><h5 id="_5-1-子组件" tabindex="-1"><a class="header-anchor" href="#_5-1-子组件" aria-hidden="true">#</a> 5.1 子组件</h5><p>definEmits宏定义了该子组件要传导的自定义事件，参数是数组，可有传导多个事件。<br> defineEmits() 宏不能在子函数中使用，它必须直接放置在 <code>&lt;script setup&gt;</code> 的顶级作用域下。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>ComponentA.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>buttonClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>click it<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> emits <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;touch&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;fuck&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">buttonClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">&#39;touch&#39;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-父组件" tabindex="-1"><a class="header-anchor" href="#_5-2-父组件" aria-hidden="true">#</a> 5.2 父组件</h5><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>App.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentA</span> <span class="token attr-name">@touch</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>touchme<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">&#39;./components/ComponentA.vue&#39;</span>
<span class="token keyword">function</span> <span class="token function">touchme</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;toch me &quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-3-流程解析" tabindex="-1"><a class="header-anchor" href="#_5-3-流程解析" aria-hidden="true">#</a> 5.3 流程解析</h5><ul><li>子组件：通过defineEmits宏定义要要传导的自定义事件（[&#39;touch&#39;,&#39;fuck&#39;]），并返回一个函数（emits） <ul><li>返回的这个函数，和原生的$emit作用是一样的，参数也是一样的</li></ul></li><li>父组件：在子组件标签上绑定自定义事件（@touch =&quot;touchme&quot;）</li><li>子组件：template中绑定原生事件（click），该事件将触发一个自定义函数（buttonclick）</li><li>子组件：在子组件事件触发的函数中，调用emits，并传递touch作为第一个参数，100作为第二个参数 <ul><li>第一个参数就是子组件要传导的自定义事件</li></ul></li><li>父组件：接受子组件emits方法传导的参数，并匹获取参数 <ul><li>第一个参数是touch，与父组件绑定的自定义事件touch匹配上了</li><li>匹配成功后，父组件绑定的自定义事件touch自动触发</li></ul></li><li>父组件：自定义事件touch触发后，调用事件的回调函数touchme <ul><li>父组件将子组件emits传导的其他参数（除了第一个参数）作为回调函数touchme的参数</li></ul></li><li>父组件：touchme函数执行，并获取了子组件要传递的数据。</li></ul><h4 id="_6-事件校验" tabindex="-1"><a class="header-anchor" href="#_6-事件校验" aria-hidden="true">#</a> 6. 事件校验</h4><p>和对 props 添加类型校验的方式类似，所有触发的事件也可以使用对象形式来描述。</p><p>要为事件添加校验，那么事件可以被赋值为一个函数，接受的参数就是抛出事件时传入 emit 的内容，返回一个布尔值来表明事件是否合法。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 没有校验</span>
  <span class="token literal-property property">click</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  
 <span class="token comment">// 校验 submit 事件</span>
  <span class="token function-variable function">submit</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>email <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid submit event payload!&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">submitForm</span><span class="token punctuation">(</span><span class="token parameter">email<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;submit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-tip" tabindex="-1"><a class="header-anchor" href="#_7-tip" aria-hidden="true">#</a> 7. TIP</h4><p>和原生 DOM 事件不一样，组件触发的事件没有冒泡机制。你只能监听直接子组件触发的事件。平级组件或是跨越多层嵌套的组件间通信，应使用一个外部的事件总线，或是使用一个全局状态管理方案。</p><h2 id="ii-配合v-model使用" tabindex="-1"><a class="header-anchor" href="#ii-配合v-model使用" aria-hidden="true">#</a> Ⅱ. 配合v-model使用</h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在组件template内使用v-model是可以的。<br> 但无法直接在子组件的标签上加v-model。组件的模板可能是input，但组件本身不是。</p></div><h4 id="_1-v-model的底层" tabindex="-1"><a class="header-anchor" href="#_1-v-model的底层" aria-hidden="true">#</a> 1. v-model的底层</h4><p>v-model只是个语法糖，底层是进行了值绑定，和监听input事件。</p><ul><li>v-bind：绑定一个value属性</li><li>v-on：给当前元素绑定input事件，当输入数据时触发input事件，该事件默认将获取当前表单元素的value，并将该值传递给v-bind绑定的value。</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!--上面的代码其实等价于下面这段，编译器会对 v-model 进行展开 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text = $event.target.value<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-子组件标签使用v-model的原理" tabindex="-1"><a class="header-anchor" href="#_2-子组件标签使用v-model的原理" aria-hidden="true">#</a> 2. 子组件标签使用v-model的原理</h4><p>假如需要使用一个组件作为父组件的input。虽然该子组件的作用（模板）是个input，但该子组件本身不是input，而是一个自定义的子组件标签。</p><p>既然不是input标签，就无法直接使用v-model了，而要利用v-model的底层原理，手动绑定value属性监听input事件。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!--直接这样使用是无效的  --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentA</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span>  <span class="token punctuation">/&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-展开v-model" tabindex="-1"><a class="header-anchor" href="#_2-1-展开v-model" aria-hidden="true">#</a> 2.1 展开v-model</h4><p>根据v-model的底层原理，v-model 会被展开为如下的形式（非真实情况，Vue3有特殊处理）。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentA</span> 
  <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span>  
  <span class="token attr-name">@input</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>newValue= &gt; message = newValue<span class="token punctuation">&quot;</span></span> 
<span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">&#39;./components/ComponentA.vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//双向数据绑定</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-使展开的v-model生效" tabindex="-1"><a class="header-anchor" href="#_2-2-使展开的v-model生效" aria-hidden="true">#</a> 2.2 使展开的v-model生效</h4><p>要让展开的v-model生效，需要到子组件内部进行操作，子组件内部是真正的input标签。</p><p>需要做两件事：</p><ul><li>input标签的value绑定到父组件的prop <ul><li>这样input的value就与父组件的value建立了关联</li></ul></li><li>绑定input方法，并通过事件传导触发父组件的input事件 <ul><li>同时将input的value作为第二个参数传递给父组件</li></ul></li></ul><h4 id="_3-子组件标签直接使用v-model" tabindex="-1"><a class="header-anchor" href="#_3-子组件标签直接使用v-model" aria-hidden="true">#</a> 3. 子组件标签直接使用v-model</h4><p>将v-model展开写太繁琐了，Vue3提供了直接在子组件使用v-model的方式。</p><p>只是有些默认的规则：</p><ul><li>v-model绑定的不再是value，而是modelValue</li><li>接收的方法也不再是input，而是update:modelValue</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentA</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 

<span class="token comment">&lt;!--v-model展开后真实情况--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentA</span>
  <span class="token attr-name">:modelValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name"><span class="token namespace">@update:</span>modelValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>newValue =&gt; message = newValue<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-父组件-v-model绑定" tabindex="-1"><a class="header-anchor" href="#_3-1-父组件-v-model绑定" aria-hidden="true">#</a> 3.1 父组件：v-model绑定</h5><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>message:{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> //获取JS变量中的message值
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentA</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> //直接在子组件上使用v-model
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">&#39;./components/ComponentA.vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//与v-model进行双向数据绑定</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-子组件-实现父组件的v-model绑定" tabindex="-1"><a class="header-anchor" href="#_3-2-子组件-实现父组件的v-model绑定" aria-hidden="true">#</a> 3.2 子组件：实现父组件的v-model绑定</h5><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- :value 与父组件的modelValue建立关联 --&gt;</span>
  <span class="token comment">&lt;!-- @input  触发父组件的自定义事件--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a<span class="token punctuation">&quot;</span></span> 
    <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>modelValue<span class="token punctuation">&#39;</span></span> 
    <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$emit(&#39;update:modelValue&#39;,$event.target.value)<span class="token punctuation">&quot;</span></span> 
  <span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> 

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;modelValue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//声明props</span>
<span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;update:modelValue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//声明自定义事件</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-v-model的参数" tabindex="-1"><a class="header-anchor" href="#_4-v-model的参数" aria-hidden="true">#</a> 4. v-model的参数</h4><p>默认情况下，v-model 在组件上都是使用 modelValue 作为 prop，并以 update:modelValue 作为对应的事件。<br> 可以通过给 v-model 指定一个参数来更改这些名字：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentA</span> <span class="token attr-name"><span class="token namespace">v-model:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bookTitle<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如上：prop改为了title，触发的事件变成了update:title，<br> 同时，子组件要对修改后的prop和事件进行处理。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;update:title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
 <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>
 <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$emit(&#39;update:title&#39;, $event.target.value)<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-多个v-model绑定" tabindex="-1"><a class="header-anchor" href="#_5-多个v-model绑定" aria-hidden="true">#</a> 5. 多个v-model绑定</h4><p>可以在一个组件上创建多个 v-model 双向绑定，每一个 v-model 都会同步不同的 prop：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentA</span> <span class="token attr-name"><span class="token namespace">v-model:</span>first-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>first<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-model:</span>last-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>last<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,72),l=[p];function o(c,i){return a(),s("div",null,l)}const d=n(e,[["render",o],["__file","4-4.组件事件.html.vue"]]);export{d as default};
