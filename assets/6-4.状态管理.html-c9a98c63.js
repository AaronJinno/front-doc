import{_ as n,o as a,c as s,e}from"./app-fb2cd4f5.js";const t="/front-doc/img/vue/vue/6-4-1.jpg",p={},c=e(`<h4 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1. 介绍</h4><p>理论上来说，每一个 Vue 组件实例都已经在“管理”它自己的响应式状态了。</p><p>如下：以一个简单的计数器组件为例：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token comment">// 状态</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">// 动作</span>
<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  count<span class="token punctuation">.</span>value<span class="token operator">++</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 视图 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>{{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-1-组件的组成" tabindex="-1"><a class="header-anchor" href="#_1-1-组件的组成" aria-hidden="true">#</a> 1.1 组件的组成</h5><p>每个组件都是一个独立的单页，由已下三部分组成：</p><ul><li>状态：驱动整个应用的数据源；</li><li>视图：对状态的一种声明式映射；</li><li>交互：状态根据用户在视图中的输入而作出相应变更的可能方式。</li></ul><h5 id="_1-2-单向数据流" tabindex="-1"><a class="header-anchor" href="#_1-2-单向数据流" aria-hidden="true">#</a> 1.2 单向数据流</h5><p>下面是“单向数据流”这一概念的简单图示：</p><figure><img src="`+t+`" alt="6-4-1" tabindex="0" loading="lazy"><figcaption>6-4-1</figcaption></figure><h4 id="_2-共享状态" tabindex="-1"><a class="header-anchor" href="#_2-共享状态" aria-hidden="true">#</a> 2. 共享状态</h4><p>当有多个组件共享一个共同的状态时，就比较难处理了，多个视图可能都依赖于同一份状态，来自不同视图的交互也可能需要更改同一份状态。</p><h5 id="_2-1-解决方案" tabindex="-1"><a class="header-anchor" href="#_2-1-解决方案" aria-hidden="true">#</a> 2.1 解决方案</h5><ul><li>对于情景 1，一个可行的办法是将共享状态“提升”到共同的祖先组件上去，再通过 props 传递下来。然而在深层次的组件树结构中这么做的话，很快就会使得代码变得繁琐冗长。这会导致另一个问题：Prop 逐级透传问题。</li><li>对于情景 2，我们经常发现自己会直接通过模板引用获取父/子实例，或者通过触发的事件尝试改变和同步多个状态的副本。但这些模式的健壮性都不甚理想，很容易就会导致代码难以维护。</li></ul><h5 id="_2-2-抽取共享状态" tabindex="-1"><a class="header-anchor" href="#_2-2-抽取共享状态" aria-hidden="true">#</a> 2.2 抽取共享状态</h5><p>一个更简单直接的解决方案是抽取出组件间的共享状态，放在一个全局单例中来管理。这样我们的组件树就变成了一个大的“视图”，而任何位置上的组件都可以访问其中的状态或触发动作。</p><h4 id="_3-简单状态管理" tabindex="-1"><a class="header-anchor" href="#_3-简单状态管理" aria-hidden="true">#</a> 3. 简单状态管理</h4><p>如果有一部分状态需要在多个组件实例间共享，可以使用 reactive() 来创建一个响应式对象，并将它导入到多个组件中。</p><p>示例如下：</p><h5 id="_3-1-store-专门用来存储共享状态" tabindex="-1"><a class="header-anchor" href="#_3-1-store-专门用来存储共享状态" aria-hidden="true">#</a> 3.1 store：专门用来存储共享状态</h5><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">//file:src/store/store.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>reactive<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-使用共享状态" tabindex="-1"><a class="header-anchor" href="#_3-2-使用共享状态" aria-hidden="true">#</a> 3.2 使用共享状态</h5><p>在其他多个组件中，通过导入store.js来使用共享状态。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- ComponentA.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store.js&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>From A: {{ store.count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- ComponentB.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store.js&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>From B: {{ store.count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-效果" tabindex="-1"><a class="header-anchor" href="#_3-3-效果" aria-hidden="true">#</a> 3.3 效果</h5><p>每当 store 对象被更改时，<code>&lt;ComponentA&gt;</code> 与 <code>&lt;ComponentB&gt;</code> 都会自动更新它们的视图。</p><h5 id="_3-4-问题" tabindex="-1"><a class="header-anchor" href="#_3-4-问题" aria-hidden="true">#</a> 3.4 问题</h5><p>通过store引入的状态并非是制只读的，这也意味着任意一个导入了 store 的组件都可以随意修改它的状态。<br> 从长远来看，可以被任何组件任意改变的全局状态是不太容易维护的。</p><h5 id="_3-5-方案" tabindex="-1"><a class="header-anchor" href="#_3-5-方案" aria-hidden="true">#</a> 3.5 方案</h5><p>建议在store中定义方法，通过方法来修改状态。</p><h4 id="_4-vuex" tabindex="-1"><a class="header-anchor" href="#_4-vuex" aria-hidden="true">#</a> 4. Vuex</h4><p>Vuex是Vue2的状态管理库，目前已被遗弃。</p><h4 id="_5-pinia" tabindex="-1"><a class="header-anchor" href="#_5-pinia" aria-hidden="true">#</a> 5. Pinia</h4><p>Pinia是Vue3官方指定的状态管理库，Vue2也可以用，是Vuex的官方替代品。</p><p>详见：Pinia</p>`,35),i=[c];function o(l,r){return a(),s("div",null,i)}const d=n(p,[["render",o],["__file","6-4.状态管理.html.vue"]]);export{d as default};
