import{_ as a,o as e,c as n,e as i}from"./app-ba294a04.js";const s={},t=i(`<h2 id="i-事件介绍" tabindex="-1"><a class="header-anchor" href="#i-事件介绍" aria-hidden="true">#</a> Ⅰ. 事件介绍</h2><h4 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h4><p>JavaScript中的事件和现实生活中的事件类似，现实生活中发生的一些事情，例如：交通事件、萨德事件，当这些事情发生时，我们需要提供处理方案。</p><h4 id="_2-js中的事件" tabindex="-1"><a class="header-anchor" href="#_2-js中的事件" aria-hidden="true">#</a> 2. JS中的事件</h4><p>JS的事件就是文档或浏览器窗口发生的一些特定的交互瞬间。JS与HTML之间的交互是通过事件实现的。</p><p>在JS中的事件，指的是用户 和网页发生交互时的一些行为，例如：鼠标点击、按下键盘按键、鼠标移动，这些行为就称之为事件，事件发生时，我们的程序也应该提供对应的处理方法。</p><h4 id="_3-事件处理" tabindex="-1"><a class="header-anchor" href="#_3-事件处理" aria-hidden="true">#</a> 3. 事件处理</h4><p>我们可以在事件对应的属性中设置一些JS代码，当事件触发时，这些代码将会执行。</p><p>例如：我们可以为事件绑定一些处理函数，这样当事件触发时，对应的函数就会被调用。</p><h2 id="ii-js-事件分类" tabindex="-1"><a class="header-anchor" href="#ii-js-事件分类" aria-hidden="true">#</a> Ⅱ. JS 事件分类</h2><h4 id="_1-鼠标事件" tabindex="-1"><a class="header-anchor" href="#_1-鼠标事件" aria-hidden="true">#</a> 1. 鼠标事件</h4><ul><li>click()： 鼠标单击</li><li>dbclick()： 鼠标双击</li><li>mouseover()： 鼠标移入事件</li><li>mouseout()： 鼠标移出事件</li><li>mousemove()： 鼠标移动事件</li><li>mousedown()： 鼠标按下事件</li><li>mouseup()： 鼠标按键被松开事件</li><li>scroll()： 滚动事件（body）</li></ul><h4 id="_2-键盘事件" tabindex="-1"><a class="header-anchor" href="#_2-键盘事件" aria-hidden="true">#</a> 2. 键盘事件</h4><ul><li>keydown: 按键被按下</li><li>keyup: 按键抬起</li></ul><h4 id="_3-表单事件" tabindex="-1"><a class="header-anchor" href="#_3-表单事件" aria-hidden="true">#</a> 3. 表单事件</h4><ul><li>submit: 表单提交事件</li><li>select: 文本框的文本被选中</li><li>focus: 获得焦点事件</li><li>blur: 失去焦点事件</li><li>change: 内容改变事件</li></ul><h4 id="_4-页面加载完毕事件" tabindex="-1"><a class="header-anchor" href="#_4-页面加载完毕事件" aria-hidden="true">#</a> 4. 页面加载完毕事件</h4><p>load</p><h2 id="iii-事件对象" tabindex="-1"><a class="header-anchor" href="#iii-事件对象" aria-hidden="true">#</a> Ⅲ. 事件对象</h2><h4 id="_1-说明" tabindex="-1"><a class="header-anchor" href="#_1-说明" aria-hidden="true">#</a> 1. 说明</h4><p>当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递仅响应函数<br> 形参可以任意定义，一般定义为e或event.</p><p>在事件对象中封装了当前事件相关的一切信息，比如：鼠标的坐标，键盘哪个按键被按下，鼠标滚轮滚动的方向等。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>element<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-、兼容性" tabindex="-1"><a class="header-anchor" href="#_2-、兼容性" aria-hidden="true">#</a> 2. 、兼容性</h4><p>不用考虑兼容性，老IE，狗都不用。</p><h2 id="iv-默认事件" tabindex="-1"><a class="header-anchor" href="#iv-默认事件" aria-hidden="true">#</a> Ⅳ. 默认事件</h2><p>除了我们要自己绑定的事件外，浏览器还有很多默认的事件，比如点击a标签默认跳转，点击submit默认提交等。</p><h4 id="_1-阻止默认事件" tabindex="-1"><a class="header-anchor" href="#_1-阻止默认事件" aria-hidden="true">#</a> 1. 阻止默认事件</h4><p>有时会我们不需要执行浏览器的默认事件，这时我们可以对默认事件进行阻止。<br> 阻止时会阻止所有的默认事件。</p><h4 id="_2-阻止默认事件的方法" tabindex="-1"><a class="header-anchor" href="#_2-阻止默认事件的方法" aria-hidden="true">#</a> 2. 阻止默认事件的方法</h4><ul><li>return false: 在事件函数中，return false即可阻止浏览器的默认事件</li><li>event.preventDefault(): 如果使用功能addEventListener()方法绑定响应函数，则不能通过return false取消，而是要在事件的回调函数中，使用event.preventDefault()取消。</li></ul>`,31),l=[t];function r(c,d){return e(),n("div",null,l)}const o=a(s,[["render",r],["__file","6-1.介绍.html.vue"]]);export{o as default};
