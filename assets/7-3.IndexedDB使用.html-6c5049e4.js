import{_ as n,o as a,c as s,e}from"./app-277eb25d.js";const t={},p=e(`<h2 id="i-连接数据库" tabindex="-1"><a class="header-anchor" href="#i-连接数据库" aria-hidden="true">#</a> Ⅰ. 连接数据库</h2><h4 id="_1-indexeddb-open-连接数据库" tabindex="-1"><a class="header-anchor" href="#_1-indexeddb-open-连接数据库" aria-hidden="true">#</a> 1. indexedDB.open：连接数据库</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> request <span class="token operator">=</span> window<span class="token punctuation">.</span>indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>databaseName<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//window可省</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>databaseName： 数据库的名字(string)，如果指定的数据库不存在，就会创建新数据库。</li><li>version：是一个大于0的正整数（0将报错），如果该参数大于当前版本，会触发数据库升级。第二个参数可省略，如果数据库已存在，将打开当前版本的数据库；如果数据库不存在，将创建该版本的数据库，默认版本为1。</li><li>request：indexedDB.open()方法返回的一个IDBRequest对象，这个对象用来处理打开数据库的结果，通过error、success、upgradeeneeded三个事件来监听。</li></ul><h4 id="_2-idbrequest对象的事件" tabindex="-1"><a class="header-anchor" href="#_2-idbrequest对象的事件" aria-hidden="true">#</a> 2. IDBRequest对象的事件</h4><h5 id="_2-1-error事件" tabindex="-1"><a class="header-anchor" href="#_2-1-error事件" aria-hidden="true">#</a> 2.1 error事件</h5><p>表示打开数据库失败。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据库打开报错&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-success事件" tabindex="-1"><a class="header-anchor" href="#_2-2-success事件" aria-hidden="true">#</a> 2.2 success事件</h5><p>表示成功打开数据库。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> idb<span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//通过request对象的result属性拿到数据库对象(IDBDataBase对象)</span>
    idb <span class="token operator">=</span> request<span class="token punctuation">.</span>result<span class="token punctuation">;</span><span class="token comment">//或 e.target.result;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据库打开成功&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-upgradeneeded事件" tabindex="-1"><a class="header-anchor" href="#_2-3-upgradeneeded事件" aria-hidden="true">#</a> 2.3 upgradeneeded事件</h5><p>如果指定的版本号，大于数据库的实际版本号，就会发生数据库升级事件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> db
request<span class="token punctuation">.</span><span class="token function-variable function">onupgradeneeded</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//通过事件对象的target.result属性，拿到数据库实例(IDBDataBase对象)</span>
    db <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-数据库连接示例" tabindex="-1"><a class="header-anchor" href="#_3-数据库连接示例" aria-hidden="true">#</a> 3. 数据库连接示例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;连接数据库&quot;</span> onclick<span class="token operator">=</span><span class="token string">&quot;connectDB()&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">function</span> <span class="token function">connectDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> idb<span class="token punctuation">;</span>
    <span class="token keyword">var</span> request <span class="token operator">=</span> window<span class="token punctuation">.</span>indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;article&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        idb <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;连接成功&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;连接失败&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-关闭数据库连接" tabindex="-1"><a class="header-anchor" href="#_4-关闭数据库连接" aria-hidden="true">#</a> 4. 关闭数据库连接</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>idb<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-更新与连接" tabindex="-1"><a class="header-anchor" href="#_5-更新与连接" aria-hidden="true">#</a> 5. 更新与连接</h4><p>如果数据库连接的时候，判断是需要更新的，会先进行更新，然后在进行连接，也就是会先触发upgradeneeded事件再触发success(或error)事件。</p><h2 id="ii-创建库和表" tabindex="-1"><a class="header-anchor" href="#ii-创建库和表" aria-hidden="true">#</a> Ⅱ. 创建库和表</h2><p>新建数据库与打开数据库是同一个操作。</p><p>如果指定的数据库不存在，就会新建。不同之处在于，后续的操作主要在upgradeneeded事件的监听函数里面完成，因为这时版本从无到有，所以会触发这个事件。</p><p>通常，新建数据库以后，第一件事是新建对象仓库（即新建表）。</p><h4 id="_1-createobjectstore" tabindex="-1"><a class="header-anchor" href="#_1-createobjectstore" aria-hidden="true">#</a> 1. createObjectStore</h4><p>该方法用来创建新的对象仓库（数据表），在触发upgradeneeded事件后，可以在此事件内触发该函数，进行创建数据表（必须在更新事件内创建）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> optionParameter <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">keyPath</span><span class="token operator">:</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">autoIncrement</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> store <span class="token operator">=</span> idb<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">,</span>optionlParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参数1：字符串，对象仓库名（数据表名）</li><li>参数2：optionalParameters，一个JS对象，该对象的keyPath属性用于指定对象仓库中的主键为哪个属性值，如果不指定或指定为null，就需要通过其他途径进行外部指定（外部主键） <ul><li>optionlParameters对象的autoincrement属性为布尔类型，规定是否指定主键值为自增长。</li></ul></li><li>返回值：返回一个IDBObjectStore对象，该对象代表创建成功的对象仓库。</li></ul><p>一般来说，keyPath和autoIncrement属性只要使用一个就够了，如果两个同时使用，表示主键为递增的整数，且对象不得缺少keyPath指定的属性。</p><h4 id="_2-新建对象仓库示例" tabindex="-1"><a class="header-anchor" href="#_2-新建对象仓库示例" aria-hidden="true">#</a> 2. 新建对象仓库示例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>request<span class="token punctuation">.</span><span class="token function-variable function">onupgradeneeded</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    idb <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
    <span class="token comment">//contains() 方法用于判断指定元素内是否包含另一个元素。</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>idb<span class="token punctuation">.</span>objectStoreNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;person&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//先判断是否存在该表</span>
        <span class="token keyword">var</span> objectStore <span class="token operator">=</span> idb<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">&#39;person&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">keyPath</span><span class="token operator">:</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码解析：数据库新建成功以后，新增一张叫做person的表格，主键是id。</p><h4 id="_3-更新数据库版本" tabindex="-1"><a class="header-anchor" href="#_3-更新数据库版本" aria-hidden="true">#</a> 3. 更新数据库版本</h4><p>在indexedDB数据库中，所有数据操作都必须在一个事务内部执行。</p><p>分为：只读事务、读写事务、和版本更新事务。对于创建对象仓库和索引的操作，只能在版本更新事务内部进行。</p><p>因为在indexDB API中不允许数据库中的数据仓库（表）在同一个版本中发生变化，所以当创建或删除数据仓库（表）时，必须使用新的版本号来更新数据库的版本，避免重复修改数据库结构。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>indexDB数据库版本更新<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">&quot;updateversion()&quot;</span><span class="token operator">&gt;</span>更新数据库版本<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

<span class="token keyword">function</span> <span class="token function">updateversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> idb<span class="token punctuation">;</span>
    <span class="token keyword">var</span> dbContent <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;person&#39;</span><span class="token punctuation">,</span><span class="token number">20200122</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dbContent<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据库连接失败&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dbContent<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据库连接成功&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dbContent<span class="token punctuation">.</span><span class="token function-variable function">onupgradeneeded</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据库正在更新&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>oldVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>newVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-创建索引" tabindex="-1"><a class="header-anchor" href="#iii-创建索引" aria-hidden="true">#</a> Ⅲ. 创建索引</h2><p>IndexedDB中的索引类似于关系型数据库的索引，需要通过数据记录对象的某个属性值来创建。</p><p>注意：在indexedDB数据库中，只能针对被设为索引的属性值进行检索。</p><h4 id="_1-主键" tabindex="-1"><a class="header-anchor" href="#_1-主键" aria-hidden="true">#</a> 1. 主键</h4><p>主键（key）是默认建立索引的属性。</p><p>比如，数据记录是{ id: 1, name: &#39;张三&#39; }，那么id属性可以作为主键。主键也可以指定为下一层对象的属性，比如{ foo: { bar: &#39;baz&#39; } }的foo.bar也可以指定为主键。如果数据记录里面没有合适作为主键的属性，那么可以让 IndexedDB 自动生成主键。</p><p>注意：主键默认就是索引，如果有搜索其他数据的需求，可以建立其他索引。</p><p>1.1 autoIncrement<br> 指定主键为一个递增的整数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> objectStore <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">&#39;peoson&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">autoIncrement</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_1-2-建立主键索引示例" tabindex="-1"><a class="header-anchor" href="#_1-2-建立主键索引示例" aria-hidden="true">#</a> 1.2 建立主键索引示例</h5><p>可以在创建数据对象（表）的时候直接通过keyPath创建主键索引。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> optionParameter <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">keyPath</span><span class="token operator">:</span><span class="token string">&#39;uid&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">autoIncrement</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> storeName <span class="token operator">=</span> dbObject<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span>optionParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>optionalParameters：一个JS对象，该对象的keyPath属性用于指定对象仓库中的主键为哪个属性值，如果不指定或指定为null，就需要通过其他途径进行外部指定（外部主键）</li><li>autoincrement：布尔类型，规定是否指定主键值为自增长的主键</li></ul><p>注意：keyPath和autoIncrement属性一般只要使用一个就够了</p><h4 id="_2-后建立索引" tabindex="-1"><a class="header-anchor" href="#_2-后建立索引" aria-hidden="true">#</a> 2. 后建立索引</h4><p>也就是为非主键的数据添加上搜索的功能（索引）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>request<span class="token punctuation">.</span><span class="token function-variable function">onupgradeneeded</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    idb <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
    <span class="token keyword">var</span> optionalParameters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">unique</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token literal-property property">multiEntry</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> objectStore <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">&#39;peoson&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">keyPath</span><span class="token operator">:</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    objectStore<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;uname&#39;</span><span class="token punctuation">,</span>optionalParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
    objectStore<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">unique</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>参数</strong><br> IDBObject.createIndex()的三个参数分别为：</p><ul><li>索引名称：索引名称可以不与数据的属性名相同，也可以相同。</li><li>索引所在的属性</li><li>optionalParameters：配置对象（可选） <ul><li>unique 属性：当于关系型数据库中的unique，值为布尔</li><li>multiEntry属性：true代表当数据记录的索引属性值为一个数组时，可以将数组中的每一个元素添加在索引中（比如搜索标签），multiEntry属性值为false，代表只能将该数组整体添加在索引中</li></ul></li></ul><p><strong>返回值</strong><br> 返回一个IDBIndex对象，代表创建索引成功。</p><h2 id="iv-使用事务" tabindex="-1"><a class="header-anchor" href="#iv-使用事务" aria-hidden="true">#</a> Ⅳ. 使用事务</h2><p>在indexedDB API中，所有针对数据的操作都只能在一个事务中被执行，要想操作数据要先开启事务。</p><h4 id="_1-事务模式" tabindex="-1"><a class="header-anchor" href="#_1-事务模式" aria-hidden="true">#</a> 1. 事务模式</h4><p>一共有三种事务模拟。</p><h5 id="_1-1-readonly-默认模式" tabindex="-1"><a class="header-anchor" href="#_1-1-readonly-默认模式" aria-hidden="true">#</a> 1.1 readonly（默认模式）</h5><p>只读。提供对某个对象储存的只读访问，在查询对象储存时使用。<br> 用户可以在任何时刻打开多个并发的readonly事务。</p><h5 id="_1-2-readwrite" tabindex="-1"><a class="header-anchor" href="#_1-2-readwrite" aria-hidden="true">#</a> 1.2 readwrite</h5><p>读写。提供对某个对象储存的读取和写入访问权。在数据更新时使用。一般不支持并发。</p><h5 id="_1-3-versionchange" tabindex="-1"><a class="header-anchor" href="#_1-3-versionchange" aria-hidden="true">#</a> 1.3 versionchange</h5><p>数据库版本更新。提供读取和写入访问权限来修改对象储存定义，或者新建对象储存（数据表）。</p><p>单独versionchange事务操作一个数据库或对象仓库，可以在onupgradeneeded事件处理函数中使用versionchange事务创建、修改或者删除一个对象仓库，或者将一个索引添加到对象仓库。</p><p>PS：此模式的事务不能与其他事务同时运行，进行版本更新时，自动调用该事务。</p><h4 id="_2-并发与库范围" tabindex="-1"><a class="header-anchor" href="#_2-并发与库范围" aria-hidden="true">#</a> 2. 并发与库范围</h4><p>一个对象仓库只能被一个事务单独进行写操作。</p><p>进行读写操作时，当事务A的的作用范围是storeA，事务B的作用范围是storeB，由于两个仓库的作为范围不同，可以同时运行。如果事务A的作用范围包括了事务B，那么就无法同时运行了，即使A是只读也不行。</p><h4 id="_3-开启事务" tabindex="-1"><a class="header-anchor" href="#_3-开启事务" aria-hidden="true">#</a> 3. 开启事务</h4><p>使用某个已经建立连接的数据库对象(IDBDataBase)的transaction()方法可以开启事务。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> trans <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;readewrite&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数1：一个由一些对象仓库名(表)组成的一个字符串数组，用于定义事务的作用范围，即该数据库的哪些数据表开启此事务。 <ul><li>如果想作用于所有的表，可以直接使用objectStoreNames属性表示（不建议无脑用这个属性，效率低）。</li></ul></li><li>参数2（可选）：用户定义事务的读写模式，即指定事务为只读事务还是读写事务。 <ul><li>transaction()方法返回一个IDBTransaction对象，代表被开启的事务。</li></ul></li></ul><h4 id="_4-事务的运行" tabindex="-1"><a class="header-anchor" href="#_4-事务的运行" aria-hidden="true">#</a> 4. 事务的运行</h4><p>用于开启事务的transaction()方法必须被书写到某一个函数中，且该事务将在函数结束时自动进行提交，不需要显式的调用事务提交方法，但是可以在需要时调用abort()方法来主动终止事务。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>trans<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-事务事件监听" tabindex="-1"><a class="header-anchor" href="#_5-事务事件监听" aria-hidden="true">#</a> 5. 事务事件监听</h4><p>可以通过监听事务对象的oncomplete事件（事务结束时触发）和onabort事件（事务中止时触发），并定义事件处理函数来定义事务结束或中止时所要执行的处理。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> trans <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span>idb<span class="token punctuation">.</span>objectStoreName<span class="token punctuation">,</span><span class="token string">&quot;readwrite&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trans<span class="token punctuation">.</span><span class="token function-variable function">oncomplete</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
trans<span class="token punctuation">.</span><span class="token function-variable function">onabort</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="v-操作数据" tabindex="-1"><a class="header-anchor" href="#v-操作数据" aria-hidden="true">#</a> Ⅴ. 操作数据</h2><p>操作数据前，需要先连接数据库，连接成功后，使用该数据库对象的transaction()方法开启一个读写事务。</p><h4 id="_1-说明" tabindex="-1"><a class="header-anchor" href="#_1-说明" aria-hidden="true">#</a> 1. 说明</h4><p>使用transaction()方法返回的被开启的事务对象的objectStore()方法，获取该事务对象的作用范围中的某个对象仓库。参数是所需获取的数据对象名称。返回值是一个IDBObjectStore对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> store <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//tx是被开启的事务对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-put-保存数据" tabindex="-1"><a class="header-anchor" href="#_2-put-保存数据" aria-hidden="true">#</a> 2. put()：保存数据</h4><p>使用对象仓库的put()方法向数据库发出保存数据到对象仓库中的请求。</p><p>put()方法的参数就是需要保存的数据对象， put()方法返回一个IDBRequest对象，代表向一个数据库发出的请求。<br> put()请求发出后会立即异步执行，可以通过监听onsuccess和onerror事件，判断数据保存是否成功，并制定相关函数进行处理。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">&quot;saveData()&quot;</span><span class="token operator">&gt;</span>保存数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

<span class="token keyword">function</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//只列出一个完整代码，其他地方仅根据此代码列出片段</span>
    <span class="token keyword">var</span> dbName <span class="token operator">=</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> dbVersion <span class="token operator">=</span> <span class="token number">202001222</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> idb<span class="token punctuation">;</span>
    <span class="token keyword">var</span> request <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>dbName<span class="token punctuation">,</span>dbVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        idb <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
        <span class="token keyword">var</span> tx <span class="token operator">=</span> idb<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&quot;readwrite&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//返回指定名称的对象仓库，是仓库不是仓库名</span>
        <span class="token keyword">var</span> store <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">userId</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">uname</span><span class="token operator">:</span><span class="token string">&#39;jinno&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> req <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        req<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;保存成功&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-保存数据时的注意事项" tabindex="-1"><a class="header-anchor" href="#_3-保存数据时的注意事项" aria-hidden="true">#</a> 3. 保存数据时的注意事项</h4><ul><li>数据对象类似于关系型数据库的表，而一个keyPath就对应表里的一行数据。</li><li>保存数据时一定要有keyPath，不然无法保存（不知道数据属于表里的哪条记录）。</li><li>数据的书写格式一律是json格式。</li><li>为一个主键追加数据，追加时，不能直接写主键和被追加的数据，这种写法是更新数据，不是为该记录追加数据，想要追加就要把旧数据也写上，进行重新保存该主键数据。</li></ul><h4 id="_4-add-追加数据" tabindex="-1"><a class="header-anchor" href="#_4-add-追加数据" aria-hidden="true">#</a> 4. add()：追加数据</h4><p>add()方法与put()方法的使用方式与作用类似，区别在与，put方法保存数据时，如果指定的主键存在，会直接更新该主键的数据，而add()会报错。</p><p>因此，当必须是要追加而不是更新数据时，可以使用add()方法。</p><h4 id="_5-添加数据的主键" tabindex="-1"><a class="header-anchor" href="#_5-添加数据的主键" aria-hidden="true">#</a> 5. 添加数据的主键</h4><p>根据对象仓库的主键形式，来指定put()、add()方法的参数形式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.当主键为自增，内联主键时不需要指定主键值</span>
store<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">uname</span><span class="token operator">:</span><span class="token string">&#39;jinno&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.当主键为内联、非自增主键时，需要指定主键值</span>
store<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">uid</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">uname</span><span class="token operator">:</span><span class="token string">&#39;jinno&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//3.当主键为外部主键时，需要通过第二个参数另行指定主键值，此处主键值为1</span>
store<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">uname</span><span class="token operator">:</span><span class="token string">&#39;jinno&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-delete-删除数据" tabindex="-1"><a class="header-anchor" href="#_6-delete-删除数据" aria-hidden="true">#</a> 6. delete()：删除数据</h4><p>使用IDBObjectStore.delete()方法来删除某条数据，并通过onsuccess和onerror事件来判断删除数据是否成功。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//参数是主键</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7-读取数据" tabindex="-1"><a class="header-anchor" href="#_7-读取数据" aria-hidden="true">#</a> 7. 读取数据</h4><ul><li>与写入数据一样，首先需要获得IDBObjectStore对象。</li><li>然后使用该对象的get()方法，来获取目标数据，该方法的参数是数据对象的主键值。该方法同样返回一个IDBRequest对象，代表向数据库发出的获取数据的请求。</li><li>可以通过监听请求对象的success和error事件来判断数据请求操作是否成功，并进一步进行函数处理（是该操作是否成功执行，而不是执行的结果是否有要的数据）。</li><li>如果未找到数据，则该对象的result属性值为undefined。如果找到了数据，则该对象的result属性值为获取到的数据记录，该记录是一个数组，数组的键名为数据对象的属性名，可以直接通过键名来获取具体的数据。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> req <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    data <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">==</span> undifined<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;没有符合条件的数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        uname <span class="token operator">=</span> data<span class="token punctuation">.</span>username<span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;用户名字为&#39;</span><span class="token operator">+</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
req<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据库连接失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vi-检索数据" tabindex="-1"><a class="header-anchor" href="#vi-检索数据" aria-hidden="true">#</a> Ⅵ. 检索数据</h2><h4 id="_1-获取指针" tabindex="-1"><a class="header-anchor" href="#_1-获取指针" aria-hidden="true">#</a> 1. 获取指针</h4><p>当需要遍历或检索数据时，首先需要获取一个指针对象。</p><h5 id="_1-1-opencursor" tabindex="-1"><a class="header-anchor" href="#_1-1-opencursor" aria-hidden="true">#</a> 1.1 openCursor()</h5><p>通过对象仓库的openCursor()方法创建并打开一个游标（指针）</p><ul><li>参数1：一个IDBKeyRange对象。可忽略，忽略后没有数据范围限制。</li><li>参数2：direction，用于指定游标读取的方向。该值为预定义常量，可忽略。</li><li>返回值：返回一个IDBRequest对象，代表向数据库发送了数据检索请求。</li></ul><h4 id="_1-2-idbkeyrange-对象" tabindex="-1"><a class="header-anchor" href="#_1-2-idbkeyrange-对象" aria-hidden="true">#</a> 1.2 IDBKeyRange 对象</h4><p>代表数据仓库（object store）里面的一组主键。根据这组主键，可以获取数据仓库或索引里面的一组记录。IDBKeyRange 可以只包含一个值，也可以指定上限和下限。它有四个静态方法，用来指定主键的范围。</p><ul><li>IDBKeyRange.lowerBound()：指定下限。</li><li>IDBKeyRange.upperBound()：指定上限。</li><li>IDBKeyRange.bound()：同时指定上下限。</li><li>IDBKeyRange.only()：指定只包含一个值。</li></ul><h4 id="_2-遍历数据说明" tabindex="-1"><a class="header-anchor" href="#_2-遍历数据说明" aria-hidden="true">#</a> 2. 遍历数据说明</h4><p>如果需要遍历获得的数据记录中的所有数据，需要使用指针对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> request <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">openCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-1-判断检索请求是否成功" tabindex="-1"><a class="header-anchor" href="#_2-1-判断检索请求是否成功" aria-hidden="true">#</a> 2.1 判断检索请求是否成功</h5><p>使用onsuccess和onerror进行监听。请求成功后，通过e.target.result获取IDBCursorWithValue对象。（只获取一个数据，可使用continue()来继续获取数据）。</p><ul><li>value属性，可以获取数据对象中的所有数据。</li><li>key属性，可以获取当前遍历对象的主键</li><li>souse属性，获取该对象仓库</li><li>direction属性，获取指针的方向。 <ul><li>next：正向，prev：反向，</li><li>nextunique：正向忽略重复值，prevunique：反向忽略重复值</li></ul></li></ul><h5 id="_2-2-continue-方法" tabindex="-1"><a class="header-anchor" href="#_2-2-continue-方法" aria-hidden="true">#</a> 2.2 continue()方法</h5><p>指针向前移动一个位置。它可以接受一个主键作为参数，这时会跳转到这个主键。当运行continue()方法时，程序会再次进行onsuccess监听对应的function会再运行一遍，如果还有数据，result返回值就不会null或undefined，会继续进行if检测，直到数据指针走完所有主键。</p><h4 id="_3-遍历数据代码" tabindex="-1"><a class="header-anchor" href="#_3-遍历数据代码" aria-hidden="true">#</a> 3. 遍历数据代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> request <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">openCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">var</span> cursor <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span><span class="token comment">//IDBCursorWithValue对象</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Id: &#39;</span> <span class="token operator">+</span> cursor<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Name: &#39;</span> <span class="token operator">+</span> cursor<span class="token punctuation">.</span>value<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Age: &#39;</span> <span class="token operator">+</span> cursor<span class="token punctuation">.</span>value<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Email: &#39;</span> <span class="token operator">+</span> cursor<span class="token punctuation">.</span>value<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>
       cursor<span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;没有更多数据了！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-对遍历的数据进行处理" tabindex="-1"><a class="header-anchor" href="#_4-对遍历的数据进行处理" aria-hidden="true">#</a> 4. 对遍历的数据进行处理</h4><ul><li>IDBCursorWithValue.delete()：用来删除当前位置的记录，返回一个 IDBRequest 对象。该方法不会改变指针的位置。</li><li>IDBCursorWithValue.update()：用来更新当前位置的记录，返回一个 IDBRequest 对象。它的参数是要写入数据库的新的值。</li></ul><h4 id="_5-通过非主键索引检索数据" tabindex="-1"><a class="header-anchor" href="#_5-通过非主键索引检索数据" aria-hidden="true">#</a> 5. 通过非主键索引检索数据</h4><h5 id="_5-1-idbindex对象" tabindex="-1"><a class="header-anchor" href="#_5-1-idbindex对象" aria-hidden="true">#</a> 5.1 IDBIndex对象</h5><p>objectStore对象通过index函数创建的对象，该对象可以获取数据库里的记录。获取的方式是除了主键以外的其他索引。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myIndex <span class="token operator">=</span> objectStore<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">&#39;lName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_5-2-使用方式" tabindex="-1"><a class="header-anchor" href="#_5-2-使用方式" aria-hidden="true">#</a> 5.2 使用方式</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> indexstore <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">&#39;uname&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> request <span class="token operator">=</span> indexstore<span class="token punctuation">.</span><span class="token function">openCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//此处的代码与遍历处的相同。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,132),o=[p];function c(i,l){return a(),s("div",null,o)}const r=n(t,[["render",c],["__file","7-3.IndexedDB使用.html.vue"]]);export{r as default};
