import{_ as n,o as s,c as a,e as t}from"./app-2b89a278.js";const p={},e=t(`<h2 id="i-坐标变换" tabindex="-1"><a class="header-anchor" href="#i-坐标变换" aria-hidden="true">#</a> Ⅰ. 坐标变换</h2><p>绘图时，可能想要旋转图形，或者对图形使用变形处理，使用坐标变换处理功能，可以实现这种效果。</p><h4 id="_1-坐标" tabindex="-1"><a class="header-anchor" href="#_1-坐标" aria-hidden="true">#</a> 1. 坐标</h4><p>在计算机上绘制图形的时候，是以坐标单位为基准进行图形的绘制的。默认情况下， Canvas 画布的最左上角对应于坐标轴原点(0, 0)。对这个坐标使用变换处理，就可以实现图形的变形处理了。</p><h4 id="_2-变换处理的方式" tabindex="-1"><a class="header-anchor" href="#_2-变换处理的方式" aria-hidden="true">#</a> 2. 变换处理的方式</h4><h5 id="_2-1-平移" tabindex="-1"><a class="header-anchor" href="#_2-1-平移" aria-hidden="true">#</a> 2.1 平移</h5><p>使用context对象的 translate 方法移动坐标轴原点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>x 表示将坐标轴原点向左移动多少个单位，默认情况下为0像素；</li><li>y 表示将坐标轴原点向下移动多少个单位。<br> 只有在平移后的绘制才会受平移影响，如果画完了再平移，对已经绘制好的图没影响，对之后绘制的图有影响，多个平移效果会进行累加的。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//需要先平移再进行绘制</span>
context1<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context1<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-缩放" tabindex="-1"><a class="header-anchor" href="#_2-2-缩放" aria-hidden="true">#</a> 2.2 缩放</h5><p>使用context对象的 scale 方法缩放图形。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>x 是水平方向的放大倍数，</li><li>y 是垂直方向的放大倍数。<br> 注意：将图形缩小的时候，将这两个参数设为0 到 1之间的小数就可以了，譬如0.5是指将图形缩小一半。</li></ul><h5 id="_2-3-旋转" tabindex="-1"><a class="header-anchor" href="#_2-3-旋转" aria-hidden="true">#</a> 2.3 旋转</h5><p>使用context对象的 rotate 方法旋转图形。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>angle 是指旋转的角度，旋转的中心点是坐标轴的原点。</li><li>旋转是以顺时针方向进行旋转的，要想逆时针旋转，将 angle 设定为负数就可以了。</li></ul><h4 id="_3-示例" tabindex="-1"><a class="header-anchor" href="#_3-示例" aria-hidden="true">#</a> 3. 示例</h4><p>绘制了一个正方形，在一个循环中使用三种图形变换，绘制出一个非常漂亮的变形图形。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByld</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>canvas <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span> ；
    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&quot;#EEEEFF&quot;</span>；
    context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//图形绘制</span>
    context<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&#39;rgba(255,0,0,0.25)&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        context<span class="token punctuation">.</span><span class="token function">translate</span> <span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0.95</span><span class="token punctuation">,</span><span class="token number">0.95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>        
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-坐标变换与路径" tabindex="-1"><a class="header-anchor" href="#ii-坐标变换与路径" aria-hidden="true">#</a> Ⅱ. 坐标变换与路径</h2><p>绘制图形时，先使用变换，再使用绘制图形的函数，变换才生效，如果先绘制再使用变换，变换是无法生效的，因为变换变换的是路径。</p><h4 id="_1-问题说明" tabindex="-1"><a class="header-anchor" href="#_1-问题说明" aria-hidden="true">#</a> 1. 问题说明</h4><p>对使用路径绘制出来的图形进行变换时，要考虑的事情就比较多了。</p><p>因为使用坐标变换之后，已经创建好的路径就不能用了，必须重新创建路径。重新创建好路径之后，坐标变换方法又失效了。如何解决？</p><h4 id="_2-问题解决" tabindex="-1"><a class="header-anchor" href="#_2-问题解决" aria-hidden="true">#</a> 2. 问题解决</h4><p>先另外写一个创建路径的函数，然后在坐标变换的同时调用该函数，这样才能解决上述问题。</p><h4 id="_3-变换示例" tabindex="-1"><a class="header-anchor" href="#_3-变换示例" aria-hidden="true">#</a> 3. 变换示例</h4><p>绘制一个将五角星一边旋转一边缩小的一些列图形。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByld</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>canvas <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d &#39;</span> <span class="token punctuation">)</span> ；
    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&quot;#EEEEFF&quot;</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//图形绘制</span>
    context<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        context<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0.95</span><span class="token punctuation">,</span><span class="token number">0.95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">create5Star</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">fill</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>        
<span class="token keyword">function</span> <span class="token function">create5Star</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//单独的创建路径的方法</span>
    <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">var</span> dx <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token keyword">var</span> dy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
    <span class="token comment">//创建路径</span>
    context<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&#39;rgba(255,0,0,0.5)&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> dig <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>i<span class="token operator">*</span>dig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>i<span class="token operator">*</span>dig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span> dx <span class="token operator">+</span> x <span class="token operator">*</span> s<span class="token punctuation">,</span>dy <span class="token operator">+</span> y <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    context<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-创建路径的函数" tabindex="-1"><a class="header-anchor" href="#_4-创建路径的函数" aria-hidden="true">#</a> 4. 创建路径的函数</h4><p>在示例中，首先单独书写了一个 create5Star 函数，在该函数中创建一个五角星的路径。在draw 函数中的 for 循环中，首先依次执行 translate 、 scale 、 rotate 方法，然后执行create5Star 函数创建路径，最后执行 fill 填充。</p><h2 id="iii-矩阵变换" tabindex="-1"><a class="header-anchor" href="#iii-矩阵变换" aria-hidden="true">#</a> Ⅲ. 矩阵变换</h2><p>矩阵是专门用来实现图形变形的，它与坐标一起配合使用，以达到变形的目的。</p><p>当图形创建完毕后，也创建了一个默认的变换矩阵，如果不对这个变换矩阵进行修改，接下来绘制的图形将以画布的最左上角为坐标原点绘制图形，但是如果对这个变换矩阵进行修改，就可以达到变换图形的作用。</p><h4 id="_1-transforms" tabindex="-1"><a class="header-anchor" href="#_1-transforms" aria-hidden="true">#</a> 1. transforms</h4><p>使用context对象的 transforms 方法修改变换矩阵。</p><p>该方法使用一个新的变换矩阵与当前变换矩阵进行乘法运算</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>m11<span class="token punctuation">,</span> m12<span class="token punctuation">,</span> m21<span class="token punctuation">,</span> m22<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>m11, m12, m21, m22,这 4 个参数用来决定如如何变形;</li><li>dx 与 dy 参数移动坐标原点. <ul><li>dx 表示将坐标原点在 x 轴上向右移动 x 个单位，默认情况下以像素为单位，</li><li>dy 表示将坐标原点在 y 轴上向下移动 y 个单位。</li></ul></li></ul>`,41),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","5-6.变换图形.html.vue"]]);export{r as default};
