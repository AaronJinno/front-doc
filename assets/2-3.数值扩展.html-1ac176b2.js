import{_ as n,o as s,c as a,e}from"./app-c07941ad.js";const t={},p=e(`<h2 id="i-数值的扩展" tabindex="-1"><a class="header-anchor" href="#i-数值的扩展" aria-hidden="true">#</a> Ⅰ. 数值的扩展</h2><h4 id="_1-二进制和八进制表示法" tabindex="-1"><a class="header-anchor" href="#_1-二进制和八进制表示法" aria-hidden="true">#</a> 1. 二进制和八进制表示法</h4><p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀0b（或0B）和0o（或0O）表示。</p><p>0表示八进制已经被废除，在严格模式下会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">0b111110111</span> <span class="token operator">===</span> <span class="token number">503</span> <span class="token comment">// true</span>
<span class="token number">0o767</span> <span class="token operator">===</span> <span class="token number">503</span> <span class="token comment">// true</span>

<span class="token comment">//Number：将其他进制转10进制</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;0b111&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 7</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;0o10&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-number-epsilon" tabindex="-1"><a class="header-anchor" href="#_2-number-epsilon" aria-hidden="true">#</a> 2. Number.EPSILON</h4><p>ES6 在Number对象上面，新增一个极小的常量Number.EPSILON（JS能表示的最小精度）。<br> 它表示 1 与大于 1 的最小浮点数之间的差。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span> <span class="token operator">===</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">52</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-1-目的" tabindex="-1"><a class="header-anchor" href="#_2-1-目的" aria-hidden="true">#</a> 2.1 目的</h5><p>为浮点数计算，设置一个误差范围。</p><p>Number.EPSILON可以用来设置“能够接受的误差范围”。</p><p>比如：误差范围设为 2 的-50 次方（即Number.EPSILON * Math.pow(2, 2)），即如果两个浮点数的差小于这个值，我们就认为这两个浮点数相等。</p><h5 id="_2-2-示例-误差检测函数" tabindex="-1"><a class="header-anchor" href="#_2-2-示例-误差检测函数" aria-hidden="true">#</a> 2.2 示例：误差检测函数</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//设置一个判断浮点数运算结果是否正确的函数</span>
<span class="token keyword">function</span> <span class="token function">equal</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token operator">+</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">03.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token comment">//设置一个误差检测函数</span>
<span class="token keyword">function</span> <span class="token function">withinErrorMargin</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>left <span class="token operator">-</span> right<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">===</span> <span class="token number">0.3</span> <span class="token comment">// false</span>
<span class="token function">withinErrorMargin</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-number-max-safe-integer和number-min-safe-integer" tabindex="-1"><a class="header-anchor" href="#_3-number-max-safe-integer和number-min-safe-integer" aria-hidden="true">#</a> 3. Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER</h4><p>JavaScript 能够准确表示的整数范围在-2<sup>53到2</sup>53之间（不含两个端点），超过这个范围，无法精确表示这个值。Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER这两个常量，用来表示这个范围的上下限。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token operator">===</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token operator">===</span> <span class="token number">9007199254740991</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span> <span class="token operator">===</span> <span class="token operator">-</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">9007199254740991</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-指数运算符" tabindex="-1"><a class="header-anchor" href="#_4-指数运算符" aria-hidden="true">#</a> 4. 指数运算符</h4><p>ES2016 新增了一个指数运算符<code>**</code>，多个指数运算符连用时，是从最右边开始计算的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token comment">// 4</span>
<span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token comment">// 8</span>

<span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token comment">// 相当于 2 ** (3 ** 2)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指数运算符可以与等号结合，形成一个新的赋值运算符（**=）。</p><h2 id="ii-bigint" tabindex="-1"><a class="header-anchor" href="#ii-bigint" aria-hidden="true">#</a> Ⅱ. Bigint</h2><div class="hint-container info"><p class="hint-container-title">说明</p><p>略，ES2020引入，支持度不高。</p></div><h2 id="iii-number新增方法" tabindex="-1"><a class="header-anchor" href="#iii-number新增方法" aria-hidden="true">#</a> Ⅲ. Number新增方法</h2><h4 id="_1-number-isfinite" tabindex="-1"><a class="header-anchor" href="#_1-number-isfinite" aria-hidden="true">#</a> 1. Number.isFinite()</h4><p>Number.isFinite()用来检查一个数值是否为有限的（finite），即不是Infinity。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>返回值: 布尔，如果参数不是数值，或者是Infinity和-Infinity，就返回false。</li><li>与isFinite()的区别: 传统的isFinite要先调用Number()将非数值转为数值，而该方法非数值直接返回false。</li></ul><h4 id="_2-number-isnan" tabindex="-1"><a class="header-anchor" href="#_2-number-isnan" aria-hidden="true">#</a> 2. Number.isNaN()</h4><p>Number.isNaN()用来检查一个值是否为NaN。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;NaN&quot;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>返回值: 如果参数类型不是NaN，Number.isNaN一律返回false。</li><li>与isNaN的区别: 不会将非数值转换为数值，再判断，而是直接将非数值当做NaN。</li></ul><h4 id="_3-number-parseint-和number-parsefloat" tabindex="-1"><a class="header-anchor" href="#_3-number-parseint-和number-parsefloat" aria-hidden="true">#</a> 3. Number.parseInt()和Number.parseFloat</h4><p>ES6 将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。<br> 这是为了减少全局性方法，使语言逐步模块化。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ES5的写法</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;12.34&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 12</span>
<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;123.45#&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 123.45</span>
<span class="token comment">// ES6的写法</span>
Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;12.34&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 12</span>
Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;123.45#&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 123.45</span>
Number<span class="token punctuation">.</span>parseInt <span class="token operator">===</span> parseInt <span class="token comment">// true</span>
Number<span class="token punctuation">.</span>parseFloat <span class="token operator">===</span> parseFloat <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-number-isinterger" tabindex="-1"><a class="header-anchor" href="#_4-number-isinterger" aria-hidden="true">#</a> 4. Number.isInterger()</h4><p>Number.isInteger()用来判断一个数值是否为整数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">25.0</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">25.1</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>小数位为0: JS内部，整数和浮点数储存方式一样，所以25==25.0</li><li>非数值: 如果参数不是数值，Number.isInteger返回false</li><li>误判问题: 数值储存为64双精度格式，最多储存53个二进制位，超过精度可能会误判 <ul><li>如果一个数组的绝对值小于Number.MIN_VALUE（5E-324），会被自动转为0，从而误判。</li></ul></li></ul><h4 id="_5-number-issafeinteger" tabindex="-1"><a class="header-anchor" href="#_5-number-issafeinteger" aria-hidden="true">#</a> 5. Number.isSafeInteger()</h4><p>用来判断一个整数是否落在最小整数和最大整数之间</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-math新增方法" tabindex="-1"><a class="header-anchor" href="#iv-math新增方法" aria-hidden="true">#</a> Ⅳ. math新增方法</h2><p>这些方法很新，可能要做兼容性处理。</p><h4 id="_1-math-trunc" tabindex="-1"><a class="header-anchor" href="#_1-math-trunc" aria-hidden="true">#</a> 1. Math.trunc()</h4><p>Math.trunc方法用于去除一个数的小数部分，返回整数部分。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token number">4.9</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4.1</span><span class="token punctuation">)</span> <span class="token comment">// -4</span>
Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.1234</span><span class="token punctuation">)</span> <span class="token comment">// -0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Math.trunc内部使用Number方法将其先转为数值。</li><li>对于空值和无法截取整数的值，返回NaN。</li></ul><h4 id="_2-math-sign" tabindex="-1"><a class="header-anchor" href="#_2-math-sign" aria-hidden="true">#</a> 2. Math.sign()</h4><p>Math.sign方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// -1</span>
Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// +1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>它会返回五种值：</p><ul><li>参数为正数，返回+1；</li><li>参数为负数，返回-1；</li><li>参数为 0，返回0；</li><li>参数为-0，返回-0;</li><li>其他值，返回NaN。</li></ul><p>如果参数是非数值，会自动转为数值。对于那些无法转为数值的值，会返回NaN。</p><h4 id="_3-math-cbrt" tabindex="-1"><a class="header-anchor" href="#_3-math-cbrt" aria-hidden="true">#</a> 3. Math.cbrt</h4><p>Math.cbrt()方法用于计算一个数的立方根。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span>
Math<span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>
Math<span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 1.2599210498948732</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于非数值，Math.cbrt()方法内部也是先使用Number()方法将其转为数值。</p>`,58),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","2-3.数值扩展.html.vue"]]);export{r as default};
