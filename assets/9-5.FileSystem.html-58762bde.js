import{_ as n,o as s,c as a,e as t}from"./app-351da1f5.js";const e="/front-doc/img/basic/html/9-5-1.png",p="/front-doc/img/basic/html/9-5-2.png",o="/front-doc/img/basic/html/9-5-3.png",c="/front-doc/img/basic/html/9-5-4.png",i={},l=t(`<h2 id="i-filesystem-api" tabindex="-1"><a class="header-anchor" href="#i-filesystem-api" aria-hidden="true">#</a> Ⅰ. FileSystem API</h2><p>FIleSystem API 是将数据保存到用户磁盘文件系统中，实现数据永久保存的。</p><p>它能够帮助我们来突破沙箱访问我们本地的文件系统，从而有效的弥补桌面和web应用之间的鸿沟。这个API帮助我们控制私有的本地文件系统 &quot;沙箱(sandbox)&quot; ，在这里我们可以读和写文件，创建和排列文件夹。</p><h4 id="_1-filesystem-api使用场合" tabindex="-1"><a class="header-anchor" href="#_1-filesystem-api使用场合" aria-hidden="true">#</a> 1. FileSystem API使用场合</h4><ul><li>文件上传 <ul><li>当客户端通过 FileSystem AM 上传文件系统中的文件或目录时，这些文件将首先被拷贝到本地沙箱中，然后分段上传本地沙箱中的文件，每次上传其中的一部分。因此，当上传操作因为浏览器崩溃或网络中断原因中止时，下次可以续传上一次未被上传的部分。</li></ul></li><li>视频游戏 <ul><li>FileSystem API 可以实现从服务器端下载一个或多个大的 tar 压缩包（压缩包的一种格式，但是 tar 压缩包中的文件并不是压缩文件，而是所有文件集合成的一个文件)，并且将它们解压在客户端本地文件系统中的功能。被下载的数据可以在任何操作系统中使用。</li></ul></li><li>多媒体播放编辑</li><li>邮件客户端</li><li>文件下载</li></ul><h4 id="_2-请求访问文件系统" tabindex="-1"><a class="header-anchor" href="#_2-请求访问文件系统" aria-hidden="true">#</a> 2. 请求访问文件系统</h4><p>调用window对象的 requestFileSystem方法来请求访问受到浏览器沙箱保护的本地文件系统</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>requestFileSystem <span class="token operator">=</span> window<span class="token punctuation">.</span>requestFileSystem 
<span class="token operator">||</span> window<span class="token punctuation">.</span>webkitRequestFileSystem<span class="token punctuation">;</span><span class="token comment">//就是将这两种写法都赋值给一种写法。</span>

<span class="token comment">//上面的一行是为了进行兼容。必加，不然连Chrome浏览器都创建不了文件系统。</span>
window<span class="token punctuation">.</span><span class="token function">requestFileSystem</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>size<span class="token punctuation">,</span>successCallback<span class="token punctuation">[</span><span class="token punctuation">,</span>errorCallback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参数1-type：指定所请求访问的文件系统所使用的文件存储空间的类型。取值如下， <ul><li>window.TEMPORARY( /ˈtempəreri/ 暂时的)：表请求临时的存储空间，存储在临时存储空间中的数据可以被浏览器自行删除。</li><li>window.PRESISTENT( /pərˈsɪstənt/ 永久的)：代表请求永久存储空间，存储在该空间的数据不能被浏览器在用户不知情的情况下将其清除。</li></ul></li><li>参数2-size：用于指定所请求的文件系统所使用的文件存储空间的大小（尺寸为 byte )。</li><li>参数3-successCallback：指定请求成功时所执行的回调函数，该回调函数的参数为一个FileSystem 对象，代表请求访问的文件系统对象。</li><li>参数4-errorCallback：可选，指定请求失败时执行的回调函数，该回调函数的参数为一个 FileError 对象(函数本身e)，其中存放了请求失败时的各种失败信息。</li></ul><h4 id="_3-fileerror对象" tabindex="-1"><a class="header-anchor" href="#_3-fileerror对象" aria-hidden="true">#</a> 3. FileError对象</h4><p>FileError 对象具有一个code属性，其属性值为FileSystem API中预定义的常量值，这些常量值的含义如下：</p><ul><li>e.QUOTA_EXCEEDED_ERR：文件系统所使用的存储空间的尺寸超过磁盘配额</li><li>e.NOT_FOUND_ERR：未找到文件或目录</li><li>e.SECURITY_ERR：操作不当引起安全性错误。</li><li>e.INVALID_MODIFICATION_ERR：对文件或目录所指定的操作（例如文件复制、删除、目录拷贝、目录删除等处理）不能被执行。</li><li>e.ABORT_ERR： 当前操作被终止。</li><li>e.NOT_READABLE_ERR：指定的目录或文件不可读。</li><li>e.ENCODING_ERR： 文字编码错误。</li><li>e.TYPE_MISMATCH_ERR：用户企图访问目录或文件，但是用户访问的目录事实上是一个文件或用户访问的文件事实上是一个目录。</li><li>e.PATH_EXISTS_ERR：用户指定的路径中不存在需要访问的目录或文件。</li><li>e.INVALID_STATE_ERR：指定的状态无效。</li></ul><h4 id="_4-示例-使用filesystem-api" tabindex="-1"><a class="header-anchor" href="#_4-示例-使用filesystem-api" aria-hidden="true">#</a> 4. 示例：使用FileSystem API</h4><p>打印的文件系统对象:</p><figure><img src="`+e+`" alt="9-5-1" tabindex="0" loading="lazy"><figcaption>9-5-1</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>requestFileSystem <span class="token operator">=</span> window<span class="token punctuation">.</span>requestFileSystem <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitRequestFileSystem<span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>requestFileSystem<span class="token punctuation">)</span><span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">requestFileSystem</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token constant">TEMPORARY</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">,</span> successHandler<span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;程序不支持FileSystem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">successHandler</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;文件系统创建成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">errorHandler</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;文件系统创建失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-文件系统的特性" tabindex="-1"><a class="header-anchor" href="#_5-文件系统的特性" aria-hidden="true">#</a> 5. 文件系统的特性</h4><ul><li>在 H5 中，可以实现跨域通信，但是在实现跨域通信时每一个域中可以访问的文件系统只能被该域专用，不能被其他域所访问。</li><li>存储在永久文件系统中的数据不能被浏览器在用户不知情的情况下删除，除非通过一个不需要通知用户的方法调用。而存储在临时文件系统中的数据可以被浏览器自行删除。</li><li>当应用程序中连续发出多次对文件系统的操作请求时，每一个请求都将得到响应，同时第一个请求中所保存的数据可以被之后的请求立即得到。</li></ul><h2 id="ii-申请配额" tabindex="-1"><a class="header-anchor" href="#ii-申请配额" aria-hidden="true">#</a> Ⅱ. 申请配额</h2><p>当在用户计算机中保存数据时，首先需要向用户申请一定的磁盘配额（即应用程序可以利用的磁盘空间的尺寸）。</p><p>注意：所有操作仅知道适用于Chrome，其他浏览器未知，详见Storage配额管理API。</p><h4 id="_1-向用户计算机申请磁盘配额" tabindex="-1"><a class="header-anchor" href="#_1-向用户计算机申请磁盘配额" aria-hidden="true">#</a> 1. 向用户计算机申请磁盘配额</h4><p>一共有两个方法，一个是申请临时配额，一个是申请永久配额</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//申请永久配额</span>
navigator<span class="token punctuation">.</span>webkitPersistentStorage<span class="token punctuation">.</span><span class="token function">requestQuota</span><span class="token punctuation">(</span>requestedBytes<span class="token punctuation">,</span>onInitFs<span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//申请临时配额</span>
navigator<span class="token punctuation">.</span>webkitTemporaryStorage<span class="token punctuation">.</span><span class="token function">requestQuota</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token comment">//参数同上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>requestedBytes：申请的配额大小，单位是byte。</li><li>onInitFs：申请配额成功时的回调函数，参数值是申请成功的磁盘空间尺寸。</li><li>errorHandler：申请磁盘配额失败的回调函数，参数是一个FileError对象。</li></ul><p><strong>注意事项</strong></p><ul><li>window.webkitStorageInfo.requestQuota()方法已经被弃用，旧代码里经常会出现。</li><li>申请配额成功后，下次使用该磁盘空间就不需要再次申请了。</li></ul><h4 id="_2-申请配额案例" tabindex="-1"><a class="header-anchor" href="#_2-申请配额案例" aria-hidden="true">#</a> 2. 申请配额案例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>navigator<span class="token punctuation">.</span>webkitPersistentStorage<span class="token punctuation">.</span><span class="token function">requestQuota</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">,</span>successHandler<span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">successHandler</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">errorHandler</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-查询配额" tabindex="-1"><a class="header-anchor" href="#_3-查询配额" aria-hidden="true">#</a> 3. 查询配额</h4><p>一共有两个方法，一个是查询临时配额，一个是查询永久配额。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//查询临时空间的配额</span>
navigator<span class="token punctuation">.</span>webkitTemporaryStorage<span class="token punctuation">.</span><span class="token function">queryUsageAndQuota</span><span class="token punctuation">(</span>
    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">usedBytes<span class="token punctuation">,</span>grantedBytes</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//查询成功执行的代码</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//查询失败执行的代码</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//查询永久空间的配额，参数同上</span>
navigator<span class="token punctuation">.</span>webkitPersistentStorage<span class="token punctuation">.</span><span class="token function">queryUsageAndQuota</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参数1：查询成功的回调函数，参数1是已用磁盘空间，参数2是总磁盘空间</li><li>参数2：查询失败的回调函数，参数是FileError对象。</li></ul><h2 id="iii-文件对象" tabindex="-1"><a class="header-anchor" href="#iii-文件对象" aria-hidden="true">#</a> Ⅲ. 文件对象</h2><h4 id="_1-创建文件的操作思路" tabindex="-1"><a class="header-anchor" href="#_1-创建文件的操作思路" aria-hidden="true">#</a> 1. 创建文件的操作思路</h4><p>当用户调用window.requestFilesSystem()方法请求文件系统时，如果成功，会执行一个回调函数。该回调函数中包含一个参数，他可以获取的文件系统对象。以下是打印的该参数：</p><figure><img src="`+p+'" alt="9-5-2" tabindex="0" loading="lazy"><figcaption>9-5-2</figcaption></figure><p>该文件系统对象（DOMFileSystem）包含一个root属性，属性值为一个DirectoryEntry对象，表示文件系统的根目录对象。以下是打印的该对象：</p><figure><img src="'+o+`" alt="9-5-3" tabindex="0" loading="lazy"><figcaption>9-5-3</figcaption></figure><p>通过DirectoryEntry对象的getFile方法在根目录中创建文件。注意该方法不仅能创建文件，还可以获取文件。</p><h4 id="_2-getfile方法创建-或获取-对象" tabindex="-1"><a class="header-anchor" href="#_2-getfile方法创建-或获取-对象" aria-hidden="true">#</a> 2. getFile方法创建（或获取）对象</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>object<span class="token punctuation">,</span>onInitFs<span class="token punctuation">,</span>errorhandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>filename：字符串，表示需要创建或获取的文件名。</li><li>object：为一个自定义对象，当创建文件时，必须将该对象的 create 属性值设定为 true ; 当获取文件时，必须要将该对象的 create 属性值设定为 false ; 当创建文件时，如果该文件已存在，则覆盖该文件；如果该文件已存在且被使用排他方式打开，则抛出错误。</li><li>onInitFs：一个函数，代表获取文件或创建文件成功时执行的回调函数，在回调函数中可以使用一个参数，参数值为一个FileEntry 对象，代表创建或获取成功的文件。</li><li>errorhandler：创建失败的函数，参数值为一个 FileError 对象。</li></ul><h4 id="_3-fileentry对象" tabindex="-1"><a class="header-anchor" href="#_3-fileentry对象" aria-hidden="true">#</a> 3. FileEntry对象</h4><p>该对象表示受沙箱保护的文件系统中每一个文件。该对象有remove()（删除）、moveTo()（移动）、copyTo()（复制）等方法。该对象的属性如下。</p><ul><li>isFile: 用于区分对象是否为文件，值为 true 为文件，值为 false 为目录。</li><li>isDirectory: 用于区分对象是否为目录，值为 true 为目录，值为false 为文件。</li><li>name : 该文件的文件名，包括该文件的扩展名。</li><li>fullPath : 该文件的完整路径。</li><li>filesystem :该文件所在的文件系统对象。</li></ul><h4 id="_4-创建文件示例" tabindex="-1"><a class="header-anchor" href="#_4-创建文件示例" aria-hidden="true">#</a> 4. 创建文件示例</h4><p>可能创建文件前需要进行查询与创建磁盘配额。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.请求文件系统</span>
window<span class="token punctuation">.</span>requestFileSystem <span class="token operator">=</span> window<span class="token punctuation">.</span>requestFileSystem <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitRequestFileSystem<span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">requestFileSystem</span><span class="token punctuation">(</span><span class="token constant">PERSISTENT</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">,</span>onInitFs<span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.请求文件系统成功的回调函数</span>
<span class="token keyword">function</span> <span class="token function">onInitFs</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//2.1 创建文件</span>
    e<span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token string">&quot;readme.txt&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">create</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>initFile<span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    <span class="token comment">//2.2创建文件成功时的回调函数</span>
    <span class="token keyword">function</span> <span class="token function">initFile</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//完整路径:/readme.txt,----文件名:readme.txt</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;完整路径:&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span>fullPath<span class="token operator">+</span><span class="token string">&quot;,----文件名:&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment">//3.请求文件系统失败的回调函数</span>
<span class="token keyword">function</span> <span class="token function">errorHandler</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;文件系统请求失败&quot;</span><span class="token operator">+</span> e<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-文件操作" tabindex="-1"><a class="header-anchor" href="#iv-文件操作" aria-hidden="true">#</a> Ⅳ. 文件操作</h2><h4 id="_1-filewrite-write" tabindex="-1"><a class="header-anchor" href="#_1-filewrite-write" aria-hidden="true">#</a> 1. fileWrite.write</h4><p>使用FileWriter对象执行文件的写入操作，即把二进制数据写入文件中。</p><h5 id="_1-1-filewriter对象" tabindex="-1"><a class="header-anchor" href="#_1-1-filewriter对象" aria-hidden="true">#</a> 1.1 FileWriter对象</h5><p>getFile 方法在成功时所执行的回调函数中利用文件对象(e)的createWriter方法创建 FileWriter 对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">createWriter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fileWriter</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token comment">//创建FileWriter对象成功时执行的回调函数  </span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-write方法" tabindex="-1"><a class="header-anchor" href="#_1-2-write方法" aria-hidden="true">#</a> 1.2 write方法</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fileWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//参数是Blob对象，表示要写入的二进制数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以使用FileWriter对象的writeend和error事件来监听函数执行。</p><h5 id="_1-3-写入文件实例" tabindex="-1"><a class="header-anchor" href="#_1-3-写入文件实例" aria-hidden="true">#</a> 1.3 写入文件实例</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//创建文件成功时的回调函数</span>
<span class="token keyword">function</span> <span class="token function">initFile</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;完整路径:&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span>fullPath<span class="token operator">+</span><span class="token string">&quot;,----文件名:&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span><span class="token function">createWriter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;fileWriter对象&quot;</span><span class="token operator">+</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function-variable function">onwriteend</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">g</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;写文件操作结束&quot;</span><span class="token operator">+</span>g<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">g</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;写文件操作失败&quot;</span><span class="token operator">+</span>g<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-添加数据" tabindex="-1"><a class="header-anchor" href="#_2-添加数据" aria-hidden="true">#</a> 2. 添加数据</h4><p>想文件添加数据，与write方法写入数据，操作类似，区别在于，添加数据多了一行代码，使用了seek()方法，将文件的读写位置设置到文件底部。</p><h5 id="_2-1-seek-方法" tabindex="-1"><a class="header-anchor" href="#_2-1-seek-方法" aria-hidden="true">#</a> 2.1 seek()方法</h5><p>参数是距离文件开头的距离，单位是字节。如果是简单的追加，使用fileWriter对象的length属性即可。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fileWriter<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>fileWriter<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-2-示例" tabindex="-1"><a class="header-anchor" href="#_2-2-示例" aria-hidden="true">#</a> 2.2 示例</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>f<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//见写入文件的代码，多了这一行。</span>
<span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
f<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-读取文件" tabindex="-1"><a class="header-anchor" href="#_3-读取文件" aria-hidden="true">#</a> 3. 读取文件</h4><p>可以使用FileReader对象读取文件。<br> 当使用getFile()方法获取对象后，可以使用FileEntry文件对象的File方法获取文件，然后在获取文件成功的回调函数中使用FileReader读取文件。</p><h5 id="_3-1-file-方法" tabindex="-1"><a class="header-anchor" href="#_3-1-file-方法" aria-hidden="true">#</a> 3.1 file()方法</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fileEntry<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span>
    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//参数是成功获取的文件</span>
        <span class="token comment">//获取文件成功时所执行的回调函数</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2" tabindex="-1"><a class="header-anchor" href="#_3-2" aria-hidden="true">#</a> 3.2</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//获取文件成功时的回调函数</span>
<span class="token keyword">function</span> <span class="token function">initFile</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;完整路径:&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span>fullPath<span class="token operator">+</span><span class="token string">&quot;,----文件名:&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        reader<span class="token punctuation">.</span><span class="token function-variable function">onloadend</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">g</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;onloaded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;result&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-复制文件" tabindex="-1"><a class="header-anchor" href="#_4-复制文件" aria-hidden="true">#</a> 4. 复制文件</h4><p>所谓复制文件就是将磁盘上的文件复制到受浏览器沙箱保护的文件系统中。</p><h5 id="_4-1-原理" tabindex="-1"><a class="header-anchor" href="#_4-1-原理" aria-hidden="true">#</a> 4.1 原理</h5><p>先用file对象引用磁盘文件。再用fileWriter.write(file)的方式将其写入文件系统。file也可以是Blob。</p><h5 id="_4-2-示例" tabindex="-1"><a class="header-anchor" href="#_4-2-示例" aria-hidden="true">#</a> 4.2 示例</h5><p>点击文件域的上传文件，获得本地文件，再点击复制文件按钮触发doCopy进行文件的复制。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">doCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//1.先访问文件域的文件</span>
    <span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myfile&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//2.请求文件系统</span>
    window<span class="token punctuation">.</span>requestFileSystem <span class="token operator">=</span> window<span class="token punctuation">.</span>requestFileSystem <span class="token operator">||</span> 
            window<span class="token punctuation">.</span>webkitRequestFileSystem<span class="token punctuation">;</span>
    window<span class="token punctuation">.</span><span class="token function">requestFileSystem</span><span class="token punctuation">(</span><span class="token constant">PERSISTENT</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span>onInitFs<span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3.请求文件系统成功的回调函数</span>
    <span class="token keyword">function</span> <span class="token function">onInitFs</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.1 使用getFile创建文件，注意文件名与文件域的相同</span>
        e<span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">create</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>initFile<span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
        <span class="token comment">//3.2 创建文件成功时的回调函数</span>
        <span class="token keyword">function</span> <span class="token function">initFile</span><span class="token punctuation">(</span><span class="token parameter">fileEntry</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//3.2.1 获得FileWriter对象,用writer方法将文件域的文件写入文件系统</span>
            fileEntry<span class="token punctuation">.</span><span class="token function">createWriter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fileWriter</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                fileWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//3.2.3对写入的结果进行监听</span>
                fileWriter<span class="token punctuation">.</span><span class="token function-variable function">onwriteend</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;info&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> 
                                <span class="token string">&quot;复制文件成功,文件名为&quot;</span><span class="token operator">+</span>file<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
                fileWriter<span class="token punctuation">.</span>onerror <span class="token operator">=</span> errorHandler<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token comment">//4.所有失败的回调函数</span>
    <span class="token keyword">function</span> <span class="token function">errorHandler</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-删除文件" tabindex="-1"><a class="header-anchor" href="#_5-删除文件" aria-hidden="true">#</a> 5. 删除文件</h4><p>可以使用FileEntry对象的remove()方法，删除该文件(在文件系统中获取的文件)。</p><h5 id="_5-1-删除操作的步骤" tabindex="-1"><a class="header-anchor" href="#_5-1-删除操作的步骤" aria-hidden="true">#</a> 5.1 删除操作的步骤</h5><p>使用getFile获取要删除的文件（需要提前提供文件名），在获取文件成功的回调函数中，调用文件对象的remove方法删除获取的文件。</p><h5 id="_5-2-remove-方法" tabindex="-1"><a class="header-anchor" href="#_5-2-remove-方法" aria-hidden="true">#</a> 5.2 remove()方法</h5><p>该方法有两个参数，1个是删除成功的回调函数，一个是删除失败的回调函数。</p><h5 id="_5-3-删除示例" tabindex="-1"><a class="header-anchor" href="#_5-3-删除示例" aria-hidden="true">#</a> 5.3 删除示例</h5><p>删除一个为readme.txt的文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">var</span> filename <span class="token operator">=</span> <span class="token string">&quot;readme.txt&quot;</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>requestFileSystem <span class="token operator">=</span> window<span class="token punctuation">.</span>requestFileSystem <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitRequestFileSystem<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">removeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">requestFileSystem</span><span class="token punctuation">(</span><span class="token constant">PERSISTENT</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span>onInitFs<span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">onInitFs</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">create</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>getOk<span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">getOk</span><span class="token punctuation">(</span><span class="token parameter">fileEntry</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        fileEntry<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;删除文件成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">errorHandler</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="v-目录对象" tabindex="-1"><a class="header-anchor" href="#v-目录对象" aria-hidden="true">#</a> Ⅴ. 目录对象</h2><p>DirectoryEntry代表一个目录对象，由FileSystem对象的root属性获取。</p><figure><img src="`+c+`" alt="9-5-4" tabindex="0" loading="lazy"><figcaption>9-5-4</figcaption></figure><h4 id="_1-directoryentry对象的属性" tabindex="-1"><a class="header-anchor" href="#_1-directoryentry对象的属性" aria-hidden="true">#</a> 1. DirectoryEntry对象的属性</h4><ul><li>isFile : 用于区分对象是否为文件，值为 true 为文件；值为 false 为目录。</li><li>isDirectory : 用于区分对象是否为目录，值为 true为目录；值为false 为文件。</li><li>name : 属性值为该目录的目录名。</li><li>fullPath : 属性值为该目录的完整路径。</li><li>filesystem : 属性值为该目录所在的文件系统对象</li></ul><h4 id="_2-使用getdirectory-创建目录" tabindex="-1"><a class="header-anchor" href="#_2-使用getdirectory-创建目录" aria-hidden="true">#</a> 2. 使用getDirectory()创建目录</h4><p>可以使用DirectoryEntry对象的getDirctory()</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getDirctory</span><span class="token punctuation">(</span>directoryname<span class="token punctuation">,</span>object<span class="token punctuation">,</span>onIniFs<span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong><br> 参数与getFile类似，只是这里全身针对目录的，回调函数的参数也是目录对象。</p><ul><li>directoryname：字符串，表示需要创建或获取的目录名。</li><li>object：为一个自定义对象，当创建目录时，必须将该对象的 create 属性值设定为 true ; 当获取目录时，必须要将该对象的 create 属性值设定为 false ; 当创建目录时，如果该目录已存在，则覆盖该文件；如果该目录已存在且被使用排他方式打开，则抛出错误。</li><li>onInitFs：一个函数，代表获取目录或创建目录成功时执行的回调函数，在回调函数中可以使用一个参数，参数值为一个DirectoryEntry 对象，代表创建或获取成功的目录。</li><li>errorHandler：创建失败的函数，参数值为一个 FileError 对象。</li></ul><h4 id="_3-示例-创建子目录" tabindex="-1"><a class="header-anchor" href="#_3-示例-创建子目录" aria-hidden="true">#</a> 3. 示例-创建子目录</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>requestFileSystem <span class="token operator">=</span> window<span class="token punctuation">.</span>requestFileSystem <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitRequestFileSystem<span class="token punctuation">;</span>
<span class="token keyword">var</span> directoryname <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">creatDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">requestFileSystem</span><span class="token punctuation">(</span><span class="token constant">PERSISTENT</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">,</span>onInitFs<span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">onInitFs</span><span class="token punctuation">(</span><span class="token parameter">fs</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        fs<span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">getDirectory</span><span class="token punctuation">(</span>directoryname<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">create</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">DirEntry</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;目录创建成功&quot;</span><span class="token operator">+</span>DirEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">errorHandler</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token operator">+</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-示例-创建递归子目录" tabindex="-1"><a class="header-anchor" href="#_4-示例-创建递归子目录" aria-hidden="true">#</a> 4. 示例-创建递归子目录</h4><p>注意：如果在A目录下创建B目录，而A目录不存在时，会直接报错。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">createDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>创建子目录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">//1.在创建文件系统成功的回调函数中，调用创建目录的自制函数。</span>
<span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token string">&#39;one/two/three&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> realPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>requestFileSystem <span class="token operator">=</span> window<span class="token punctuation">.</span>requestFileSystem <span class="token operator">||</span> 
                            window<span class="token punctuation">.</span>webkitRequestFileSystem<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">createDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">requestFileSystem</span><span class="token punctuation">(</span><span class="token constant">PERSISTENT</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fs</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">createOneDir</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>root<span class="token punctuation">,</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//2.创建目录的自制函数</span>
<span class="token keyword">function</span> <span class="token function">createOneDir</span><span class="token punctuation">(</span><span class="token parameter">rootDirEntry<span class="token punctuation">,</span>realPath</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//2.1 创建第一层目录realPath[0];</span>
    rootDirEntry<span class="token punctuation">.</span><span class="token function">getDirectory</span><span class="token punctuation">(</span>realPath<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">create</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                              succDir<span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//3.继续递归进行创建函数</span>
<span class="token keyword">function</span> <span class="token function">succDir</span><span class="token punctuation">(</span><span class="token parameter">dirEntry</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//3.2 将创建的第一层目录从realPaht数组中剔除</span>
    realPath <span class="token operator">=</span> realPath<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dirEntry<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">&quot;目录已经创建&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3.1判断剩余未创建的目录是否为0</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>realPath<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//3.2 不为0进行递归创建目录</span>
        <span class="token function">createOneDir</span><span class="token punctuation">(</span>dirEntry<span class="token punctuation">,</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;目录创建全部完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//4.错误回调函数</span>
<span class="token keyword">function</span> <span class="token function">errorHandler</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vi-目录操作" tabindex="-1"><a class="header-anchor" href="#vi-目录操作" aria-hidden="true">#</a> Ⅵ. 目录操作</h2><h4 id="_1-读取目录" tabindex="-1"><a class="header-anchor" href="#_1-读取目录" aria-hidden="true">#</a> 1. 读取目录</h4><p>注意：目前无法进行递归读取目录，只能读取当前目录。</p><h5 id="_1-1-读取目录的操作步骤" tabindex="-1"><a class="header-anchor" href="#_1-1-读取目录的操作步骤" aria-hidden="true">#</a> 1.1 读取目录的操作步骤</h5><p>使用DirectoryEntry（fs.root）对象的createReader()方法创建DirectoryReader对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> dirReader <span class="token operator">=</span> fs<span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">createReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用DirectoryReader对象的readEntries方法读取目录</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//第一个参数是读取正确的回调函数，该函数有一个参数包含了所有目录和文件的集合。</span>
dirReader<span class="token punctuation">.</span><span class="token function">readEntries</span><span class="token punctuation">(</span>s_callback<span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-循环读取" tabindex="-1"><a class="header-anchor" href="#_1-2-循环读取" aria-hidden="true">#</a> 1.2 循环读取</h5><p>不能保证一次就能读取出该目录中的所有目录及文件，应该多次使用readEntries方法，一直到该方法的e.length的长度为0为止，表示不再读出目录或文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//0.读取目录的函数</span>
<span class="token keyword">function</span> <span class="token function">readDir</span><span class="token punctuation">(</span><span class="token parameter">fs</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//1.获取dirReader对象</span>
    <span class="token keyword">var</span> dirReader <span class="token operator">=</span> fs<span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">createReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2.将读取目录的函数赋值给变量，以便多次调用，层层读值。</span>
    <span class="token keyword">var</span> <span class="token function-variable function">readEntries</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//2.使用dirReader对象的readEntries方法读取目录</span>
        dirReader<span class="token punctuation">.</span><span class="token function">readEntries</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//循环读取文件夹中的数据</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//集合不为0，先循环列出该集合的数据，然后继续读</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>e<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token comment">//列出前先判断是文件还是目录</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isFile<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;文件&quot;</span><span class="token operator">+</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;目录&quot;</span><span class="token operator">+</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> 
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token function">readEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token comment">//读不到数据了，读取完毕。</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;读取完毕&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">readEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">errorHandler</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-删除目录" tabindex="-1"><a class="header-anchor" href="#_2-删除目录" aria-hidden="true">#</a> 2. 删除目录</h4><h5 id="_2-1-remove" tabindex="-1"><a class="header-anchor" href="#_2-1-remove" aria-hidden="true">#</a> 2.1 remove()</h5><p>使用DirectoryEntry对象的remove()方法可以删除目录。注意只能删除空目录,否则会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//参数1是成功时的回调函数。</span>
dirEntry<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s_callback<span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-removerecursively" tabindex="-1"><a class="header-anchor" href="#_2-2-removerecursively" aria-hidden="true">#</a> 2.2 removeRecursively()</h5><p>与remove()除了功能外其他的完全相同，该方法能删除非空目录。</p><h4 id="_3-复制目录" tabindex="-1"><a class="header-anchor" href="#_3-复制目录" aria-hidden="true">#</a> 3. 复制目录</h4><p>可以使用 FileEntry 对象（代表一个文件）或 DirectoryEntry 对象（代表一个目录）的 copyTo 方法将一个目录中的文件或子目录复制到另一个目录中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fileEntry<span class="token operator">/</span>diEntry<span class="token punctuation">.</span><span class="token function">copyto</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span>newName<span class="token punctuation">,</span>s_success<span class="token punctuation">,</span>errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数1：DirectoryEntry 对象，用于指定将文件或目录复制到哪个目标目录中 ；</li><li>参数2：字符串，指定复制后的文件名或目录名；</li><li>参数3：复制成功的回调函数。</li></ul><h4 id="_4-移动和重命名目录" tabindex="-1"><a class="header-anchor" href="#_4-移动和重命名目录" aria-hidden="true">#</a> 4. 移动和重命名目录</h4><p>跟复制几乎一样，前者是复制过去，后者是剪切过去，操作和参数也一模一样。<br> 采用moveTo()方法，该方法与copyTo()完全一样。</p><h4 id="_5-filesystem-url" tabindex="-1"><a class="header-anchor" href="#_5-filesystem-url" aria-hidden="true">#</a> 5. filesystem:URL</h4><p>可以将filesystem开头的URL（本地文件系统url）用在页面上元素的href和src属性中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> fileSystemURL <span class="token operator">=</span> fileEntry<span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> fileSystemURL<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-1-根据filesystemurl获得fileentry" tabindex="-1"><a class="header-anchor" href="#_5-1-根据filesystemurl获得fileentry" aria-hidden="true">#</a> 5.1 根据fileSystemURL获得FileEntry</h5><p>可以通过window对象的resolveLocalFileSystemURL()方法获取FileEntry。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">resolveLocalFileSystemURL</span><span class="token punctuation">(</span>fileSystemURL<span class="token punctuation">,</span>s_calback<span class="token punctuation">,</span>errorHandler <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数1 表示一个带有FileSystem前缀的URL。</li><li>参数2 是函数成功的回调函数，参数e的值就是得到的文件对象。</li></ul>`,134),u=[l];function r(k,d){return s(),a("div",null,u)}const m=n(i,[["render",r],["__file","9-5.FileSystem.html.vue"]]);export{m as default};
