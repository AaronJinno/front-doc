import{_ as o,r as c,o as d,c as l,d as p,w as s,e as r,b as n,a}from"./app-ba294a04.js";const u="/front-doc/img/vue/vuepress/2-5-1.jpg",h="/front-doc/img/vue/vuepress/2-5-2.jpg",g="/front-doc/img/vue/vuepress/2-5-3.jpg",v="/front-doc/img/vue/vuepress/2-5-4.jpg",m="/front-doc/img/vue/vuepress/2-5-5.jpg",k={},b=r('<h2 id="代码块处理" tabindex="-1"><a class="header-anchor" href="#代码块处理" aria-hidden="true">#</a> 代码块处理</h2><h4 id="_1-基本语法" tabindex="-1"><a class="header-anchor" href="#_1-基本语法" aria-hidden="true">#</a> 1. 基本语法</h4><p>与普通的markdown语法一样，也是```包裹，并指定代码所属语言。<br><img src="'+u+'" alt="2-5-1" loading="lazy"></p><h4 id="_2-行高亮" tabindex="-1"><a class="header-anchor" href="#_2-行高亮" aria-hidden="true">#</a> 2. 行高亮</h4><p>以在代码块添加行数范围标记，来为对应代码行进行高亮。</p><p>注意：代码本身就是高亮的，这里的高亮指的是，特定行的背景加深显示。</p><p>如下：设置第1行和6到8行进行行高亮显示。</p><figure><img src="'+h+`" alt="2-5-2" tabindex="0" loading="lazy"><figcaption>2-5-2</figcaption></figure><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defaultTheme<span class="token punctuation">,</span> defineUserConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuepress&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">&#39;你好， VuePress&#39;</span><span class="token punctuation">,</span>

  theme<span class="token operator">:</span> <span class="token function">defaultTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    logo<span class="token operator">:</span> <span class="token string">&#39;https://vuejs.org/images/logo.png&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="行数范围写法" tabindex="-1"><a class="header-anchor" href="#行数范围写法" aria-hidden="true">#</a> 行数范围写法</h5><ul><li>行数范围： <code>{5-8}</code></li><li>多个单行： <code>{4,7,9}</code></li><li>组合： <code>{4,7-13,16,23-27,40}</code></li></ul><h4 id="_3-行号" tabindex="-1"><a class="header-anchor" href="#_3-行号" aria-hidden="true">#</a> 3. 行号</h4><p>默认是有行号的，可以设置禁用。<br> 在代码块添加 <code>:line-numbers / :no-line-numbers</code>标记来覆盖配置项中的设置。</p><h4 id="_4-导入代码块" tabindex="-1"><a class="header-anchor" href="#_4-导入代码块" aria-hidden="true">#</a> 4. 导入代码块</h4><p>将外部的代码文件中的代码直接导入当当前的markdown文件中。<br> 相当于复制了代码文件中的代码，并放入当前页创建的代码块中（会自动识别代码所属的语言）。</p><h5 id="_4-1-基本使用" tabindex="-1"><a class="header-anchor" href="#_4-1-基本使用" aria-hidden="true">#</a> 4.1 基本使用</h5><p>默认是将代码文件中所有的代码都导入。</p><p>示例：在docs目录上一级有一个code目录，code目录下有一个a.js文件，里面有6行代码</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@[code](../code/a.js)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>效果：a.js中的所有代码都被引入了当前markdown文件中。</p><figure><img src="`+g+`" alt="2-5-3" tabindex="0" loading="lazy"><figcaption>2-5-3</figcaption></figure><h5 id="_4-2-高级使用" tabindex="-1"><a class="header-anchor" href="#_4-2-高级使用" aria-hidden="true">#</a> 4.2 高级使用</h5><ul><li>导入一部分代码：<code>@[code{1-10}](../foo.js)</code>(仅导入第 1 行至第 10 行)</li><li>行高亮：需要在文件扩展名后面通过{}指定行高亮，注意code后面的{}指定的是引入的代码行数。 <ul><li><code>@[code js{1}](../foo.js)</code></li></ul></li><li>指定代码语言：代码语言会根据文件扩展名进行推断，但建议显式指定 <ul><li><code>@[code js](../foo.js)</code></li></ul></li></ul><h5 id="_4-3-复杂示例" tabindex="-1"><a class="header-anchor" href="#_4-3-复杂示例" aria-hidden="true">#</a> 4.3 复杂示例</h5><p>如下：引入../foo.js文件中代码的3~10行，并指定该文件以JS渲染，且引入后的第三行高亮，并取消行号。</p><h2 id="md中使用vue" tabindex="-1"><a class="header-anchor" href="#md中使用vue" aria-hidden="true">#</a> md中使用Vue</h2><h4 id="_1-模板语法" tabindex="-1"><a class="header-anchor" href="#_1-模板语法" aria-hidden="true">#</a> 1. 模板语法</h4><p>Markdown 中允许直接使用 HTML，Vue 模板语法是和 HTML 兼容的。</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>i in 3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>span: {{i}} ;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
1 + 1 = {{1+1}}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>渲染效果：</p><figure><img src="`+v+`" alt="2-5-4" tabindex="0" loading="lazy"><figcaption>2-5-4</figcaption></figure><h4 id="_2-组件" tabindex="-1"><a class="header-anchor" href="#_2-组件" aria-hidden="true">#</a> 2. 组件</h4><p>可以在 Markdown 中直接使用 Vue 组件。</p><p>以使用Badge示例：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Badge</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Hello<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-注意事项" tabindex="-1"><a class="header-anchor" href="#_3-注意事项" aria-hidden="true">#</a> 3. 注意事项</h4><p>非标准的 HTML 标签不会被 Vue 模板编译器识别成原生 HTML 标签。</p><p>相反，Vue 会尝试将这些标签解析为 Vue 组件，而显然这些组件通常是不存在的。</p><h2 id="codetabs-分组" tabindex="-1"><a class="header-anchor" href="#codetabs-分组" aria-hidden="true">#</a> codetabs：分组</h2><p>对代码进行分组（选项卡），配置中默认是开启的。</p><p>本质就是选项卡，但它是专门为代码块构建的，代码选项卡只会渲染 @tab 标记后的代码块，其他 Markdown 内容将被忽略</p><h4 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h4><p>容器类型为：code-tabs<br> 其他和选项卡语法一直，只是内容里直解析代码块。</p><h4 id="_2-示例" tabindex="-1"><a class="header-anchor" href="#_2-示例" aria-hidden="true">#</a> 2. 示例</h4><figure><img src="`+m+'" alt="2-5-5" tabindex="0" loading="lazy"><figcaption>2-5-5</figcaption></figure>',45),_=a("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[a("pre",{class:"language-javascript"},[a("code",null,[n("console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"hello"'),a("span",{class:"token punctuation"},")"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),f=a("div",{class:"language-html line-numbers-mode","data-ext":"html"},[a("pre",{class:"language-html"},[a("code",null,[a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),n("h1")]),a("span",{class:"token punctuation"},">")]),n("haha"),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"</"),n("h1")]),a("span",{class:"token punctuation"},">")]),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1);function x(j,w){const i=c("CodeTabs");return d(),l("div",null,[b,p(i,{id:"169",data:[{id:"js代码"},{id:"html代码"}]},{title0:s(({value:e,isActive:t})=>[n("js代码")]),title1:s(({value:e,isActive:t})=>[n("html代码")]),tab0:s(({value:e,isActive:t})=>[_]),tab1:s(({value:e,isActive:t})=>[f]),_:1})])}const V=o(k,[["render",x],["__file","2-5.代码处理.html.vue"]]);export{V as default};
