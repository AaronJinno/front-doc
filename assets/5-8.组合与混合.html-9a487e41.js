import{_ as n,o as s,c as a,e as t}from"./app-c07941ad.js";const p={},e=t(`<h2 id="i-组合图形" tabindex="-1"><a class="header-anchor" href="#i-组合图形" aria-hidden="true">#</a> Ⅰ. 组合图形</h2><p>将两块图形进行组合，并且手动决定以哪种方式进行组合（默认在一个图形上绘制另一个图像，先绘制的会被覆盖）。</p><h4 id="_1-globalcompositeoperation" tabindex="-1"><a class="header-anchor" href="#_1-globalcompositeoperation" aria-hidden="true">#</a> 1. globalCompositeOperation</h4><p>context的globalCompositeOpeartion属性可以自行决定图形的组合方式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context<span class="token punctuation">.</span>globalCompositeOperation<span class="token operator">=</span>type
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-type的取值" tabindex="-1"><a class="header-anchor" href="#_2-type的取值" aria-hidden="true">#</a> 2. type的取值</h4><ul><li>source-over ：(默认值）表示新图形覆盖在原有图形之上。</li><li>destination-over：表示在原有图形之下绘制新图形。</li><li>source-in：新图形与原有图形做 in 运算，只显示新图形中与原有图形相重叠的部分</li><li>destination-in：原有图形与新图形做 in 运算，只显示原有图形中与新图形相重叠的部分。</li><li>source-out：新图形与原有图形做 out 运算，只显示新图形中与原有图形不重叠的部分。</li><li>destination-out：原有图形与新图形做 out 运算，显示原有图形中与新图形不重叠的部分。</li><li>source-atop：只绘制新图形中与原有图形相重叠的部分及未被重叠覆盖的原有图形。</li><li>destination-atop：只绘制原有图形中被新图形重叠覆盖的部分与新图形的其他部分。</li><li>lighter：原有图形与新图形均绘制，重叠部分做加色处理。</li><li>xor 只绘制新图形中与原有图形不重叠的部分，重叠部分变成透明。</li><li>copy只绘制新图形，原有图形中未与新图形重叠的部分变成透明。<br> 如果指定的 type 不在这几个字符串当中，则按默认方式组合图形。</li></ul><h4 id="_3-多种type组合示例" tabindex="-1"><a class="header-anchor" href="#_3-多种type组合示例" aria-hidden="true">#</a> 3. 多种type组合示例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByld</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>canvas <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> oprtns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span> 
        <span class="token string">&quot;source-atop &quot;</span><span class="token punctuation">,</span><span class="token string">&quot;source-in &quot;</span><span class="token punctuation">,</span><span class="token string">&quot;source-out&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;source-over&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;destination-atop &quot;</span><span class="token punctuation">,</span><span class="token string">&quot;destination-in&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;destination-out&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;destination-over&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;lighter &quot;</span><span class="token punctuation">,</span><span class="token string">&quot;copy&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;xor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>  
    <span class="token comment">//绘制原有图形(蓝色长方形)</span>
    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置组合方式，从组合的参数数组中挑选组合方式 ，此处因为i是8,</span>
    <span class="token comment">//所以选择oprtns数组中第9(数组从0开始计算个组合方 式 lighter</span>
    context<span class="token punctuation">.</span>globalCompositeOperation <span class="token operator">=</span> oprtns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 设 置 新 图 形 （红 色 圆 形 ）</span>
    context<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-混合图像" tabindex="-1"><a class="header-anchor" href="#ii-混合图像" aria-hidden="true">#</a> Ⅱ. 混合图像</h2><p>指使用某种数学公式将两幅图像混合在一起。图像混合有些类似于对一幅图像使用一定的透明度后将其放置在另一幅图像上，图像混合技术能够实现比透明度更好的混合效果。</p><h4 id="_1-解释" tabindex="-1"><a class="header-anchor" href="#_1-解释" aria-hidden="true">#</a> 1. 解释</h4><p>放置于底层的图像像素颜色称为基色，放置于上层的图像像素颜色称为混合色，将这两种像素颜色按一定的计算公式计算后的像素颜色称为结果色，对合成后的图像像素应用结果色</p><h4 id="_2-混合模式" tabindex="-1"><a class="header-anchor" href="#_2-混合模式" aria-hidden="true">#</a> 2. 混合模式</h4><p>需要将globalCompositeOperation 属性值设置为以下几个字符串值之一</p><ul><li>normal (默认值)：正常模式，不混合</li><li>darken : 变暗模式，逐像素对比基色与混合色，保留较深的颜色，去除较浅的颜色</li><li>lighten : 变亮模式，逐像素对比基色与混合色，保留较浅的颜色，去除较深颜色</li><li>multiply : 正片叠底模式，逐像素对比基色与混合色，将基色的灰度级与混合色的灰度级进行乘法计算，获得灰度级更低的颜色而成为合成后的颜色。任何颜色与黑色相乘得到黑色，任何颜色与白色相乘则保持颜色不变。与变暗混合模式不同，这种混合模式在变暗图像时图像暗部区域过渡很平缓，有利于保持原始图像的轮廓与图像中的阴影部分。</li><li>screen :滤色模式。与正片叠底模式相反，滤色模式将上下两层图层像素颜色的灰度级进行乘法计算，获得灰度级更高的颜色而成为合成后的颜色，图层合成后的效果简单地说是高灰阶的像素显现而低灰阶不显现（即浅色出现，深色不出现)，产生的图像更加明亮。</li><li>color - burn : 颜色加深模式。使用这种模式时，会使图像颜色变得更暗，混合色越暗，效果越细腻。让图像颜色更暗，有点类似于正片叠底，但不同的是，它会根据混合色相应增加图像对比度。与白色混合没有任何效果。</li><li>color - dodge : 颜色减淡模式。使用这种模式时，使图像颜色变得更亮，混合色越亮，效果越细腻。与颜色加深模式刚好相反，通过降低对比度，加亮底层颜色来反映混合色彩。和黑色混合没有任何效果。</li><li>hard - light : 强光模式。对两幅图像进行逐像素比较，如果混合色的灰度级小于等于0.5,则采用正片叠底模式，否则采用滤色模式（不同像素所采用的模式可能不同）。产生的效果就好像为图像应用强烈的聚光灯一样。如果用纯黑或者纯白进行混合，得到的也将是纯黑或者纯白。</li><li>soft - light : 将混合色以柔光的方式混合到基色中，当基色的灰阶趋于高或低，则会调整颜色合成结果的阶调趋于中间的灰阶调，而获得色彩较为柔和的合成效果。形成的结果是：图像的中亮色调区域变得更亮，暗色区域变得更暗，图像反差增大类似于柔光灯的照射图像的效果。变暗还是提亮画面颜色，取决于混合色信息。如果混合色的灰度级大于0.5,基色会变亮。如果混合色的灰度级低于0.5,基色会变暗。</li><li>overlay : 实现叠加模式，对两幅图像进行逐像素比较，如果基色的灰度级小于等于0.5,则采用正片叠底模式，否则采用滤色模式（不同像素所采用的模式可能不同）。一般来说，进行叠加模式的图像混合后中间色调均会产生变化，但高亮色和暗色基本保持不变，因此，基色的高光与阴影部分的亮度细节就会被保留。其效果与强光模式正好相反。</li><li>difference : 实现差值模式，将混合色与基色的 RGB 值中每个值分别进行比较，用高值减去低值作为合成后的颜色。所以这种模式也常使用，白色与任何颜色混合得到反相色，黑色与任何颜色混合后颜色不变。</li><li>exclusion : 实现排除模式，与差值模式的作用类似，只是排除模式的结果色对比度没有差值模式强。白色与基色混合得到基色补色，黑色与基色混合得到基色。</li></ul><h4 id="_3-代码示例" tabindex="-1"><a class="header-anchor" href="#_3-代码示例" aria-hidden="true">#</a> 3. 代码示例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByld</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>canvas <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d &#39;</span><span class="token punctuation">)</span>；
    context<span class="token punctuation">.</span> globalCompositeOperation <span class="token operator">=</span><span class="token string">&quot;darken&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    image<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&quot;bg.jpg&quot;</span><span class="token punctuation">;</span>
    image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        context<span class="token punctuation">.</span><span class="token function">drawlmage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> image2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        image2<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&quot;person .jpg&quot;</span><span class="token punctuation">;</span>
        image2<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function">drawlmage</span><span class="token punctuation">(</span>image2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>         
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","5-8.组合与混合.html.vue"]]);export{r as default};
