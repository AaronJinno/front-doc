import{_ as n,o as a,c as s,e}from"./app-351da1f5.js";const p={},t=e(`<p>let命令类似于var，ES6新增，用于声明变量，只在let命令所在的代码块内有效。</p><p>let命令有很多自己的特性，这些特性保障了代码在运行时不出错，建议let代替var。</p><h4 id="_1-基本用法" tabindex="-1"><a class="header-anchor" href="#_1-基本用法" aria-hidden="true">#</a> 1. 基本用法</h4><p>let和var分别都可以用来声明变量，不过在代码块之外，只能调用var声明的变量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token keyword">let</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
a <span class="token comment">//a is not defined.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-1-let声明格式" tabindex="-1"><a class="header-anchor" href="#_1-1-let声明格式" aria-hidden="true">#</a> 1.1 let声明格式</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a<span class="token punctuation">;</span>
<span class="token keyword">let</span> b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>
<span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>g <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>h <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-let-特性" tabindex="-1"><a class="header-anchor" href="#_1-2-let-特性" aria-hidden="true">#</a> 1.2 let 特性</h5><ul><li>变量不能重复声明</li><li>块级作用域</li><li>不存在变量提升</li><li>不影响作用域链：也就是块级作用域的子作用域可以找到该作用域的元素。</li></ul><h4 id="_2-let与var的for循环" tabindex="-1"><a class="header-anchor" href="#_2-let与var的for循环" aria-hidden="true">#</a> 2. let与var的for循环</h4><p>for循环的计数器，很合适使用let命令，而不是var命令。</p><h5 id="_2-1-在for循环中使用var" tabindex="-1"><a class="header-anchor" href="#_2-1-在for循环中使用var" aria-hidden="true">#</a> 2.1 在for循环中使用var</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出的是10，无论i等于几，这里输出的都是10.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-在for循环中使用let" tabindex="-1"><a class="header-anchor" href="#_2-2-在for循环中使用let" aria-hidden="true">#</a> 2.2 在for循环中使用let</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-var与let的对比" tabindex="-1"><a class="header-anchor" href="#_2-3-var与let的对比" aria-hidden="true">#</a> 2.3 var与let的对比</h5><div class="hint-container info"><p class="hint-container-title">说明</p><p>首先：方法是必须先声明，再调用的，也就是说，调用方法时，<code>a[n]</code>已经声明好了。<br> 也就是说，我们能调用<code>a[9]</code>，是因为<code>a[9]</code>已经声明好了，既然<code>a[9]</code>已经声明好了，就说明，我们再调用方法的时候，其实循环就已经走完了。该循环的意义就是批量声明方法，因为我们并没有直接在循环内进行调用。</p></div><ul><li>var: var是全局定义变量的，var i 最终只有有唯一的一个i，已知循环已经走完了，所有这个时候，i就是他的最大值10；因此在调用函数时，无论传什么值，结果都是10.</li><li>let: let是有块状作用域的，每个let i 都在自己的块内，彼此互相不覆盖。也就是定义的10个函数，彼此在各种的块状区域，每个区域都有一个独立的i，所以调用的时候，结果都是独立的。</li></ul><p>独立的块，let i 是怎么循环累进的呢？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础上进行计算。</p><p>另外，for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p><h4 id="_3-不存在变量提升" tabindex="-1"><a class="header-anchor" href="#_3-不存在变量提升" aria-hidden="true">#</a> 3. 不存在变量提升</h4><p>变量提升：即变量可以在声明之前使用，值为undefined。</p><p>var是存在变量提升的，而let就不存在，如果let在声明前调用，将报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出undefined</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错ReferenceError</span>
<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-暂时性死区" tabindex="-1"><a class="header-anchor" href="#_4-暂时性死区" aria-hidden="true">#</a> 4. 暂时性死区</h4><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。在代码块内，使用let命令声明变量之前，该变量都是不可用的。在语法上，称为“暂时性死区”。</p><h5 id="_4-1-示例" tabindex="-1"><a class="header-anchor" href="#_4-1-示例" aria-hidden="true">#</a> 4.1 示例</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tmp <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span> <span class="token comment">//报错： ReferenceError</span>
  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><h5 id="_4-2-解析" tabindex="-1"><a class="header-anchor" href="#_4-2-解析" aria-hidden="true">#</a> 4.2 解析</h5><p>也就是在let变量所在的区块中，该变量声明之前的区域都属于改变了的&quot;死区&quot;,只要用到该变量就会报错，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> x<span class="token punctuation">;</span> <span class="token comment">//报错： ReferenceError</span>
<span class="token keyword">let</span> x<span class="token punctuation">;</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
<span class="token keyword">typeof</span> x<span class="token punctuation">;</span> <span class="token comment">//x根本没有声明，直接使用，反而不会报错：返回undefined</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">x <span class="token operator">=</span> y<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错,因为声明x=y时，y可能不存在。</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment">//报错： ReferenceError: x is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-不允许重复声明" tabindex="-1"><a class="header-anchor" href="#_5-不允许重复声明" aria-hidden="true">#</a> 5. 不允许重复声明</h4><p>let不允许在相同作用域内，重复声明同一个变量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 报错</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">===</span><span class="token operator">===</span>
<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 报错</span>
<span class="token punctuation">}</span>
<span class="token operator">===</span><span class="token operator">==</span>
<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> arg<span class="token punctuation">;</span> <span class="token comment">//不能在函数内部重新声明参数。</span>
<span class="token punctuation">}</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),o=[t];function c(l,i){return a(),s("div",null,o)}const u=n(p,[["render",c],["__file","1-2.let.html.vue"]]);export{u as default};
