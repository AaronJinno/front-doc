import{_ as n,P as s,Q as a,a5 as t}from"./framework-3728cbf1.js";const p={},e=t(`<div class="hint-container danger"><p class="hint-container-title">警告</p><p>实际开发中中，异步调用采用的是Axios，Axios的核心是Ajax，Ajax的底层就是XHR。</p></div><p>XHR：XMLHttpRequest，可扩展超文本传输请求。XHR对象可以进行ajax异步请求。</p><h2 id="i-基本操作" tabindex="-1"><a class="header-anchor" href="#i-基本操作" aria-hidden="true">#</a> Ⅰ. 基本操作</h2><p>基本操作，非H5也支持。</p><h4 id="_1-创建xhr对象" tabindex="-1"><a class="header-anchor" href="#_1-创建xhr对象" aria-hidden="true">#</a> 1. 创建XHR对象</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//主流浏览器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-与服务器建立连接" tabindex="-1"><a class="header-anchor" href="#_2-与服务器建立连接" aria-hidden="true">#</a> 2. 与服务器建立连接</h4><p>open(&#39;method&#39;,&#39;url&#39;,async)：与服务器建立起连接(只是建立了连接,并未发送请求)。</p><ul><li>method：请求的类型(GET/POST),严格大写，如果是POST方式，注意设置请求头信息</li><li>url：文件在服务器上的位置，可以是任何文件，常为PHP。</li><li>async：true（异步）或false（同步），必须为true。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;a.php&#39;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//open之后，send之前调用setRequestHeader。</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-向服务器端发送请求" tabindex="-1"><a class="header-anchor" href="#_3-向服务器端发送请求" aria-hidden="true">#</a> 3. 向服务器端发送请求</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送到是get。get在url上传输数据。</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送的只能是post，string是需要发送的数据。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-监控服务器的回应-并调用回调函数" tabindex="-1"><a class="header-anchor" href="#_4-监控服务器的回应-并调用回调函数" aria-hidden="true">#</a> 4. 监控服务器的回应，并调用回调函数</h4><p>通过监控XHR对象的状态变化来确认服务器的回应。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取数据后，调用回调函数进行处理。</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        consoel<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
xhr<span class="token punctuation">.</span>responseText<span class="token operator">:</span>接收服务器数据的方式。
<span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>：设置好的回调函数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-h5-的改进" tabindex="-1"><a class="header-anchor" href="#ii-h5-的改进" aria-hidden="true">#</a> Ⅱ. H5 的改进</h2><p>H5版的XHR改进了很多特性，功能变得更加丰富了。</p><h4 id="_1-http请求时限" tabindex="-1"><a class="header-anchor" href="#_1-http请求时限" aria-hidden="true">#</a> 1. HTTP请求时限</h4><p>Ajax操作有时会比较耗时，为了不让用户等待时间太长，可以指定一个时限，过了时限便会停止HTTP请求。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span><span class="token comment">//单位是毫秒</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">ontimeout</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是一个超时后触发的回调函数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用formdata对象" tabindex="-1"><a class="header-anchor" href="#_2-使用formdata对象" aria-hidden="true">#</a> 2. 使用FormData对象</h4><p>FormData对象可以模拟表单，与提交真实表单的效果一样。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//向FormData对象添加表单项</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Groucho&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;accountnum&quot;</span><span class="token punctuation">,</span> <span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// HTML 文件类型input，由用户选择</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;userfile&quot;</span><span class="token punctuation">,</span> fileInputElement<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// JavaScript file-like 对象</span>
<span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token string">&#39;&lt;a id=&quot;a&quot;&gt;&lt;b id=&quot;b&quot;&gt;hey!&lt;/b&gt;&lt;/a&gt;&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 新文件的正文...</span>
<span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>content<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;text/xml&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;webmasterfile&quot;</span><span class="token punctuation">,</span> blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://foo.com/submitform.php&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//发送</span>

<span class="token comment">//通过表单创建FormData</span>
<span class="token keyword">var</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myform&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;uname&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;jinno&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以继续添加值</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;form.php&#39;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fromData<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-上传文件" tabindex="-1"><a class="header-anchor" href="#_3-上传文件" aria-hidden="true">#</a> 3. 上传文件</h4><p>将input属性为文件的数据，通过formData进行上传，操作如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>file<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;files[]&#39;</span><span class="token punctuation">,</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-跨域请求" tabindex="-1"><a class="header-anchor" href="#_4-跨域请求" aria-hidden="true">#</a> 4. 跨域请求</h4><p>可以向不同域名的服务器发出http请求（CORS）。</p><p>前提：浏览器必须支持这个功能，且服务器端必须同意这种跨域</p><h4 id="_5-响应数据" tabindex="-1"><a class="header-anchor" href="#_5-响应数据" aria-hidden="true">#</a> 5. 响应数据</h4><p>指定服务器端返回数据的类型，和获取服务器端的数据。</p><ul><li>responseType：设置服务器端数据类型 <ul><li>text：字符串（默认）</li><li>araybuffer：二进制数组对象</li><li>blob：二进制大数据对象</li><li>json：json数据</li><li>document：文件对象</li></ul></li><li>response：请求成功后，响应的数据，请求什么类型就返回什么类型。</li></ul><h4 id="_6-接收二进制数据" tabindex="-1"><a class="header-anchor" href="#_6-接收二进制数据" aria-hidden="true">#</a> 6. 接收二进制数据</h4><p>传统XHR接收二进制要改写数据点MIME Type，现在只需要设置responseType即可。</p><p>将responseType设置为arraybuffer或blob。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;a.php&#39;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&#39;blob&#39;</span><span class="token punctuation">;</span><span class="token comment">//提前设置好responseType</span>
<span class="token comment">//接收数据,注意读取的是response，而不是responseText，type提前设置好了。</span>
<span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;image/png&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>7、显示进度信息 传送数据的时候，有一个progress时间，用来返回进度信息，分为上传和下载两种情况。</p><ul><li>下载：属于XMLHttpRequest对象，</li><li>上传：属于XMLHttpRequest.upload对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//定义progress事件的回调函数</span>
xhr<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> updataProgress<span class="token punctuation">;</span><span class="token comment">//下载</span>
xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> updataProgress<span class="token punctuation">;</span><span class="token comment">//上传</span>
<span class="token comment">//设置回调函数</span>
<span class="token keyword">function</span> <span class="token function">updataProgress</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> percentComplete <span class="token operator">=</span> event<span class="token punctuation">.</span>loaded<span class="token operator">/</span>event<span class="token punctuation">.</span>tatal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
event<span class="token punctuation">.</span>total <span class="token operator">=</span> 需要传输的总字节，event<span class="token punctuation">.</span>loaded<span class="token operator">=</span>已经传输的字节，
如果event<span class="token punctuation">.</span>lengthComputable <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">,</span>则event<span class="token punctuation">.</span>total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>回调</strong><br> 与progress事件相关的事件，可以分别指定回调函数</p><ul><li>load：传输完成</li><li>abort：传输被用户取消</li><li>error：传输中出现错误</li><li>loadstart：传输开始</li><li>loadEnd：传输结束，但是不确定是否成功</li></ul>`,41),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","8-1.介绍.html.vue"]]);export{r as default};
