import{_ as a,o as n,c as s,e}from"./app-351da1f5.js";const t={},p=e(`<h2 id="i-自动类型转换" tabindex="-1"><a class="header-anchor" href="#i-自动类型转换" aria-hidden="true">#</a> Ⅰ. 自动类型转换</h2><h4 id="_1-自动转string" tabindex="-1"><a class="header-anchor" href="#_1-自动转string" aria-hidden="true">#</a> 1. 自动转String</h4><p>当字符串、数值类型的数据，进行加法运算时，数值会自动转换成字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//string -&gt;&quot;11&quot;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-转boolean-if条件" tabindex="-1"><a class="header-anchor" href="#_2-转boolean-if条件" aria-hidden="true">#</a> 2. 转Boolean：if条件</h4><p>if条件里面，会将结果自动转换成布尔类型的数据。</p><h4 id="_3-其他" tabindex="-1"><a class="header-anchor" href="#_3-其他" aria-hidden="true">#</a> 3. 其他</h4><p>有些运算符也会触发自动类型转换，详见运算符。</p><h2 id="ii-强制类型转换" tabindex="-1"><a class="header-anchor" href="#ii-强制类型转换" aria-hidden="true">#</a> Ⅱ. 强制类型转换</h2><p>指将一个数据类型强制转换为其他的数据类型。</p><p>主要用途是将其他的数据类型转换为：String、Number、Boolean。</p><h4 id="_1-转为number" tabindex="-1"><a class="header-anchor" href="#_1-转为number" aria-hidden="true">#</a> 1. 转为number</h4><h5 id="_1-1-number" tabindex="-1"><a class="header-anchor" href="#_1-1-number" aria-hidden="true">#</a> 1.1 Number()</h5><p>强制将其他类型的数据转换成数值。</p><ul><li>如果字符串是空或者是空格，会转换为0</li><li>布尔：true=1；false=0</li><li>null=0</li><li>undefined=NaN</li><li>其他数据类型都会转换为NaN</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span>5a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果NaN;只要有任何非数字,直接返回NaN;</span>
<span class="token boolean">true</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token boolean">false</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-parseint" tabindex="-1"><a class="header-anchor" href="#_1-2-parseint" aria-hidden="true">#</a> 1.2 parseInt()</h5><p>强制将其他类型的数据转换成整数，主要用于字符串，更加智能的解析。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果:123</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;123sfsd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果:123</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果:NaN;</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;1.2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果:1;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-3-parsefloat" tabindex="-1"><a class="header-anchor" href="#_1-3-parsefloat" aria-hidden="true">#</a> 1.3 parseFloat()</h5><p>强制将其他类型的数据转换成浮点型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;1.1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果:1.1;</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;1.2a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果1.2;</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;ab4a.a2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果NaN;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-字符串" tabindex="-1"><a class="header-anchor" href="#_2-字符串" aria-hidden="true">#</a> 2. 字符串</h4><h5 id="_2-1-string-函数" tabindex="-1"><a class="header-anchor" href="#_2-1-string-函数" aria-hidden="true">#</a> 2.1 string()函数</h5><p>该函数用来将其他类型的值转换为字符串，被转换的值就是该函数的参数。</p><ul><li>对于number和Boolean，使用该函数，底层还是调的toString方法</li><li>对于null和undefined，就不会调用toString了，会直接加个引号转为字符串</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将b转换为字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-2-tostring-方法" tabindex="-1"><a class="header-anchor" href="#_2-2-tostring-方法" aria-hidden="true">#</a> 2.2 toString()方法</h5><p>调用被转换数据类型的toString方法，返回字符串。</p><ul><li>该方法不会影响到源变量，只会将转换的结果返回。</li><li>null和undefined没有toString方法，用该方法会报错。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-强制类型转换-boolean类" tabindex="-1"><a class="header-anchor" href="#_3-强制类型转换-boolean类" aria-hidden="true">#</a> 3. 强制类型转换:Boolean类</h4><p>Boolean() 将其他类型的数据转换成布尔类型</p><ul><li>JS中为假的情况： 0; 0.0; &#39; &#39;; false; null; &#39;NaN; undefined</li><li>特殊情况：&#39;0&#39;=&gt;true; new array()=&gt;true; function(){}=&gt;true.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">boolean</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-其他进制的数字" tabindex="-1"><a class="header-anchor" href="#_4-其他进制的数字" aria-hidden="true">#</a> 4. 其他进制的数字</h4><p>其他进制的输出会自动转换为十进制。</p><ul><li>十六进制数字：在JS中表示16进制的数字，需要以0x开头</li><li>八进制数字：以0开头的表示8进制数字</li><li>二进制数字：以0b开头，兼容性不好，没啥用，尽量不用</li></ul><p>在parseInt函数的第二个参数，可以指定数字的进制。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0x123</span>
a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//将变量a，转为10进制的数字</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,40),o=[p];function i(c,l){return n(),s("div",null,o)}const u=a(t,[["render",i],["__file","1-6.类型转换.html.vue"]]);export{u as default};
