import{_ as n,o as a,c as s,e as t}from"./app-68218236.js";const p={},e=t(`<h2 id="i-绘制图像" tabindex="-1"><a class="header-anchor" href="#i-绘制图像" aria-hidden="true">#</a> Ⅰ. 绘制图像</h2><p>可以读取磁盘或网络中的图像文件，然后使用Canvas 将该图像绘制在画布中。</p><h4 id="_1-drawimage" tabindex="-1"><a class="header-anchor" href="#_1-drawimage" aria-hidden="true">#</a> 1. drawImage</h4><p>绘制图像时，需要使用 drawlmage 方法，该方法的定义如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context<span class="token punctuation">.</span><span class="token function">drawlmage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">drawlmage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>w<span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">drawlmage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span>sx<span class="token punctuation">,</span>sy<span class="token punctuation">,</span>sw<span class="token punctuation">,</span>sh<span class="token punctuation">,</span>dx<span class="token punctuation">,</span>dy<span class="token punctuation">,</span>dw<span class="token punctuation">,</span>dh<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方法一：image 是一个 Image 对象 用来装载文件，x与 y 为绘制时该图像在画布中的起始坐标</li><li>方法二：w、h 是指绘制时图像的宽度与高度；可对图像进行缩放（方法一直接加载原图）</li><li>方法三：将画布中已绘制好的图像的全部或者局部区域复制到画布中的另一个位置上。 <ul><li>image：被复制的图像文件</li><li>sx 与sy：源图像的被复制区域的起始横纵坐标</li><li>sw与sh：被复制区域的宽高</li><li>dx与dy：复制后的目标图像在画布中的起始横坐标与起始纵坐标</li><li>dw与dh：复制后的目标图像的宽度与高度。(不缩放的话，两次宽高相同）</li></ul></li></ul><h4 id="_2-进行绘制" tabindex="-1"><a class="header-anchor" href="#_2-进行绘制" aria-hidden="true">#</a> 2. 进行绘制</h4><p>使用不带参数的 new 方法创建 Image 对象，设定src 属性(图片的地址)导入。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
image<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&quot;imagel.jpg&quot;</span><span class="token punctuation">;</span> <span class="token comment">//设置图像路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>大图像的问题</strong></p><p>即使设定好 Image 对象的 src 属性后，也不一定立刻就能把图像绘制完毕，譬如该图像是一个来自网络的比较大的图像文件，这时用户就得耐心等待图像全部装载完毕才能看见该图像。</p><p>图片过大时，可以一边加载一边进行绘制。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 绘制图像的函数<span class="token punctuation">}</span><span class="token comment">//image对象的onload事件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-示例-第三种绘制方式" tabindex="-1"><a class="header-anchor" href="#_3-示例-第三种绘制方式" aria-hidden="true">#</a> 3. 示例：第三种绘制方式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByld</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>canvas <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span>；
    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&quot;#EEEEFF&quot;</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    image<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&quot;qc.jpg&quot;</span><span class="token punctuation">;</span>
    image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">drawlmg</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">drawlmg</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>image</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//首先调用该方法绘制原始图像</span>
    context<span class="token punctuation">.</span><span class="token function">drawlmage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//绘制将局部区域进行放大后的图像</span>
    context<span class="token punctuation">.</span><span class="token function">drawlmage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-图像平铺" tabindex="-1"><a class="header-anchor" href="#ii-图像平铺" aria-hidden="true">#</a> Ⅱ. 图像平铺</h2><p>按一定比例缩小后的图像填满画布。</p><p>实现方式：drawImage和createPattern方法</p><h4 id="_1-createpattern方法" tabindex="-1"><a class="header-anchor" href="#_1-createpattern方法" aria-hidden="true">#</a> 1. createPattern方法</h4><p>平铺图像的的方法，定义如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context<span class="token punctuation">.</span><span class="token function">createPattern</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>type参数的取值</p><ul><li>no-repeat: 不平铺</li><li>repeat-x: 横方向平铺</li><li>repeat-y: 纵方向平铺</li><li>repeat: 全方向平铺</li></ul><h4 id="_2-createpattern方法填充示例" tabindex="-1"><a class="header-anchor" href="#_2-createpattern方法填充示例" aria-hidden="true">#</a> 2. createPattern方法填充示例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByld</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>canvas <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    image<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&quot;qc2.jpg&quot;</span><span class="token punctuation">;</span>
    image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//创建填充样式，全方向平铺</span>
        <span class="token keyword">var</span> ptrn <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createPattern</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token string">&#39;repeat&#39;</span><span class="token punctuation">)</span>；
        <span class="token comment">//指定填充样式</span>
        context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> ptrn<span class="token punctuation">;</span>
        <span class="token comment">//填充画布</span>
        context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-裁剪路径" tabindex="-1"><a class="header-anchor" href="#iii-裁剪路径" aria-hidden="true">#</a> Ⅲ. 裁剪路径</h2><p>在画布内使用路径，只绘制该路径所包括区域内的图像，不绘制路径外部的图像。</p><p>使用context对象的不带参数的clip实现Canvas 元素的图像裁剪功能。</p><h4 id="_1-clip方法" tabindex="-1"><a class="header-anchor" href="#_1-clip方法" aria-hidden="true">#</a> 1. clip方法</h4><p>clip()方法能够从原始画布中裁剪任意形状和尺寸，clip()裁剪的区域要使用路径定义，裁剪后，路径所包含的区域将保留下来，其他区域则隐藏，类似于抠图。</p><h4 id="_2-注意" tabindex="-1"><a class="header-anchor" href="#_2-注意" aria-hidden="true">#</a> 2. 注意</h4><p>裁剪区域一旦设置好之后，后面绘制的所有图形都可以也只能使用这个裁剪区域，可以使用save保存画布和restore方法来取消裁剪区域</p><h4 id="_3-代码示例" tabindex="-1"><a class="header-anchor" href="#_3-代码示例" aria-hidden="true">#</a> 3. 代码示例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter">canvas1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;canvas1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">clip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    image<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&quot;../../public/img/icon.jpg&quot;</span><span class="token punctuation">;</span>
    image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//导入的图形将限制在裁剪的圆内。</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-像素处理" tabindex="-1"><a class="header-anchor" href="#iv-像素处理" aria-hidden="true">#</a> Ⅳ. 像素处理</h2><p>使用 Canvas API 能够获取图像中的每个像素，然后得到该像素颜色的 rgb 值或 rgba 值。</p><h4 id="_1-getimagedata" tabindex="-1"><a class="header-anchor" href="#_1-getimagedata" aria-hidden="true">#</a> 1. getImageData</h4><p>使用context对象的 getlmageData 方法来获取图像中的像素</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> imagedata<span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getlmageData</span><span class="token punctuation">(</span>sx<span class="token punctuation">,</span>sy<span class="token punctuation">,</span>sw<span class="token punctuation">,</span>sh<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>sx 、 sy 分别表示所获取区域的起点横坐标与纵坐标。</li><li>sw 、 sh 分别表示所获取区域的宽度和高度。</li></ul><h4 id="_2-imagedata变量" tabindex="-1"><a class="header-anchor" href="#_2-imagedata变量" aria-hidden="true">#</a> 2. imagedata变量</h4><p>用getImageDate方法获得变量是一个CanvasPixelArray对象，具有height、width、data等属性 。</p><p><strong>data 属性</strong></p><p>一个保存像素数据的数组，内容类似[ r1 ，g1, b1 , a1，r2, g2, b2, a2... ],</p><ul><li>r1 ，g1, b1 , a1：分别为第一个像素的红色值、绿色值、蓝色值与透明度值；</li><li>r 2、g 2、b 2、a 2 分别为第二个像素的红色值、绿色值、蓝色值、透明度值，依此类推。</li><li>data . length 为所取得像素的数量。</li></ul><h4 id="_3-获取image变量代码" tabindex="-1"><a class="header-anchor" href="#_3-获取image变量代码" aria-hidden="true">#</a> 3. 获取image变量代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> imagedata<span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">drawlmage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    imagedata <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getlmageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>width<span class="token punctuation">,</span>image<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-对像素进行处理" tabindex="-1"><a class="header-anchor" href="#_4-对像素进行处理" aria-hidden="true">#</a> 4. 对像素进行处理</h4><p>取得这些像素后，就可以对这些像素进行处理，比如蒙版处理，面部识别等</p><h4 id="_5-putimagedata" tabindex="-1"><a class="header-anchor" href="#_5-putimagedata" aria-hidden="true">#</a> 5. putImageData</h4><p>将imageData变量重新绘制到画布上</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context<span class="token punctuation">.</span><span class="token function">putlmageData</span><span class="token punctuation">(</span>imagedata<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy 
    <span class="token punctuation">[</span><span class="token punctuation">,</span> dirtyX<span class="token punctuation">,</span> dirtyY<span class="token punctuation">,</span> dirtyWidth<span class="token punctuation">,</span>dirtyHeight <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>dx、dy：重绘图像的起点横坐标、纵坐标。</li><li>dirtyX、dirtyY、dirtyWidth、dirtyHeight：可选参数，给出一个矩形的起点横坐标、起点纵坐标、宽度与高度，如果加上这4 个参数，则只绘制像素数组中这个矩形范围内的图像。</li></ul><h4 id="_6-示例-对图像进行反显操作" tabindex="-1"><a class="header-anchor" href="#_6-示例-对图像进行反显操作" aria-hidden="true">#</a> 6. 示例：对图像进行反显操作</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByld</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>canvas <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span>；
    <span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    image<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&quot;qc.jpg&quot;</span><span class="token punctuation">;</span>
    image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        context<span class="token punctuation">.</span><span class="token function">drawlmage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">var</span> imagedata <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getlmageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>image<span class="token punctuation">.</span>width<span class="token punctuation">,</span>image<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> imagedata<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            imagedata<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> imagedata<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//red</span>
            imagedata<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> imagedata<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//green</span>
            imagedata<span class="token punctuation">.</span>data <span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> imagedata<span class="token punctuation">.</span>data <span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token comment">//blue</span>
        <span class="token punctuation">}</span>
        context<span class="token punctuation">.</span><span class="token function">putlmageData</span><span class="token punctuation">(</span>imagedata<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,55),o=[e];function c(i,l){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","5-7.使用图像.html.vue"]]);export{r as default};
