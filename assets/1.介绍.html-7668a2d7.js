import{_ as a,o as n,c as s,e as i}from"./app-fb2cd4f5.js";const e={},t=i(`<p>Pinia是Vuex的替代品，Vuex已经被废弃了。</p><h4 id="_1-pinia的用途" tabindex="-1"><a class="header-anchor" href="#_1-pinia的用途" aria-hidden="true">#</a> 1. Pinia的用途</h4><p>Pinia 是 Vue 的专属状态管理库，它允许你跨组件或页面共享状态。</p><p>PS：状态就是一种数据，比如是否登录（登录状态）。</p><h4 id="_2-pinia的特性" tabindex="-1"><a class="header-anchor" href="#_2-pinia的特性" aria-hidden="true">#</a> 2. Pinia的特性</h4><p>使用reactive函数也可以创建一个响应式对象或数组，从而用来共享全局状态，这对于SPA应用来说问题不大，但若进行SSR，会暴露应用的一些安全漏洞。</p><p>而对于Pinia，就没有安全方面的问题，且有如下特性：</p><ul><li>Devtools 支持 <ul><li>追踪 actions、mutations 的时间线</li><li>在组件中展示它们所用到的 Store</li><li>让调试更容易的 Time travel</li></ul></li><li>热更新 <ul><li>不必重载页面即可修改 Store</li><li>开发时可保持当前的 State</li></ul></li><li>插件：可通过插件扩展 Pinia 功能</li><li>为 JS 开发者提供适当的 TypeScript 支持以及自动补全功能。</li><li>支持SSR</li></ul><h4 id="_3-安装" tabindex="-1"><a class="header-anchor" href="#_3-安装" aria-hidden="true">#</a> 3. 安装</h4><div class="language-dash line-numbers-mode" data-ext="dash"><pre class="language-dash"><code>npm install pinia
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-引入pinia" tabindex="-1"><a class="header-anchor" href="#_4-引入pinia" aria-hidden="true">#</a> 4. 引入Pinia</h4><p>需要在应用的根部注入Pinia。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//file:src/main.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>

<span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-对比vuex" tabindex="-1"><a class="header-anchor" href="#_5-对比vuex" aria-hidden="true">#</a> 5. 对比Vuex</h4><ul><li>Pinia的API更简单；Pinia是组合式API；Pinia支持TS</li><li>Pinia弃用了mutation</li><li>Pinia无需动态添加Store，他们默认都是动态的 <ul><li>仍然可以在任何时候手动使用一个Store进行注册</li></ul></li><li>Pinia不再有嵌套结构的模块。</li><li>Pinia不再有可命名的模块，Store 的命名取决于它们的定义方式，甚至可以说所有 Store 都应该命名。</li></ul>`,15),p=[t];function l(o,c){return n(),s("div",null,p)}const u=a(e,[["render",l],["__file","1.介绍.html.vue"]]);export{u as default};
