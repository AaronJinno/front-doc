import{_ as n,P as s,Q as a,a5 as e}from"./framework-3728cbf1.js";const t="/front-doc/img/basic/js/3-2-1.jpg",p={},o=e(`<h2 id="i-this" tabindex="-1"><a class="header-anchor" href="#i-this" aria-hidden="true">#</a> Ⅰ. this</h2><h4 id="_1-this参数" tabindex="-1"><a class="header-anchor" href="#_1-this参数" aria-hidden="true">#</a> 1. this参数</h4><p>解析器在调用函数时，每次都会向函数内部传递一个隐含的参数，这个隐含的参数就是this。</p><p>this指向的是一个对象，这个对象我们称之为函数执行的上下文对象， 根据函数的调用方式的不同，this指向不同的对象。</p><h4 id="_2-this示例" tabindex="-1"><a class="header-anchor" href="#_2-this示例" aria-hidden="true">#</a> 2. this示例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;全局&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj1<span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;jinno&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sayName</span><span class="token operator">:</span>fun
<span class="token punctuation">}</span>
<span class="token keyword">var</span>  obj2<span class="token punctuation">{</span>
   <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;aaron&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sayName</span><span class="token operator">:</span>fun 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-this的四种情况" tabindex="-1"><a class="header-anchor" href="#_3-this的四种情况" aria-hidden="true">#</a> 3. this的四种情况</h4><ul><li>以函数的形式调用（属于window对象），this永远都是window</li><li>以方法的形式调用，this就是方法所在的对象。</li><li>当以构造函数调用时，this就是新创建的那个对象。</li><li>通过call/apply指定谁调用: <code>xxx.call(obj)</code></li></ul><h2 id="ii-工厂方法" tabindex="-1"><a class="header-anchor" href="#ii-工厂方法" aria-hidden="true">#</a> Ⅱ. 工厂方法</h2><h4 id="_1-使用工厂方法创建对象" tabindex="-1"><a class="header-anchor" href="#_1-使用工厂方法创建对象" aria-hidden="true">#</a> 1. 使用工厂方法创建对象</h4><p>使用工厂方法可以大批量的创建对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个新对象</span>
    <span class="token comment">//向新对象中添加属性</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-工厂方法的缺点" tabindex="-1"><a class="header-anchor" href="#_2-工厂方法的缺点" aria-hidden="true">#</a> 2. 工厂方法的缺点</h4><p>使用工厂方法创建的对象，使用的构造函数都是object，所有创建的对象都是object这个类型，这就导致我们无法区分不同类型的对象。因此用的并不多，解决方法是：构造函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//创建person的工厂：类型是Object</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//创建pdog的工厂：类型也是Object</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-构造函数" tabindex="-1"><a class="header-anchor" href="#iii-构造函数" aria-hidden="true">#</a> Ⅲ. 构造函数</h2><h4 id="_1-说明" tabindex="-1"><a class="header-anchor" href="#_1-说明" aria-hidden="true">#</a> 1. 说明</h4><p>构造函数，其实就是一个普通的函数，只是当我们以new的形式调用该函数时，就会生成一个对象，这个时候，我们称之为构造函数、或者构造器；</p><ul><li>在构造函数内部，通常使用this指向当前对象</li><li>注意:方法的{}后面也要跟上分号;</li><li>构造函数习惯首字母大写。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Snake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;jinno&#39;</span><span class="token punctuation">;</span><span class="token comment">//访问对象成员，使用 . 语法</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//功能封装到方法中</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fuck&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//通过new的方式调用该函数，则会生成对象。</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//object;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问该对象的成员</span>
result<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问对象的方法</span>

<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-与普通函数的区别" tabindex="-1"><a class="header-anchor" href="#_2-与普通函数的区别" aria-hidden="true">#</a> 2. 与普通函数的区别</h4><p>调用的方式不同，普通函数是直接调用，而构造函数需要使用new关键字来调用（不加new是普通函数）。</p><h4 id="_3-构造函数执行流程" tabindex="-1"><a class="header-anchor" href="#_3-构造函数执行流程" aria-hidden="true">#</a> 3. 构造函数执行流程</h4><ul><li>立刻创建一个新的对象</li><li>将新建的对象设置为函数中的this</li><li>执行函数中的代码</li><li>将新建的对象作为范围值范围</li></ul><h4 id="_4-意义" tabindex="-1"><a class="header-anchor" href="#_4-意义" aria-hidden="true">#</a> 4. 意义</h4><p>使用这种方式创建的对象，打印的时候，会标出对象所属的构造函数，如果使用工厂模式就只会标出（object）。</p><h4 id="_5-instanceof" tabindex="-1"><a class="header-anchor" href="#_5-instanceof" aria-hidden="true">#</a> 5. instanceof</h4><p>使用instanceof可以检查一个对象是否是一个类的实例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>对象 <span class="token keyword">instanceof</span> 构造函数 <span class="token comment">//如果是返回true，否则返回false。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：所有对象都属于object的后代，所以，任何对象和object做instanceof时都返回true。</p><h4 id="_6-类" tabindex="-1"><a class="header-anchor" href="#_6-类" aria-hidden="true">#</a> 6. 类</h4><p>使用同一个构造函数创建的对象，我们称之为一类对象，也将一个构造函数称为一个类，我们将通过一个构造函数创建的对象，称为是该类的实例。</p><h4 id="_7-构造函数中的方法" tabindex="-1"><a class="header-anchor" href="#_7-构造函数中的方法" aria-hidden="true">#</a> 7. 构造函数中的方法</h4><p>在构造函数内部创建的方法，每次创建新对象时，都会调用该方法，也就是每次执行构造函数，就会创建一个新的方法，每个实例的方法都是唯一的（独立的）。</p><p>这样就导致了，函数执行一次就会创建一个新的方法，执行一万次就会创建一万个方法，而这一万个方法都是一模一样的（独立而相同）。这是没有必要的，可以使所有的对象共享一个方法。</p><h5 id="_7-1-方案-定义全局方法" tabindex="-1"><a class="header-anchor" href="#_7-1-方案-定义全局方法" aria-hidden="true">#</a> 7.1 方案：定义全局方法</h5><p>将构造函数中的方法，在全局作用域中定义。</p><figure><img src="`+t+'" alt="3-2-1" tabindex="0" loading="lazy"><figcaption>3-2-1</figcaption></figure><p>问题：将函数定义在全局作用域中，污染了全局作用域的命名空间。 而且定义在全局作用域中也很不安全（多人开发，可能会覆盖）</p><h5 id="_7-2-方案-原型对象" tabindex="-1"><a class="header-anchor" href="#_7-2-方案-原型对象" aria-hidden="true">#</a> 7.2 方案：原型对象</h5><p>可以采用原型对象解决这个问题。</p>',41),c=[o];function i(l,u){return s(),a("div",null,c)}const d=n(p,[["render",i],["__file","3-2.构造函数.html.vue"]]);export{d as default};
