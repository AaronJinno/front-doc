import{_ as n,o as s,c as a,e as t}from"./app-fb2cd4f5.js";const p={},e=t(`<h2 id="i-函数的扩展" tabindex="-1"><a class="header-anchor" href="#i-函数的扩展" aria-hidden="true">#</a> Ⅰ. 函数的扩展</h2><h4 id="_1-函数参数的默认值" tabindex="-1"><a class="header-anchor" href="#_1-函数参数的默认值" aria-hidden="true">#</a> 1. 函数参数的默认值</h4><p>ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Hello World</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参数变量是默认声明的，所以不能用let或const再次声明。否则报错</li><li>使用参数默认值时，函数不能有同名参数</li><li>参数默认值不是传值的，而是每次都重新计算默认值表达式的值</li></ul><h4 id="_2-参数默认值特性" tabindex="-1"><a class="header-anchor" href="#_2-参数默认值特性" aria-hidden="true">#</a> 2. 参数默认值特性</h4><h5 id="_2-1-与解构赋值默认值结合使用" tabindex="-1"><a class="header-anchor" href="#_2-1-与解构赋值默认值结合使用" aria-hidden="true">#</a> 2.1 与解构赋值默认值结合使用</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//用来连接数据库的函数</span>
<span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//option是连接的参数，一个对象</span>
    <span class="token keyword">let</span> host <span class="token operator">=</span> option<span class="token punctuation">.</span>host<span class="token punctuation">;</span> <span class="token comment">//这样获取值太繁琐了。</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//使用结构赋值获取参数</span>
<span class="token comment">//可以给属性赋初始值</span>
<span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>host<span class="token operator">=</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span>uname<span class="token punctuation">,</span>password<span class="token punctuation">,</span>prot<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//调用函数，并传一个对象作为参数</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">uname</span><span class="token operator">:</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">prot</span><span class="token operator">:</span><span class="token number">3306</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-参数默认值的位置" tabindex="-1"><a class="header-anchor" href="#_2-2-参数默认值的位置" aria-hidden="true">#</a> 2.2 参数默认值的位置</h5><p>通常情况下，定义了默认值的参数，应该是函数的尾参数。<br> 如果非尾部的参数设置默认值，实际上这个参数是没法省略的（必须传）。</p><h5 id="_2-3-undefined和null" tabindex="-1"><a class="header-anchor" href="#_2-3-undefined和null" aria-hidden="true">#</a> 2.3 undefined和null</h5><p>如果传入undefined，将触发该参数等于默认值，null则没有这个效果。</p><h5 id="_2-4-函数的length属性" tabindex="-1"><a class="header-anchor" href="#_2-4-函数的length属性" aria-hidden="true">#</a> 2.4 函数的length属性</h5><p>指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，length属性将失真。这是因为length属性的含义是，该函数预期传入的参数个数。某个参数指定默认值以后，预期传入的参数个数就不包括这个参数了。</p><p>如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了。</p><h5 id="_2-5-应用" tabindex="-1"><a class="header-anchor" href="#_2-5-应用" aria-hidden="true">#</a> 2.5 应用</h5><p>利用参数默认值，可以指定某一个参数不得省略，如果省略就抛出一个错误。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throwIfMissing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//不给参数，就运行这个出错函数</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Missing parameter&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">mustBeProvided <span class="token operator">=</span> <span class="token function">throwIfMissing</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> mustBeProvided<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-rest参数" tabindex="-1"><a class="header-anchor" href="#_3-rest参数" aria-hidden="true">#</a> 3. rest参数</h4><p>rest 参数（形式为...变量名），用于获取函数的实参，用来代替arguments，rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印所有的参数</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> val <span class="token keyword">of</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> val<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。 <ul><li>前面可以有其他参数，rest代表剩余参数。</li></ul></li><li>函数的length属性，不包括 rest 参数。</li></ul><p>箭头函数内部是没有arguments参数的，需要使用rest参数进行替代</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>values</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以打印所有的参数，是一个数组</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-严格模式" tabindex="-1"><a class="header-anchor" href="#_4-严格模式" aria-hidden="true">#</a> 4. 严格模式</h4><p>ES5 开始，函数内部可以设定为严格模式。ES2016 做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。</p><h4 id="_5-name属性" tabindex="-1"><a class="header-anchor" href="#_5-name属性" aria-hidden="true">#</a> 5. name属性</h4><p>函数的name属性，返回该函数的函数名。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
foo<span class="token punctuation">.</span>name <span class="token comment">// &quot;foo&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Function构造函数返回的函数实例，name属性的值为anonymous。</li><li>bind返回的函数，name属性值会加上bound前缀。</li></ul><h4 id="_6-函数参数的尾逗号" tabindex="-1"><a class="header-anchor" href="#_6-函数参数的尾逗号" aria-hidden="true">#</a> 6. 函数参数的尾逗号</h4><p>S2017 允许函数的最后一个参数有尾逗号（trailing comma）。<br> 此前，函数定义和调用时，都不允许最后一个参数后面出现逗号。</p><p>建议：数组、对象、参数，还是都别加尾逗号了。</p><h2 id="ii-尾调用优化" tabindex="-1"><a class="header-anchor" href="#ii-尾调用优化" aria-hidden="true">#</a> Ⅱ. 尾调用优化</h2><h4 id="_1-什么是尾调用" tabindex="-1"><a class="header-anchor" href="#_1-什么是尾调用" aria-hidden="true">#</a> 1. 什么是尾调用</h4><p>就是某个函数的最后一步是调用另一个函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//函数f的最后一步是调用函数g，这就叫尾调用。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>必须是最后一步操作，必须仅仅是调用函数，必须在return后面。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>用的不多，详情略。</p></div><h2 id="iii-箭头函数" tabindex="-1"><a class="header-anchor" href="#iii-箭头函数" aria-hidden="true">#</a> Ⅲ. 箭头函数</h2><h4 id="_1-基本用法" tabindex="-1"><a class="header-anchor" href="#_1-基本用法" aria-hidden="true">#</a> 1. 基本用法</h4><p>ES6 允许使用“箭头”（=&gt;）定义函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">;</span> <span class="token comment">//最简单写法：函数名=参数=返回值</span>
<span class="token keyword">let</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">}</span> <span class="token comment">//完全体写法</span>
<span class="token comment">// 最简洁写法等同于</span>
<span class="token keyword">let</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 完全体写法等同于</span>

<span class="token keyword">let</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-1-this是静态的" tabindex="-1"><a class="header-anchor" href="#_1-1-this是静态的" aria-hidden="true">#</a> 1.1 this是静态的</h5><p>this始终指向函数声明时所在作用域下的this的值。</p><p>比如：将使用箭头定义的函数，使用call调用，传入其他对象，理论上this该指向其他变量，打印发现call的值并没有发生改变。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//示例1：</span>
<span class="token keyword">let</span> <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Jinno&quot;</span><span class="token punctuation">;</span>
<span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印Jinno，以函数调用，指向window</span>
<span class="token keyword">const</span> school <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;Aaron&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">getName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印还是Jinno，正常函数应该变成Aaron的。</span>
<span class="token comment">//示例2：</span>
<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter">fun</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//id=1,this指向的是所在对象</span>
    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//id=0,调用外部函数，this指向的是window</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//id=1,使用了箭头函数，this指向的是所在对象。</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>   
<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-不能作为构造函数" tabindex="-1"><a class="header-anchor" href="#_1-2-不能作为构造函数" aria-hidden="true">#</a> 1.2 不能作为构造函数</h5><p>箭头函数不能作为构造函数实例化对象</p><h5 id="_1-3-不能使用arguments变量" tabindex="-1"><a class="header-anchor" href="#_1-3-不能使用arguments变量" aria-hidden="true">#</a> 1.3 不能使用arguments变量</h5><p>arguments变量是用来保存实参的。</p><p>可以使用rest参数来代替。</p><h5 id="_1-4-简写规则" tabindex="-1"><a class="header-anchor" href="#_1-4-简写规则" aria-hidden="true">#</a> 1.4 简写规则</h5><ul><li>省略小括号：当形参有且只有一个的时候。</li><li>省略花括号：当代码体只有一条语句的时候，此时，return必须省略，语句的执行结果就是函数的返回值。</li></ul><h4 id="_2-应用场景" tabindex="-1"><a class="header-anchor" href="#_2-应用场景" aria-hidden="true">#</a> 2. 应用场景</h4><ul><li>箭头函数适合与this无关的回调：定时器、数组的方法回调。</li><li>箭头函数不适合与this有关的回调：事件回调，对象的方法。</li></ul><h4 id="_3-实例" tabindex="-1"><a class="header-anchor" href="#_3-实例" aria-hidden="true">#</a> 3. 实例</h4><h5 id="_3-1-定时器" tabindex="-1"><a class="header-anchor" href="#_3-1-定时器" aria-hidden="true">#</a> 3.1 定时器</h5><p>效果：点击div，两秒后，div变成粉色。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ad <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;ad&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ad<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">&quot;pink&quot;</span><span class="token punctuation">;</span><span class="token comment">//报错，因为函数的this是指向window的</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//解决方案1：在定时器回调函数外层保存this,此时this就执向ad对象了。</span>
ad<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       _this<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">&quot;pink&quot;</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//解决方案2：定时器回调使用箭头函数</span>
<span class="token function">setTiou</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">&quot;pink&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-数组过滤" tabindex="-1"><a class="header-anchor" href="#_3-2-数组过滤" aria-hidden="true">#</a> 3.2 数组过滤</h5><p>需求：从数组中返回偶数的元素</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//传统过滤法</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//使用箭头函数</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span>item<span class="token operator">%</span><span class="token number">2</span><span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-参数和返回值" tabindex="-1"><a class="header-anchor" href="#_4-参数和返回值" aria-hidden="true">#</a> 4. 参数和返回值</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">var</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
<span class="token comment">//如果箭头函数的代码块部分多余一条函数，一般使用大括号括起来，并使用return</span>
<span class="token keyword">var</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token function-variable function">getTempItem</span> <span class="token operator">=</span> <span class="token parameter">id</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> id<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Temp&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参数: 如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。</li><li>多条返回语句: 如果箭头函数的代码块部分多余一条函数，一般使用大括号括起来，并使用return。</li><li>返回对象: 当返回对象时，由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。</li><li>无返回值: <code>let fn = () =&gt; void doesNotReturn();</code></li></ul><h4 id="_5-简化回调函数" tabindex="-1"><a class="header-anchor" href="#_5-简化回调函数" aria-hidden="true">#</a> 5. 简化回调函数</h4><p>箭头函数的一个用处是简化回调函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span></span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>name</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-使用注意点" tabindex="-1"><a class="header-anchor" href="#_6-使用注意点" aria-hidden="true">#</a> 6. 使用注意点</h4><ul><li>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</li><li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li><li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</li><li>不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</li></ul><h4 id="_7-不适合场合" tabindex="-1"><a class="header-anchor" href="#_7-不适合场合" aria-hidden="true">#</a> 7. 不适合场合</h4><p>由于箭头函数使得this从“动态”变成“静态”，下面两个场合不应该使用箭头函数。</p><ul><li>定义对象的方法，且该方法内部包括this。</li><li>需要动态this的时候，也不应使用箭头函数。</li></ul>`,74),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","2-4.函数扩展.html.vue"]]);export{r as default};
