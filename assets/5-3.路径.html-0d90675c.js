import{_ as n,P as a,Q as s,a5 as t}from"./framework-3728cbf1.js";const p={},e=t(`<p>要想绘制其他图形，需要使用路径。同样，绘制开始时还是要取得图形上下文，然后需要执行如下步骤。（以绘制圆形为例）。</p><h4 id="_1-开始创建路径" tabindex="-1"><a class="header-anchor" href="#_1-开始创建路径" aria-hidden="true">#</a> 1. 开始创建路径</h4><p>开始创建路径时，使用context对象的 beginPath 方法，该方法的定义如下所示。</p><p>该方法不使用参数。通过调用该方法开始创建路径。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context1<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-创建图形的路径-以圆为例" tabindex="-1"><a class="header-anchor" href="#_2-创建图形的路径-以圆为例" aria-hidden="true">#</a> 2. 创建图形的路径（以圆为例）</h4><p>创建路径时，需要使用context的 arc 方法（绘制圆形的方法）。<br> 该方法的定义如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context1<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> startAngle<span class="token punctuation">,</span> endAngle<span class="token punctuation">,</span> anticlockwise<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>x 为绘制圆形的起点横坐标，</li><li>y 为绘制圆形的起点纵坐标，</li><li>radius为圆形半径，</li><li>startAngle 为开始的弧度，</li><li>endAngle 为结束的弧度，</li><li>anticlockwise 为是否按逆时针方向进行绘制。值为true逆时针；值为 false，顺时针。</li></ul><p><strong>注意</strong><br> arc不仅可以用来绘制圆形，也可以用来绘制圆弧。开始角度与结束角度决定了弧度大小和弧度的位置。</p><p><strong>数学知识</strong><br> 圆弧的长度=半径，为1弧度。故2π个弧度就是圆的周长。所以将开始弧度设置为0，结束弧度设置为：2*Math.PI就可以绘制圆形了。</p><h4 id="_3-路径创建完成后关闭路径。" tabindex="-1"><a class="header-anchor" href="#_3-路径创建完成后关闭路径。" aria-hidden="true">#</a> 3. 路径创建完成后关闭路径。</h4><p>路径创建完成后，使用context对象的 closePath 方法关闭路径。该方法定义如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context1<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关闭路径后，路径创建工作就完成了。<br> 注意：只是路径创建完毕，还没有绘制任何图形。</p><h4 id="_4-绘制路径" tabindex="-1"><a class="header-anchor" href="#_4-绘制路径" aria-hidden="true">#</a> 4. 绘制路径</h4><p>设定绘制样式，调用绘制方法，绘制路径。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context1<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&#39;rgba(255, 0, 0, 0.25)&#39;</span><span class="token punctuation">;</span>
context1<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用创建好的路径绘制图形。在指定绘制样式时，与矩形的绘制方法一样，使用 fillStyle 方法与 strokeStyle 方法。因为路径已经决定了图形的大小，所以就不需要在该绘制时指定图形大小了。</p><h4 id="_5-示例-绘制圆形" tabindex="-1"><a class="header-anchor" href="#_5-示例-绘制圆形" aria-hidden="true">#</a> 5. 示例：绘制圆形</h4><p>步骤如上所述，创建路径时需要用到ARC方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByld</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>canvas <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&quot;#EEEEFF&quot;</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">fillRect</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//循环绘制多个图形</span>
        context<span class="token punctuation">.</span><span class="token function">beginPath</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span> i  <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&#39;rgba(255, 0, 0, 0.25)&#39;</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-不关闭路径" tabindex="-1"><a class="header-anchor" href="#_6-不关闭路径" aria-hidden="true">#</a> 6. 不关闭路径</h4><p>如果不关闭路径，已经创建的路径会永远保留着。就算用 fill 方法与 stroke方法在页面上将图形已经绘制完毕，路径都不会消失。</p><p><strong>图形重叠绘制</strong><br> 像上例中那样，如果把“使用路经进行绘制”这个方法进行循环，创建的图形会一次又一次地进行重叠。</p><p><strong>应用</strong><br> 如果不仔细对路径进行管理，会绘制出意想不到的图形。也可以利用这一特点绘制出有趣的图形、更加漂亮的图形。只创建一次，而重叠绘制也得到了广泛应用。在进行绘制时，还是要仔细计算好路径从哪里开始，在哪里关闭的问题。</p>`,26),c=[e];function o(l,i){return a(),s("div",null,c)}const r=n(p,[["render",o],["__file","5-3.路径.html.vue"]]);export{r as default};
