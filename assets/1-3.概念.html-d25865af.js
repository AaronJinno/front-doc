import{_ as i,o as e,c as a,e as p}from"./app-fb2cd4f5.js";const n={},l=p(`<h4 id="_1-基本语言" tabindex="-1"><a class="header-anchor" href="#_1-基本语言" aria-hidden="true">#</a> 1. 基本语言</h4><p>uni-app代码编写，基本语言包括js、vue、css。以及ts、scss等css预编译器。</p><p>在app端，还支持原生渲染的nvue，以及可以编译为kotlin和swift的uts。</p><h4 id="_2-开发规范" tabindex="-1"><a class="header-anchor" href="#_2-开发规范" aria-hidden="true">#</a> 2. 开发规范</h4><ul><li>页面文件遵循 Vue 单文件组件 (SFC) 规范，即每个页面是一个.vue文件</li><li>组件标签靠近小程序规范，详见uni-app 组件规范</li><li>接口能力（JS API）靠近小程序规范，但需将前缀 wx、my 等替换为 uni，详见uni-app接口规范</li><li>数据绑定及事件处理同 Vue.js 规范，同时补充了应用生命周期及页面的生命周期</li><li>如需兼容app-nvue平台，建议使用flex布局进行开发</li></ul><h4 id="_3-编译器和运行时" tabindex="-1"><a class="header-anchor" href="#_3-编译器和运行时" aria-hidden="true">#</a> 3. 编译器和运行时</h4><p>uni-app分编译器和运行时（runtime）。uni-app能实现一套代码、多端运行，是通过这两部分配合完成的。</p><p>编译器将开发者的代码进行编译，编译的输出物由各个终端的runtime进行解析，每个平台（Web、Android App、iOS App、各家小程序）都有各自的runtime。</p><h4 id="_4-编译器" tabindex="-1"><a class="header-anchor" href="#_4-编译器" aria-hidden="true">#</a> 4. 编译器</h4><p>编译器运行在电脑开发环境。一般是内置在HBuilderX工具中，也可以使用独立的cli版。</p><h5 id="_4-1-代码编译" tabindex="-1"><a class="header-anchor" href="#_4-1-代码编译" aria-hidden="true">#</a> 4.1 代码编译</h5><p>开发者按uni-app规范编写代码，由编译器将开发者的代码编译生成每个平台支持的特有代码</p><ul><li>在web平台，将.vue文件编译为js代码。与普通的vue cli项目类似</li><li>在微信小程序平台，编译器将.vue文件拆分生成wxml、wxss、js等代码</li><li>在app平台，将.vue文件编译为js代码。进一步，如果涉及uts代码： <ul><li>在Android平台，将.uts文件编译为kotlin代码</li><li>在iOS平台，将.uts文件编译为swift代码</li></ul></li></ul><h5 id="_4-2-vue版本" tabindex="-1"><a class="header-anchor" href="#_4-2-vue版本" aria-hidden="true">#</a> 4.2 Vue版本</h5><p>编译器分vue2版和vue3版</p><ul><li>vue2版：基于webpack实现</li><li>vue3版：基于Vite实现，性能更快</li></ul><h5 id="_4-3-条件编译" tabindex="-1"><a class="header-anchor" href="#_4-3-条件编译" aria-hidden="true">#</a> 4.3 条件编译</h5><p>编译器支持条件编译，即可以指定某部分代码只编译到特定的终端平台。从而将公用和个性化融合在一个工程中。<br> 详见编译器：条件编译。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// #ifdef  App</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;这段代码只有在App平台才会被编译进去。非App平台编译后没有这段代码&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// #endif</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-运行时-runtime" tabindex="-1"><a class="header-anchor" href="#_5-运行时-runtime" aria-hidden="true">#</a> 5. 运行时：runtime</h4><p>runtime不是运行在电脑开发环境，而是运行在真正的终端上。</p><p>uni-app在每个平台（Web、Android App、iOS App、各家小程序）都有各自的runtime。</p><ul><li>在小程序端，uni-app的runtime，主要是一个小程序版的vue runtime，页面路由、组件、api等方面基本都是转义。</li><li>在web端，uni-app的runtime相比普通的vue项目，多了一套ui库、页面路由框架、和uni对象（即常见API封装）</li><li>在App端，uni-app的runtime更复杂，可以先简单理解为DCloud也有一套小程序引擎，打包app时将开发者的代码和DCloud的小程序打包成了apk或ipa。</li></ul><p>uni-app runtime包括3部分：基础框架、组件、API。</p><h5 id="_5-1-基础框架" tabindex="-1"><a class="header-anchor" href="#_5-1-基础框架" aria-hidden="true">#</a> 5.1 基础框架</h5><ul><li>包括语法、数据驱动、全局文件、应用管理、页面管理、js引擎、渲染和排版引擎等</li><li>在web和小程序上，不需要uni-app提供js引擎和排版引擎，直接使用浏览器和小程序的即可。但app上需要uni-app提供</li><li>App的js引擎：App-Android上，uni-app的js引擎是v8，App-iOS是jscore</li><li>App的渲染引擎：同时提供了2套渲染引擎，.vue页面文件由webview渲染，原理与小程序相同；.nvue页面文件由原生渲染，原理与react native相同。开发者可以根据需要自主选择渲染引擎。</li></ul><h5 id="_5-2-组件" tabindex="-1"><a class="header-anchor" href="#_5-2-组件" aria-hidden="true">#</a> 5.2 组件</h5><ul><li>runtime中包括的组件只有基础组件，如<code>&lt;view&gt;</code>、<code>&lt;button&gt;</code>等。扩展组件不包含在uni-app的runtime中，而是下载到用户的项目代码中。（这些组件都是vue组件）</li><li>为了降低开发者的学习成本，uni-app的内置基础组件命名规范与小程序基本相同。</li><li>这几十个组件不管在哪个平台，已被处理为均有一致表现。</li><li>在小程序端，uni-app基础组件会直接转义为小程序自己的内置组件。在小程序的runtime中不占体积。</li><li>在web和android、iOS端，这几十个组件都在uni-app的runtime中，会占用一定体积，相当于内置了一套ui库。</li><li>组件的扩展： <ul><li>有了几十个基础组件，大多数扩展组件也都是基于这些基础组件封装的。比如官方提供的扩展ui库uni ui。</li><li>在web平台，for web的各种ui库（如elementUI）也可以使用，但这些库由于操作了dom，无法跨端在app和小程序中使用。</li><li>在App平台，uni-app也支持使用原生编程语言来自行扩展原生组件，比如原生的地图、ar等。</li><li>uni-app同时支持将微信自定义组件运行到微信小程序、web、app这3个平台。注意微信自定义组件不是vue组件。</li></ul></li></ul><h5 id="_5-3-api" tabindex="-1"><a class="header-anchor" href="#_5-3-api" aria-hidden="true">#</a> 5.3 API</h5><ul><li>uni-app runtime内置了大量常见的、跨端的 API，比如联网(uni.request)、读取存储(uni.getStorage)</li><li>同时uni-app不限制各端原生平台的API调用。开发者可以在uni-app框架中无限制的调用该平台所有能使用的API。 <ul><li>即，在小程序平台，小程序的所有API都可以使用；在web平台，浏览器的所有API都可使用；在iOS和Android平台，os的所有API都可以使用。</li><li>也就是说使用uni-app的标准API，可以跨端使用。但对于不跨端的部分，仍可以调用该端的专有API。</li><li>由于常见的API都已经被封装内置，所以日常开发时，开发者只需关注uni标准API，当需要调用特色端能力时在条件编译里编写特色API调用代码。</li></ul></li><li>ext API：web和app的runtime体积不小，如果把小程序的所有API等内置进去会让开发者的最终应用体积变大。所以有部分不常用的API被剥离为ext API。虽然仍然是uni.开头，但需要单独下载插件到项目下。</li><li>小程序平台：uni对象会转为小程序的自有对象，比如在微信小程序平台，编写uni.request等同于wx.request。那么所有wx.的API都可以这样使用。</li><li>web平台：window、dom等浏览器专用API仍可以使用</li><li>app平台：除了uni.的API，还可以使用plus.的API、Native.js，以及通过uts编写原生插件，或者使用java和objectC编写原生插件。这些原生插件调用os的API并封装给js使用。</li><li>由于历史沿革，DCloud在开发app时有：5+App、wap2app、uni-app等3种模式。这3种方式的runtime在底层能力上是公用的，所有uni-app可以调用5+（也就是<code>plus.xxx</code>）的API。虽然都可以使用5+的系统能力，但uni-app的逻辑层运行在js层，渲染层是webview和原生nvue双选。而5+不区分逻辑层和渲染层，全部运行在webview里，在性能上5+不及uni-app。</li></ul><h4 id="_6-逻辑层和渲染层分离" tabindex="-1"><a class="header-anchor" href="#_6-逻辑层和渲染层分离" aria-hidden="true">#</a> 6. 逻辑层和渲染层分离</h4><h5 id="_6-1-web" tabindex="-1"><a class="header-anchor" href="#_6-1-web" aria-hidden="true">#</a> 6.1 web</h5><p>在web平台，逻辑层（js）和渲染层（html、css），都运行在统一的webview里。</p><h5 id="_6-2-小程序和app" tabindex="-1"><a class="header-anchor" href="#_6-2-小程序和app" aria-hidden="true">#</a> 6.2 小程序和app</h5><p>但在小程序和app端，逻辑层和渲染层被分离了。分离的核心原因是性能，js运算和界面会渲染抢资源导致的卡顿。</p><p>不管小程序还是app，逻辑层都独立为了单独的js引擎，渲染层仍然是webview（app上也支持纯原生渲染）。<br> 所以注意小程序和app的逻辑层都不支持浏览器专用的window、dom等API，只能在渲染层操作即renderjs。</p>`,36),u=[l];function r(s,d){return e(),a("div",null,u)}const h=i(n,[["render",r],["__file","1-3.概念.html.vue"]]);export{h as default};
