import{_ as n,P as s,Q as a,a5 as e}from"./framework-3728cbf1.js";const l="/front-doc/img/basic/css/5-1-1.jpg",c={},i=e('<h4 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1. 介绍</h4><p>CSS3的Multiple Columns可以设计多列布局，适合纯文本板式设计。</p><p>就是把一个文本，分成几列显示，如图分成了三列。</p><figure><img src="'+l+`" alt="5-1-1" tabindex="0" loading="lazy"><figcaption>5-1-1</figcaption></figure><h4 id="_2-cloumns" tabindex="-1"><a class="header-anchor" href="#_2-cloumns" aria-hidden="true">#</a> 2. cloumns</h4><p>该属性是个简写属性，可以同时设置多列的数目，和每列的宽度。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">columns</span><span class="token punctuation">:</span> column-width column-count<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该属性适用于不可替换的块元素、行内块元素、单元格（不包括表格） 。</p><ul><li>不可替换元素：即将内容直接表现给用户端。</li><li>替换元素：根据其标签和属性来决定元素的具体显示内容.有<code>&lt;img&gt;</code> <code>&lt;input&gt;</code> <code>&lt;textarea&gt;</code> <code>&lt;select&gt;</code> <code>&lt;object&gt;</code>。替换一般有内在尺寸即img默认的是其图片的宽高，input也有默认的尺寸。img和input的宽高可以设定。</li></ul><h4 id="_3-column-width-定义列宽" tabindex="-1"><a class="header-anchor" href="#_3-column-width-定义列宽" aria-hidden="true">#</a> 3. column-width：定义列宽</h4><p>该属性可以定义单列显示的宽度，初始值为auto。该属性可以和column其他属性配合使用，也可以单独使用，单独使用时，超出列宽的内容自动以多列显示。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">column-width:length | auto

body</span> <span class="token punctuation">{</span>
    <span class="token property">columns</span><span class="token punctuation">:</span> 250px 3<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-column-count-定义列数" tabindex="-1"><a class="header-anchor" href="#_4-column-count-定义列数" aria-hidden="true">#</a> 4. column-count： 定义列数</h4><p>定义显示的列数，该属性初始值为auto，定义栏目的列数，如果column-width和column-count属性没有明确值，则该值取最大</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">column-count:integer | auto

body</span> <span class="token punctuation">{</span>
    <span class="token property">column-count</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-column-gap-定义列间距" tabindex="-1"><a class="header-anchor" href="#_5-column-gap-定义列间距" aria-hidden="true">#</a> 5. column-gap：定义列间距</h4><p>默认值为normal，根据浏览器默认设置进行解析，一般为1em。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">column-gap</span><span class="token punctuation">:</span>normal | length

<span class="token property">column-gap</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-column-rule-定义列边框" tabindex="-1"><a class="header-anchor" href="#_6-column-rule-定义列边框" aria-hidden="true">#</a> 6. column-rule：定义列边框</h4><p>为列边框设计样式，有效区分各个栏目之间的关系，便于清晰的阅读。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">column-rule</span><span class="token punctuation">:</span> width sytle color 

<span class="token property">column-rule</span><span class="token punctuation">:</span> 2px dashed gray<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>column-rule的各个属性可以单独设定，也可以由column-rule统一设定</p><ul><li>column-rule-width：定义列边框宽度</li><li>column-rule-style：定义列边框样式，与border-style属性值相同。</li><li>column-rule-color：定义列边框颜色。</li></ul><h4 id="_7-column-span-定义跨列显示" tabindex="-1"><a class="header-anchor" href="#_7-column-span-定义跨列显示" aria-hidden="true">#</a> 7. column-span：定义跨列显示</h4><p>对于一个文本来说，标题往往要显示在中间，这就需要进行跨列了（如果标题和文本在一个元素内）。该属性适用于非浮动的静态元素。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* all表示横跨所有列 */</span>
<span class="token selector">column-span: all 

h1</span> <span class="token punctuation">{</span>
    <span class="token property">column-span</span><span class="token punctuation">:</span> all<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),t=[i];function o(d,u){return s(),a("div",null,t)}const r=n(c,[["render",o],["__file","5-1.多列布局.html.vue"]]);export{r as default};
