import{_ as n,o as s,c as a,e}from"./app-351da1f5.js";const p={},t=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>在大型项目中，我们可能需要拆分应用为更小的块，并仅在需要时再从服务器加载相关组件。<br> Vue 提供了 defineAsyncComponent （异步组件）方法来实现此功能。</p></div><h4 id="_1-defineasynccomponent" tabindex="-1"><a class="header-anchor" href="#_1-defineasynccomponent" aria-hidden="true">#</a> 1. defineAsyncComponent</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>defineAsyncComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> AsyncComp <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token comment">//从服务器获取组件</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment">//获取到的组件    </span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//使用AsyncComp:像使用其他一般组件一样</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>参数</strong></p><p>defineAsyncComponent的参数是一个加载函数，返回一个Promise。</p><ul><li>resolve：在从服务器获得组件定义时调用</li><li>reject：调用 reject(reason) 表明加载失败</li></ul><h4 id="_2-直接导入单文件组件" tabindex="-1"><a class="header-anchor" href="#_2-直接导入单文件组件" aria-hidden="true">#</a> 2. 直接导入单文件组件</h4><p>ES 模块动态导入也会返回一个 Promise，所以多数情况下我们会将它和 defineAsyncComponent 搭配使用。</p><p>Vite 和 Webpack 这样的构建工具也支持此语法 (并且会将它们作为打包时的代码分割点)，因此我们也可以用它来导入 Vue 单文件组件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsyncComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> AsyncComp <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./components/MyComponent.vue&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-动态导入分析" tabindex="-1"><a class="header-anchor" href="#_2-1-动态导入分析" aria-hidden="true">#</a> 2.1 动态导入分析</h5><p>最后得到的 AsyncComp 是一个外层包装过的组件，仅在页面需要它渲染时才会调用加载内部实际组件的函数。<br> 它会将接收到的 props 和插槽传给内部组件，也可以使用这个异步的包装组件无缝地替换原始组件，同时实现延迟加载。</p><h5 id="_2-2-全局注册" tabindex="-1"><a class="header-anchor" href="#_2-2-全局注册" aria-hidden="true">#</a> 2.2 全局注册</h5><p>与普通组件一样，异步组件可以使用 app.component() 全局注册。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;MyComponent&#39;</span><span class="token punctuation">,</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./components/MyComponent.vue&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-直接在父组件中定义" tabindex="-1"><a class="header-anchor" href="#_2-3-直接在父组件中定义" aria-hidden="true">#</a> 2.3 直接在父组件中定义</h5><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsyncComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> AdminPage <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./components/AdminPageComponent.vue&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AdminPage</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-加载与错误状态" tabindex="-1"><a class="header-anchor" href="#_3-加载与错误状态" aria-hidden="true">#</a> 3. 加载与错误状态</h4><p>异步操作不可避免地会涉及到加载和错误状态，因此 defineAsyncComponent() 也支持在高级选项中处理这些状态：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> AsyncComp <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">loader</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./Foo.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//加载异步组件的函数</span>
    <span class="token literal-property property">loadingComponnet</span><span class="token operator">:</span>LoadingComponent<span class="token punctuation">,</span> <span class="token comment">//加载异步组件时使用的组件</span>
    <span class="token literal-property property">delay</span><span class="token operator">:</span><span class="token number">200</span> <span class="token comment">//展示加载组件前的延迟时间，默认为 200ms</span>
    <span class="token literal-property property">errorComponent</span><span class="token operator">:</span>ErrorComponent<span class="token punctuation">,</span> <span class="token comment">//加载失败后展示的组件</span>
    <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">3000</span> <span class="token comment">//超时时间，若超时也会显示errorComponent，默认是Infinity</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-加载组件" tabindex="-1"><a class="header-anchor" href="#_3-1-加载组件" aria-hidden="true">#</a> 3.1 加载组件</h5><p>如果提供了一个加载组件，它将在内部组件加载时先行显示。在加载组件显示之前有一个默认的 200ms 延迟——这是因为在网络状况较好时，加载完成得很快，加载组件和最终组件之间的替换太快可能产生闪烁，反而影响用户感受。</p><h5 id="_3-2-报错组件" tabindex="-1"><a class="header-anchor" href="#_3-2-报错组件" aria-hidden="true">#</a> 3.2 报错组件</h5><p>如果提供了一个报错组件，则它会在加载器函数返回的 Promise 抛错时被渲染。你还可以指定一个超时时间，在请求耗时超过指定时间时也会渲染报错组件。</p><h4 id="_4-搭配suspense使用" tabindex="-1"><a class="header-anchor" href="#_4-搭配suspense使用" aria-hidden="true">#</a> 4. 搭配Suspense使用</h4><p>异步组件可以搭配内置的 <code>&lt;Suspense&gt;</code> 组件一起使用。</p><p>详见：内部组件-&gt;Suspense</p>`,27),o=[t];function c(i,l){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","4-8.异步组件.html.vue"]]);export{u as default};
