import{_ as p,r as e,o,c,a as s,b as n,d as l,e as a}from"./app-f9b28035.js";const i={},u=a(`<h2 id="i-对象的扩展" tabindex="-1"><a class="header-anchor" href="#i-对象的扩展" aria-hidden="true">#</a> Ⅰ. 对象的扩展</h2><h4 id="_1-属性的简洁表示法" tabindex="-1"><a class="header-anchor" href="#_1-属性的简洁表示法" aria-hidden="true">#</a> 1. 属性的简洁表示法</h4><p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span><span class="token punctuation">;</span>
baz <span class="token comment">// {foo: &quot;bar&quot;}</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">foo</span><span class="token operator">:</span> foo<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，变量foo直接写在大括号里面。这时，属性名就是变量名, 属性值就是变量值。</p><h4 id="_2-对象方法的简写" tabindex="-1"><a class="header-anchor" href="#_2-对象方法的简写" aria-hidden="true">#</a> 2. 对象方法的简写</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> school <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">eat</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//传统写法</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I can eat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">drink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//ES6写法，省略冒号和function</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I can drink&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//注意，简写的对象方法不能用作构造函数，会报错。</span>
<span class="token keyword">new</span> <span class="token class-name">school<span class="token punctuation">.</span>drink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-属性名表达式" tabindex="-1"><a class="header-anchor" href="#_3-属性名表达式" aria-hidden="true">#</a> 3. 属性名表达式</h4><p>ES6 允许字面量定义对象时，用 [ 表达式]作为对象的属性名和方法名，即把表达式放在方括号内，调用的时候，使用[]进行调用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> propKey <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>propKey<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;bc&#39;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;f&#39;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello f&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">[</span>proKey<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//true</span>
obj<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token operator">+</span><span class="token string">&#39;bc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//123</span>
obj<span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//true,可以直接调用变量对应的值</span>
obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span><span class="token comment">//true</span>
obj<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token string">&#39;f&#39;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//hello f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>属性名表达式与简洁表示法，不能同时使用，会报错。</li><li>属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object Object]</li></ul><h4 id="_4-方法的name属性" tabindex="-1"><a class="header-anchor" href="#_4-方法的name属性" aria-hidden="true">#</a> 4. 方法的name属性</h4><p>函数的name属性，返回函数名。对象方法也是函数，因此也有name属性，返回方法名。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>person<span class="token punctuation">.</span>eat<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token comment">//eat</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果对象的方法使用了getter和setter，则name属性不是在该方法上面，而是该方法的属性的描述对象的get和set属性上面，返回值是方法名前加上get和set。</p><p>bind方法创造的函数，name属性返回bound加上原函数的名字；Function构造函数创造的函数，name属性返回anonymous。</p><h4 id="_5-属性的可枚举性" tabindex="-1"><a class="header-anchor" href="#_5-属性的可枚举性" aria-hidden="true">#</a> 5. 属性的可枚举性</h4><h5 id="_5-1-descriptor" tabindex="-1"><a class="header-anchor" href="#_5-1-descriptor" aria-hidden="true">#</a> 5.1 descriptor</h5><p>对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。</p><p>Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">uname</span><span class="token operator">:</span><span class="token string">&#39;jinno&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">&#39;uname&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//可枚举</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;jinno&quot;</span> <span class="token punctuation">,</span><span class="token comment">//值</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-enumerable" tabindex="-1"><a class="header-anchor" href="#_5-2-enumerable" aria-hidden="true">#</a> 5.2 enumerable</h5><p>描述对象的enumerable属性，称为“可枚举性”，如果该属性为false，就表示某些操作会忽略当前属性，（当该属性不存在，比如遍历的时候不遍历该属性）。引入“可枚举”（enumerable）这个概念的最初目的，就是让某些属性可以规避掉for...in操作，不然所有内部属性和方法都会被遍历到，比如toString方法，和length属性。ES6 规定，所有 Class 的原型的方法都是不可枚举的。</p><ul><li>for...in循环：只遍历对象自身的和继承的可枚举的属性。</li><li>Object.keys()：返回对象自身的所有可枚举的属性的键名。</li><li>JSON.stringify()：只串行化对象自身的可枚举的属性。</li><li>Object.assign()： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。</li></ul><p>注意：for...in循环会遍历继承的属性，而object.keys()不会，尽量用object.keys()。</p><h4 id="_6-属性的遍历" tabindex="-1"><a class="header-anchor" href="#_6-属性的遍历" aria-hidden="true">#</a> 6. 属性的遍历</h4><p>ES6，共有以下5中遍历方式，所有遍历都遵循一样的结果排序规则：先遍历数字键，升序排列；再遍历字符串键，根据时间升序；最后遍历Symbol，根据时间升序排列。</p><ul><li>for...in: for...in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</li><li>Object.keys(obj): Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</li><li>Object.getOwnPropertyNames(obj): Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</li><li>Object.getOwnPropertySymbols(obj): Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。</li><li>Reflect.ownKeys(obj): Reflect.ownKeys返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</li></ul><h4 id="_7-super关键字" tabindex="-1"><a class="header-anchor" href="#_7-super关键字" aria-hidden="true">#</a> 7. super关键字</h4><p>关键字super，指向当前对象的原型对象（this指向的是当前对象）。</p><p>注意，super关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错，且该方法必须是方法的简写形式，冒号形式，只是将super用在了函数中，然后将函数赋值给属性，依然会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">uname</span><span class="token operator">:</span><span class="token string">&#39;aaron&#39;</span><span class="token punctuation">,</span>
  <span class="token function">fatherName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//仅这种方式支持super关键字</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>uname<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> father <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">uname</span><span class="token operator">:</span><span class="token string">&#39;jinno&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// Object.setPrototypeOf(son,father);</span>
son<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> father<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span><span class="token function">fatherName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用super调用原型对象的属性或方法时，this还是指向当前对象。</p><h4 id="_8-对象的扩展运算符" tabindex="-1"><a class="header-anchor" href="#_8-对象的扩展运算符" aria-hidden="true">#</a> 8. 对象的扩展运算符</h4><h5 id="_8-1-拷贝对象" tabindex="-1"><a class="header-anchor" href="#_8-1-拷贝对象" aria-hidden="true">#</a> 8.1 拷贝对象</h5><p>对象的扩展运算符（...）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>a<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{a: 1, b: 2}</span>
<span class="token comment">//由于数组是特殊的对象，所以对象的扩展运算符也可以用于数组。</span>
<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//{0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;}</span>

<span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span> <span class="token comment">// { a: 1 },空对象无任何结果</span>
<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.1</span><span class="token punctuation">}</span> <span class="token comment">// {} //非对象，将自动转为对象(空包装对象)</span>

<span class="token comment">//字符串将转为类似数组的对象</span>
<span class="token punctuation">{</span><span class="token operator">...</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span> <span class="token comment">// {0: &quot;h&quot;, 1: &quot;e&quot;, 2: &quot;l&quot;, 3: &quot;l&quot;, 4: &quot;o&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_8-2-object-assign" tabindex="-1"><a class="header-anchor" href="#_8-2-object-assign" aria-hidden="true">#</a> 8.2 Object.assign</h5><p>对象的扩展运算符等同于使用Object.assign()方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> aClone <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>a <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">let</span> aClone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_8-3-object-create完整克隆" tabindex="-1"><a class="header-anchor" href="#_8-3-object-create完整克隆" aria-hidden="true">#</a> 8.3 Object.create完整克隆</h5><p>上面的例子只是拷贝了对象实例的属性，如果想完整克隆一个对象，还拷贝对象原型的属性，可以采用Object.create。</p><p><code>Object.create(proto, [propertiesObject])</code>，创建一个新对象，使用现有的对象来提供新创建的对象的proto。proto : 必须。表示新建对象的原型对象，即该参数会被赋值到目标对象该参数可以是null， 对象， 函数的prototype属性。propertiesObject : 可选。 添加到新创建对象的可枚举属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> clone2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>
  Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  obj
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> clone3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
  Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span>
  Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_8-4-合并对象" tabindex="-1"><a class="header-anchor" href="#_8-4-合并对象" aria-hidden="true">#</a> 8.4 合并对象</h5><p>扩展运算符可以用于合并两个对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ab <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">let</span> ab <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_8-5-覆盖属性" tabindex="-1"><a class="header-anchor" href="#_8-5-覆盖属性" aria-hidden="true">#</a> 8.5 覆盖属性</h5><p>用户自定义的属性放到扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> aWithOverrides <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//使用：复制对象时，定义自身的name属性</span>
<span class="token keyword">let</span> newVersion <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>previousVersion<span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;New Name&#39;</span> <span class="token comment">// Override the name property</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_8-6-默认属性" tabindex="-1"><a class="header-anchor" href="#_8-6-默认属性" aria-hidden="true">#</a> 8.6 默认属性</h5><p>如果把自定义属性放在扩展运算符前面，就变成了设置新对象的默认属性值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> aWithDefaults <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">...</span>a <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ii-对象新增方法" tabindex="-1"><a class="header-anchor" href="#ii-对象新增方法" aria-hidden="true">#</a> Ⅱ. 对象新增方法</h2>`,54),r={id:"_1-object-is",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#_1-object-is","aria-hidden":"true"},"#",-1),d={href:"http://Object.is",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。</p><p>不同之处只有两个：一是+0不等于-0，二是NaN等于自身。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">&#39;jinno&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;jinno&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//===true</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//false</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//false    || +0 === -0 //true</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token comment">//true   ||    NaN === NaN // false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-object-assign" tabindex="-1"><a class="header-anchor" href="#_2-object-assign" aria-hidden="true">#</a> 2. Object.assign</h4><p>用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> source1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> source2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source1<span class="token punctuation">,</span> source2<span class="token punctuation">)</span><span class="token punctuation">;</span>
target <span class="token comment">// {a:1, b:2, c:3}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数1是目标对象，其他参数都是源对象。如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。可使用(...)对象的扩展运算符替代。</p><h5 id="_2-1-示例" tabindex="-1"><a class="header-anchor" href="#_2-1-示例" aria-hidden="true">#</a> 2.1 示例</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.只有一个参数，直接返回该参数</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">===</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//2.undefined和null无法转为对象</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错</span>
<span class="token comment">//3.非对象参数出现在源对象位置，会被转为对象，无法转对象就会跳过</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//跳过null</span>
<span class="token comment">//4.字符串在源对象位置，会转为对象，其他的不产生效果</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&#39;ab&#39;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token punctuation">{</span><span class="token string-property property">&quot;0&quot;</span><span class="token operator">:</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;1&quot;</span><span class="token operator">:</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">}</span><span class="token comment">//数组转对象，其他的跳过</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-object-assign拷贝的限制" tabindex="-1"><a class="header-anchor" href="#_2-2-object-assign拷贝的限制" aria-hidden="true">#</a> 2.2 Object.assign拷贝的限制</h5><p>只拷贝源对象的自身属性（不拷贝继承属性），不拷贝不可枚举的属性（enumerable: false）。</p><p>属性名为 Symbol 值的属性，也会被Object.assign()拷贝。</p>`,12);function m(b,h){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,s("h4",r,[k,n(" 1. "),s("a",d,[n("Object.is"),l(t)]),n("()")]),v])}const j=p(i,[["render",m],["__file","2-6.对象扩展.html.vue"]]);export{j as default};
