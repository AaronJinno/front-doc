import{_ as n,o as s,c as a,e}from"./app-2b89a278.js";const p={},t=e(`<h2 id="i-symbol" tabindex="-1"><a class="header-anchor" href="#i-symbol" aria-hidden="true">#</a> Ⅰ. Symbol</h2><h4 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1. 介绍</h4><p>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。它是 JS 语言的第七种数据类型，是一种类似于字符串的数据类型。</p><p>Symbol的值可以转为字符串和布尔值（true），转其他的类型会报错。相当于，Symbol创建了一个唯一的随机字符串，然后用该字符串作为对象的健名。因此Symbol是个类似字符串的数据类型</p><h4 id="_2-意义" tabindex="-1"><a class="header-anchor" href="#_2-意义" aria-hidden="true">#</a> 2. 意义</h4><p>ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入Symbol的原因。</p><h4 id="_3-symbol特点" tabindex="-1"><a class="header-anchor" href="#_3-symbol特点" aria-hidden="true">#</a> 3. Symbol特点</h4><ul><li>Symbol的值是唯一的，用来解决命名冲突的问题</li><li>Symbol值不能与其他数据类型进行运算 <ul><li>包括：四则运算、比较、拼接字符串</li></ul></li><li>Symbol定义的对象属性不能使用for...in循环遍历，但可以使用Reflect.ownKeys来获取对象的所有键名。</li><li>Symbol 值都是不相等的，这意味着 Symbol 值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。</li><li>Symbol 值作为对象属性名时，不能用点运算符,要使用[]</li><li>Symbol 值作为属性名时，该属性还是公开属性，不是私有属性。</li></ul><h4 id="_4-创建symbol" tabindex="-1"><a class="header-anchor" href="#_4-创建symbol" aria-hidden="true">#</a> 4. 创建Symbol</h4><h5 id="_4-1-直接创建" tabindex="-1"><a class="header-anchor" href="#_4-1-直接创建" aria-hidden="true">#</a> 4.1 直接创建</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token keyword">typeof</span> s <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印：Symbol() &quot;symbol&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-传入描述字符串" tabindex="-1"><a class="header-anchor" href="#_4-2-传入描述字符串" aria-hidden="true">#</a> 4.2 传入描述字符串</h5><p>描述字符串只是用来描述的，让程序员能够识别不同的Symbol。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;Jinno&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;Jinno&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印的时候多了描述字符串：Symbol(Jinno);</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Symbol(Jinno)</span>
s2 <span class="token operator">!=</span> s3<span class="token punctuation">;</span><span class="token comment">//参数只是描述，相同参数的Symbol函数的值是不同的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果 Symbol 的参数是一个对象，就会调用该对象的toString方法，将其转为字符串，然后才生成一个 Symbol 值。</li><li>参数只是描述，相同参数的Symbol函数（或没有参数）的值是不同的</li></ul><h4 id="_5-symbol-prototype-description" tabindex="-1"><a class="header-anchor" href="#_5-symbol-prototype-description" aria-hidden="true">#</a> 5. Symbol.prototype.description</h4><p>创建 Symbol 的时候，可以添加一个描述。使用description可以读取该描述信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Symbol的描述信息就是foo</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sym<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-对象中添加symbol类型的属性" tabindex="-1"><a class="header-anchor" href="#_6-对象中添加symbol类型的属性" aria-hidden="true">#</a> 6. 对象中添加Symbol类型的属性</h4><p>前提：我们向一个已经创建的对象中添加一些属性（方法），但是我们不确定该属性是否已经在对象中存在了，比如向game对象中，添加up方法，我们无法保证game中原先没有up方法。</p><p>我们可以使用Symbol类型的值作为属性的变量，创造独一无二的属性变量，避免冲突。</p><p>注意，Symbol 值作为属性名时，该属性还是公开属性，不是私有属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> game <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">//源game对象</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">&quot;jinno&quot;</span><span class="token punctuation">;</span>
    <span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是源up属性&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//直接向对象添加属性，可能会出错</span>
game<span class="token punctuation">.</span><span class="token function-variable function">up</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//直接添加属性，可能添加已经存在的属性，造成覆盖。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正常使用时，都会先赋值给一个变量，然后再使用，不然无法获取添加的键。</p><h5 id="_6-1-向对象中添加" tabindex="-1"><a class="header-anchor" href="#_6-1-向对象中添加" aria-hidden="true">#</a> 6.1 向对象中添加</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//直接使用中括号添加</span>
<span class="token keyword">let</span> uname <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
game<span class="token punctuation">[</span>uanme<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;jinno&quot;</span><span class="token punctuation">;</span>
game<span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;up&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;up-2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-2-直接使用symbol定义" tabindex="-1"><a class="header-anchor" href="#_6-2-直接使用symbol定义" aria-hidden="true">#</a> 6.2 直接使用Symbol定义</h5><p>需要在Symbol外加中括号，最好加上描述。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> uname <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> game <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;lrs&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>uname<span class="token punctuation">]</span><span class="token operator">:</span>jinno<span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;do&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;do&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//name:lrs;Symbol(say):f();Symbol(do):f()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-获取对象的symbol类型属性" tabindex="-1"><a class="header-anchor" href="#_7-获取对象的symbol类型属性" aria-hidden="true">#</a> 7. 获取对象的Symbol类型属性</h4><p>注意：上面两个定义方式，都是无法在对象外面获取到属性的，因为我们不知道到属性名，Symbol(&#39;name&#39;)只是一个Symbol类型数据，加了描述，无法通过他确定唯一的Symbol值，因此，要想后续能获取到Symbol类型的属性，需要将其赋值给一个变量。</p><h5 id="_7-1-将symbol属性赋值给变量" tabindex="-1"><a class="header-anchor" href="#_7-1-将symbol属性赋值给变量" aria-hidden="true">#</a> 7.1 将Symbol属性赋值给变量</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//外部添加</span>
<span class="token keyword">let</span> up <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;up&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> game <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
game<span class="token punctuation">[</span>up<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello-up&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//直接定义</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;aaron&quot;</span><span class="token punctuation">,</span> <span class="token comment">//字符串类型</span>
    <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">:</span><span class="token string">&quot;jinno&quot;</span><span class="token punctuation">,</span> <span class="token comment">//Symbol类型</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7-2-获取symbol类型的属性" tabindex="-1"><a class="header-anchor" href="#_7-2-获取symbol类型的属性" aria-hidden="true">#</a> 7.2 获取Symbol类型的属性</h5><p>需要用中括号获取，不能用点运算符，因为点运算符后面总是字符。<br> 括号内是代表Symbol名字的变量，不能加引号。</p><p>取值的时候不用担心变量覆盖问题，因为其他属性要加引号。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>game<span class="token punctuation">[</span>up<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用Symbol(&#39;up&#39;)方法</span>
person<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//jinno</span>
person<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//aaron</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-属性名的遍历" tabindex="-1"><a class="header-anchor" href="#_8-属性名的遍历" aria-hidden="true">#</a> 8. 属性名的遍历</h4><p>Symbol 作为属性名，遍历对象的时候，该属性不会出现在for...in、for...of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。</p><h5 id="_8-1-object-getownpropertysymbols" tabindex="-1"><a class="header-anchor" href="#_8-1-object-getownpropertysymbols" aria-hidden="true">#</a> 8.1 Object.getOwnPropertySymbols</h5><p>但是，它也不是私有属性，有一个Object.getOwnPropertySymbols()方法，可以获取指定对象的所有 Symbol 属性名。该方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[Symbol(a),Symbol(b)]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_8-2-reflect-ownkeys" tabindex="-1"><a class="header-anchor" href="#_8-2-reflect-ownkeys" aria-hidden="true">#</a> 8.2 Reflect.ownKeys()</h5><p>Reflect.ownKeys()方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Reflect<span class="token punctuation">.</span><span class="token function">wonKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_9-symbol-for" tabindex="-1"><a class="header-anchor" href="#_9-symbol-for" aria-hidden="true">#</a> 9. Symbol.for()</h4><p>Symbol.for()方法，接受一个字符串作为参数。<br> 通过该方式创建，我们可以通过描述字符串得到唯一的Symbol值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;aaron&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;aaron&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s3 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;Jinno&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s4 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;Jinno&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s1 <span class="token operator">===</span> s2<span class="token punctuation">;</span> <span class="token comment">//false</span>
s3 <span class="token operator">===</span> s4<span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Symbol.for()与Symbol()这两种写法，都会生成新的 Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。Symbol.for()不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用Symbol.for(&quot;cat&quot;)30 次，每次都会返回同一个 Symbol 值，但是调用Symbol(&quot;cat&quot;)30 次，会返回 30 个不同的 Symbol 值。</p><h5 id="_9-1-symbol-for-的使用" tabindex="-1"><a class="header-anchor" href="#_9-1-symbol-for-的使用" aria-hidden="true">#</a> 9.1 Symbol.for()的使用</h5><p>通过Symbol.for定义的Symbol，可以直接使用中括号的方式进行使用，而不用进行赋值。</p><h5 id="_9-2-symbol-keyfor" tabindex="-1"><a class="header-anchor" href="#_9-2-symbol-keyfor" aria-hidden="true">#</a> 9.2 Symbol.keyFor</h5><p>返回一个已登记的 Symbol 类型值的key，未登记则返回undefined。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;s1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s1</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;s2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_9-3-注意事项" tabindex="-1"><a class="header-anchor" href="#_9-3-注意事项" aria-hidden="true">#</a> 9.3 注意事项</h5><p>Symbol.for()为 Symbol 值登记的名字，是全局环境的，不管有没有在全局环境运行。即使是在函数作用域定义的，也是在全局进行登记。</p><h2 id="ii-应用场景" tabindex="-1"><a class="header-anchor" href="#ii-应用场景" aria-hidden="true">#</a> Ⅱ. 应用场景</h2><h4 id="_1-使用symbol来替代常量" tabindex="-1"><a class="header-anchor" href="#_1-使用symbol来替代常量" aria-hidden="true">#</a> 1. 使用Symbol来替代常量</h4><p>用于定义一组常量，保证这组常量的值都是不相等的。<br> 常量使用 Symbol 值最大的好处，就是其他任何值都不可能有相同的值了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">TYPE_AUDIO</span> <span class="token operator">=</span> <span class="token string">&#39;AUDIO&#39;</span>
<span class="token keyword">const</span> <span class="token constant">TYPE_VIDEO</span> <span class="token operator">=</span> <span class="token string">&#39;VIDEO&#39;</span>
<span class="token keyword">const</span> <span class="token constant">TYPE_IMAGE</span> <span class="token operator">=</span> <span class="token string">&#39;IMAGE&#39;</span>
<span class="token comment">//使用Symbol作为常量的值</span>
<span class="token keyword">const</span> <span class="token constant">TYPE_AUDIO</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">TYPE_VIDEO</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">TYPE_IMAGE</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">handleFileResource</span><span class="token punctuation">(</span><span class="token parameter">resource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">TYPE_AUDIO</span><span class="token operator">:</span>
      <span class="token function">playAudio</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token constant">TYPE_VIDEO</span><span class="token operator">:</span>
      <span class="token function">playVideo</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token constant">TYPE_IMAGE</span><span class="token operator">:</span>
      <span class="token function">previewImage</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Unknown type of resource&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-消除魔术字符串" tabindex="-1"><a class="header-anchor" href="#_2-消除魔术字符串" aria-hidden="true">#</a> 2. 消除魔术字符串</h4><h5 id="_2-1-魔术字符串" tabindex="-1"><a class="header-anchor" href="#_2-1-魔术字符串" aria-hidden="true">#</a> 2.1 魔术字符串</h5><p>魔术字符串指的是，在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。风格良好的代码，应该尽量消除魔术字符串，改由含义清晰的变量代替。</p><p>当我们修改字符串的时候，非常麻烦，要每个都修改，但是修改变量的值就很容易。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//计算几何面积的函数，参数是几何的类型,和几何的数值</span>
<span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token parameter">shape<span class="token punctuation">,</span>options</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> area <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//针对不同的集合类型使用不同的求值方法</span>
        <span class="token keyword">case</span> <span class="token string">&#39;Triangle&#39;</span><span class="token operator">:</span> <span class="token comment">//这个字符串就是魔术字符串</span>
            area <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">*</span> options<span class="token punctuation">.</span>width  <span class="token operator">*</span> options<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token operator">...</span>    
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> area<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">getArea</span><span class="token punctuation">(</span><span class="token string">&#39;Triangle&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">width</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token literal-property property">height</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，字符串Triangle就是一个魔术字符串。它多次出现，与代码形成“强耦合”，不利于将来的修改和维护。常用的消除魔术字符串的方法，就是把它写成一个变量。</p><h5 id="_2-2-消除魔术字符串" tabindex="-1"><a class="header-anchor" href="#_2-2-消除魔术字符串" aria-hidden="true">#</a> 2.2 消除魔术字符串</h5><p>case选项由字符串换成了变量，消除了强耦合。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> shapeType <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">triangle</span><span class="token operator">:</span><span class="token string">&#39;Triangle&#39;</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token keyword">case</span> shapeType<span class="token punctuation">.</span>triangle<span class="token operator">:</span> <span class="token comment">//替代case &#39;Triangle&#39;:</span>
<span class="token function">getArea</span><span class="token punctuation">(</span>shapeType<span class="token punctuation">.</span>triangle<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">width</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token literal-property property">height</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用时指定变量即可    </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-使用symbol消除" tabindex="-1"><a class="header-anchor" href="#_2-3-使用symbol消除" aria-hidden="true">#</a> 2.3 使用Symbol消除</h5><p>仔细分析，可以发现shapeType.triangle等于哪个值并不重要，只要确保不会跟其他shapeType属性的值冲突即可。因此，这里就很适合改用 Symbol 值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> shapeType <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">triangle</span><span class="token operator">:</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-利用symbol定义内部方法" tabindex="-1"><a class="header-anchor" href="#_3-利用symbol定义内部方法" aria-hidden="true">#</a> 3. 利用Symbol定义内部方法</h4><p>由于以 Symbol 值作为键名，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。</p>`,74),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","3-1.Symbol.html.vue"]]);export{r as default};
