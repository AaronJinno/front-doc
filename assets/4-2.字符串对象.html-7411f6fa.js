import{_ as n,P as a,Q as s,a5 as e}from"./framework-3728cbf1.js";const t={},p=e(`<h2 id="i-包装类" tabindex="-1"><a class="header-anchor" href="#i-包装类" aria-hidden="true">#</a> Ⅰ. 包装类</h2><p>JS提供了三个包装类 (构造函数)，通过这三个包装类可以将基本数据类型的数据转换为对象。</p><h4 id="_1-string" tabindex="-1"><a class="header-anchor" href="#_1-string" aria-hidden="true">#</a> 1. String()</h4><p>将基本数据类型字符串转换为String对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//object类型hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-number" tabindex="-1"><a class="header-anchor" href="#_2-number" aria-hidden="true">#</a> 2. Number()</h4><p>将基本数据类型数值转换为Number对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">//number</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//object类型</span>
<span class="token comment">//想num中添加一个属性</span>
num<span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token string">&quot;aaa&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span>log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-boolean" tabindex="-1"><a class="header-anchor" href="#_3-boolean" aria-hidden="true">#</a> 3. Boolean()</h4><p>将基本数据类型的布尔值转换为Boolean对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> bool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-注意事项" aria-hidden="true">#</a> 4. 注意事项</h4><p>开发中，不会使用基本数据类型的对象，如果使用基本数据类型的对象，在做一些比较时，可能遇到意外的结果，互相转换时也会发生意外。</p><h4 id="_5-意义" tabindex="-1"><a class="header-anchor" href="#_5-意义" aria-hidden="true">#</a> 5. 意义</h4><p>包装类是留给浏览器自己用的，临时将基本数据类型转为对象的。</p><p>方法和属性只能添加给对象，不能添加给基本数据类型，当我们对一些基本数据类型的值取调用属性和方法时，浏览器会临时（用完就转回去了）使用包装类将其转换为对象，然后在调用对象的属性和方法。</p><h2 id="ii-字符串对象" tabindex="-1"><a class="header-anchor" href="#ii-字符串对象" aria-hidden="true">#</a> Ⅱ. 字符串对象</h2><p>字符串在进行属性和方法操作时，浏览器会临时将他是用包装类转换为字符串对象，操作完后再转回去。【注意操作时，用变量接收操作的结果】。</p><p>在底层字符串是以字符数组的形式保存的。因此字符串的操作与数组类似。</p><ul><li>length属性：可以用来获取字符串的长度</li><li>中括号取值：类似于数组，也可以直接用中括号进行取值</li></ul><h4 id="_1-indexof-检索字符串" tabindex="-1"><a class="header-anchor" href="#_1-indexof-检索字符串" aria-hidden="true">#</a> 1. indexOf()：检索字符串</h4><p>获得字符在字符串中第一次出现的位置（索引），如果没有找到指定的内容，就返回-1</p><ul><li>参数1：待检索的字符串</li><li>参数2：可惜，指定开始查找的位置（索引）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;fuck you&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str_index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;u&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str_index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-lastindexof-获得字符在字符串中最后一次出现的位置" tabindex="-1"><a class="header-anchor" href="#_2-lastindexof-获得字符在字符串中最后一次出现的位置" aria-hidden="true">#</a> 2. lastIndexOf()：获得字符在字符串中最后一次出现的位置</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;fuck you&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str_last <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;u&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str_last<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-split-按照分隔符将字符串拆分成数组" tabindex="-1"><a class="header-anchor" href="#_3-split-按照分隔符将字符串拆分成数组" aria-hidden="true">#</a> 3. split()：按照分隔符将字符串拆分成数组</h4><ul><li>参数1：分隔符，按照什么分隔符进行拆分，如果传递一个空作为参数，则会将每个字符都拆分为数组中的一个元素。</li><li>参数2：可选，限制要几个元素</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;I am Aaron Jinno&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按空格进行拆分</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-replace-a-b-将字符串中的a替换成b" tabindex="-1"><a class="header-anchor" href="#_4-replace-a-b-将字符串中的a替换成b" aria-hidden="true">#</a> 4. replace(a,b)：将字符串中的a替换成b</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;I am Aaron Jinno234234&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//设置正则</span>
<span class="token keyword">var</span> new_str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">repalce</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-charat-index-查找index这个索引处对应的字符" tabindex="-1"><a class="header-anchor" href="#_5-charat-index-查找index这个索引处对应的字符" aria-hidden="true">#</a> 5. charAt(index)：查找index这个索引处对应的字符</h4><p>注意：索引是从0开始的。跟直接使用[]取值是一样的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;Aaron Jinno&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> character <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//charCodeAt(index);返回字符对应的Unicode编码</span>
<span class="token keyword">var</span> charcode <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-slice-start-end-截取字符串。" tabindex="-1"><a class="header-anchor" href="#_6-slice-start-end-截取字符串。" aria-hidden="true">#</a> 6. slice(start,end)：截取字符串。</h4><p>从start开始截取，截取到end这个位置，包含start不包含end。【两个参数都是索引】。</p><p>参数2可以省略，这会截取到最后，也可以传递负数作为参数，这将从后面开始截取。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;aaronjinno&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> new_str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//substring():类似slice，也可以用来截取一个字符串。</span>
<span class="token comment">//不同的时，不能接受负值，而且他会自动交互参数的位置，如果参数2小于参数1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-转换大小写" tabindex="-1"><a class="header-anchor" href="#_7-转换大小写" aria-hidden="true">#</a> 7. 转换大小写</h4><ul><li>toLowerCase()：将字符串转换成小写</li><li>toUpperCase()：将字符串转换成大写</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;Aaron Jinno&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> upper <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> lower <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>upper<span class="token punctuation">,</span>lower<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-fromcharcode-根据字符编码去获取字符" tabindex="-1"><a class="header-anchor" href="#_8-fromcharcode-根据字符编码去获取字符" aria-hidden="true">#</a> 8. fromCharCode：根据字符编码去获取字符</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">formCharCode</span><span class="token punctuation">(</span><span class="token number">0x2323</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以传10进制，也可以传16进制</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_9-concat-连接两个或多个字符串" tabindex="-1"><a class="header-anchor" href="#_9-concat-连接两个或多个字符串" aria-hidden="true">#</a> 9. concat()：连接两个或多个字符串</h4><p>作用跟 + 一样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,46),o=[p];function c(i,l){return a(),s("div",null,o)}const u=n(t,[["render",c],["__file","4-2.字符串对象.html.vue"]]);export{u as default};
