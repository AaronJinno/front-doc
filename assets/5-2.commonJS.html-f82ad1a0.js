import{_ as t,r as p,o,c as i,a as n,b as s,d as c,e as a}from"./app-fb2cd4f5.js";const l={},u=a(`<h2 id="i-介绍" tabindex="-1"><a class="header-anchor" href="#i-介绍" aria-hidden="true">#</a> Ⅰ. 介绍</h2><h4 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h4><p>Node 应用由模块组成，采用 CommonJS 模块规范。</p><p>每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。</p><ul><li>前提：需要NodeJS环境</li><li>模块的暴露与加载：模块通过module对象暴露自己的数据。每个文件都是模块，模块通过require加载其他模块。</li></ul><h4 id="_2-commonjs模块的特点" tabindex="-1"><a class="header-anchor" href="#_2-commonjs模块的特点" aria-hidden="true">#</a> 2. CommonJS模块的特点</h4><ul><li>所有代码都运行在模块作用域，不会污染全局作用域。</li><li>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</li><li>模块加载的顺序，按照其在代码中出现的顺序。</li></ul><h4 id="_3-模块类型" tabindex="-1"><a class="header-anchor" href="#_3-模块类型" aria-hidden="true">#</a> 3. 模块类型</h4><p>在node中，一个JS文件就是一个模块。每个模块具有独立的空间，它们互不干扰。</p><ul><li>核心模块：由node引擎提供的模块。核心模块的标识就是模块的名字。</li><li>文件模块：由用户自己创建的模块，文件模块的标识就是文件的路径</li></ul><h4 id="_4-模块的函数化" tabindex="-1"><a class="header-anchor" href="#_4-模块的函数化" aria-hidden="true">#</a> 4. 模块的函数化</h4><p>当node在执行模块中的代码时，它会首先在代码的最外层，添加如下函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span>require<span class="token punctuation">,</span>module<span class="token punctuation">,</span>__filename<span class="token punctuation">,</span>__dirname</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上模块中的代码都包装在一个函数中执行，并且在函数执行时，同时传递进了5个实参</p><ul><li>exports : 该对象用来将变量或函数暴露到外部</li><li>require : 函数，用来引入外部的模块</li><li>module 对象: <ul><li>module代表的是当前模块本身</li><li>exports就是module的属性</li><li>既可以使用 exports 导出数据，也可以使用module.exports导出数据</li></ul></li><li>__filename : 当前模块的完整路径</li><li>__dirname : 当前模块所在文件夹的完整路径</li></ul><h4 id="_5-module对象" tabindex="-1"><a class="header-anchor" href="#_5-module对象" aria-hidden="true">#</a> 5. module对象</h4><p>Node内部提供一个Module构建函数。所有模块都是Module的实例。</p><p>CommonJS规范规定，每个模块内部，都有一个module对象，代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。加载某个模块，其实是加载该模块的module.exports属性。</p><p>module对象的属性如下：</p>`,19),r={href:"http://module.id",target:"_blank",rel:"noopener noreferrer"},d=n("li",null,"module.filename 模块的文件名，带有绝对路径。",-1),k=n("li",null,"module.loaded 返回一个布尔值，表示模块是否已经完成加载。",-1),m=n("li",null,"module.parent 返回一个对象，表示调用该模块的模块（null表示命令行）。",-1),v=n("li",null,"module.children 返回一个数组，表示该模块要用到的其他模块。",-1),h=n("li",null,"module.exports 表示模块对外输出的值【暴露语法】。",-1),b=a(`<h2 id="ii-使用" tabindex="-1"><a class="header-anchor" href="#ii-使用" aria-hidden="true">#</a> Ⅱ. 使用</h2><h4 id="_1-module-exports-暴露模块" tabindex="-1"><a class="header-anchor" href="#_1-module-exports-暴露模块" aria-hidden="true">#</a> 1. module.exports：暴露模块</h4><p>module.exports属性表示当前模块对外输出的接口，其他文件加载该模块，实际上就是读取module.exports变量。</p><p>module.exports初始值是一个空的对象，我们暴露模块时，就是将数据或方法复制给该全局对象。引入模块时，我们获得的是该对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//某模块a.js</span>
<span class="token keyword">let</span> age  <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token comment">//一个个导出</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>say <span class="token operator">=</span> say<span class="token punctuation">;</span>

<span class="token comment">//整体导出</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span>age<span class="token punctuation">;</span>
    <span class="token literal-property property">say</span><span class="token operator">:</span>say<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果只导出一个值，可以直接向module.exports复制。</p><h4 id="_2-exports变量" tabindex="-1"><a class="header-anchor" href="#_2-exports变量" aria-hidden="true">#</a> 2. exports变量</h4><p>为了方便，Node为每个模块提供一个exports变量，指向module.exports。这等同在每个模块头部，有一行这样的命令。可以直接使用exports变量代替module.exprots</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用exports：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//一个个导出</span>
exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//整体导出</span>
exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不能直接将exports变量指向一个值，因为这样等于切断了exports与module.exports的联系，因为exports只是module.exports的一个引用，重新复制就切断了引用。</p><h4 id="_3-require引入" tabindex="-1"><a class="header-anchor" href="#_3-require引入" aria-hidden="true">#</a> 3. require引入</h4><p>引入的模块是一个对象。里面包含模块暴露的各项数据和方法。<br> 如果模块输出的是单个函数，那引入的模块就会变成一个函数。</p><h5 id="_3-1-基本用法" tabindex="-1"><a class="header-anchor" href="#_3-1-基本用法" aria-hidden="true">#</a> 3.1 基本用法</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.引入自定义模块</span>
<span class="token keyword">let</span> packName <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//xxx为模块文件的路径</span>

<span class="token comment">//2.引入第三方模块</span>
<span class="token keyword">let</span> packName <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//xxx为npm下载的包名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-导入规则" tabindex="-1"><a class="header-anchor" href="#_3-2-导入规则" aria-hidden="true">#</a> 3.2 导入规则</h5><p>通常：我们会设置一个package.json文件，作为入口文件，来加载其他模块。</p><ul><li>文件后缀：默认是.js，可以省略。如果找不到，Node会尝试为文件名添加.js、.json、.node后，再去搜索。</li><li>&quot; / &quot;开头：加载位于绝对路径的模块文件</li><li>&quot; ./ &quot;开头：加载当前脚本统一目录下的模块文件</li><li>没有路径开头：npm安装的文件（全局或局部），或查找当前文件夹</li><li>以上流程还找不到会去递归寻找package.json文件，寻找main字段。</li><li>require.resolve()：可以获取加载的确切文件名</li></ul><h5 id="_3-3-模块的缓存" tabindex="-1"><a class="header-anchor" href="#_3-3-模块的缓存" aria-hidden="true">#</a> 3.3 模块的缓存</h5><p>第一次加载某个模块时，Node会缓存该模块。以后再加载该模块，就直接从缓存取出该模块的module.exports属性。</p><p>所有缓存的模块保存在require.cache之中，如果想删除模块的缓存，可以像下面这样写。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 删除指定模块的缓存</span>
<span class="token keyword">delete</span> require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 删除所有模块的缓存</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span>cache<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">delete</span> require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，缓存是根据绝对路径识别模块的，如果同样的模块名，但是保存在不同的路径，require命令还是会重新加载该模块。</p><h5 id="_3-4-node-path-环境变量" tabindex="-1"><a class="header-anchor" href="#_3-4-node-path-环境变量" aria-hidden="true">#</a> 3.4 NODE_PATH：环境变量</h5><div class="hint-container danger"><p class="hint-container-title">警告</p><p>一般不用，历史遗留的路径解决方案</p></div><p>Node执行一个脚本时，会先查看环境变量NODE_PATH。它是一组以冒号分隔的绝对路径。在其他位置找不到指定模块时，Node会去这些路径查找。<br> 如果遇到复杂的相对路径，可以添加到NODE_PATH环境变量中</p><h5 id="_3-5-模块的循环加载" tabindex="-1"><a class="header-anchor" href="#_3-5-模块的循环加载" aria-hidden="true">#</a> 3.5 模块的循环加载</h5><p>如果发生模块的循环加载，即A加载B，B又加载A，则B将加载A的不完整版本。</p><h4 id="_4-模块的加载机制" tabindex="-1"><a class="header-anchor" href="#_4-模块的加载机制" aria-hidden="true">#</a> 4. 模块的加载机制</h4><p>CommonJS模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</p><h2 id="iii-示例" tabindex="-1"><a class="header-anchor" href="#iii-示例" aria-hidden="true">#</a> Ⅲ. 示例</h2><p>模块化编码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//module1.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">fucntion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;modules1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//modules2.js</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;module2-foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    consoel<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;module2-bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引入模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> module1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./modules/module1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> module2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./modules/module2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> uniq <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;uniq&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第三方模块</span>

<span class="token comment">//使用模块</span>
<span class="token function">module1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//module1是个方法，可以直接进行运行。</span>
module2<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用module2中的foo方法</span>
<span class="token function">uniq</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用第三方包</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36);function x(_,f){const e=p("ExternalLinkIcon");return o(),i("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[s("module.id"),c(e)]),s(" 模块的识别符，通常是带有绝对路径的模块文件名。")]),d,k,m,v,h]),b])}const j=t(l,[["render",x],["__file","5-2.commonJS.html.vue"]]);export{j as default};
