import{_ as n,o as s,c as a,e as t}from"./app-f9b28035.js";const e={},p=t(`<h2 id="i-绘制直线" tabindex="-1"><a class="header-anchor" href="#i-绘制直线" aria-hidden="true">#</a> Ⅰ. 绘制直线</h2><p>绘制直线时，一般会用到 moveTo 与 lineTo 两个方法。</p><h4 id="_1-moveto方法" tabindex="-1"><a class="header-anchor" href="#_1-moveto方法" aria-hidden="true">#</a> 1. moveTo方法</h4><p>将光标移动到指定坐标点，绘制直线的时候以这个坐标点为起点。</p><ul><li>X 表示指定坐标点的横坐标</li><li>y 表示指定坐标点的纵坐标</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">moveTo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-lineto方法" tabindex="-1"><a class="header-anchor" href="#_2-lineto方法" aria-hidden="true">#</a> 2. lineTo方法</h4><p>在参数中指定坐标的终点，moveTo的坐标与lineTo坐标连成一条直线。</p><ul><li>x 表示直线终点的横坐标，</li><li>y 表示直线终点的纵坐标。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">lineTo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用该方法绘制完直线后，光标自动移动到 lineTo 方法的参数中所指定的直线终点。</p><h4 id="_3-举例" tabindex="-1"><a class="header-anchor" href="#_3-举例" aria-hidden="true">#</a> 3.举例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter">canvas1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    canvas1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;canvas1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context1 <span class="token operator">=</span> canvas1<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context1<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//起点坐标</span>
    context1<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//终点坐标</span>
    context1<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>
    context1<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//必须是stroke，fill不显示直线。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-绘制复杂图形" tabindex="-1"><a class="header-anchor" href="#ii-绘制复杂图形" aria-hidden="true">#</a> Ⅱ. 绘制复杂图形</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>根据直线可以绘制复杂的图形</p></div><h4 id="_1-创建复杂图形的原理" tabindex="-1"><a class="header-anchor" href="#_1-创建复杂图形的原理" aria-hidden="true">#</a> 1. 创建复杂图形的原理</h4><p>在创建路径时，需要使用 moveTo方法将光标移动到指定的直线起点，然后使用lineTo 方法在直线起点与直线终点之间创建路径，然后将光标移动到直线终点。</p><p>在下一次使用 lineTo 方法的时候，会以当前光标所在坐标点为直线起点，在下一个用 lineTo 方法指定的直线终点之间创建路径，不断重复这个过程，来完成复杂图形的路径的绘制。</p><ul><li>可以不进行beginPath，直接进行绘制线的坐标。</li><li>注意不要进行clothPath,不然所有线都从原点出发了。</li></ul><h4 id="_2-绘制复杂图形示例" tabindex="-1"><a class="header-anchor" href="#_2-绘制复杂图形示例" aria-hidden="true">#</a> 2. 绘制复杂图形示例</h4><p>循环调用 lineTo 语句来绘制图形。第一个lineTo 语句中指定的坐标点即直线起点，然后不断将直线绘制到下一个 lineTo 语句指定的直线终点，循环结束后关闭路径，最后一个坐标点与第一个坐标点自动闭合，使用 fill 语句填充图形。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByld</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>canvas <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span>；
    context<span class="token punctuation">.</span> fillStyle <span class="token operator">=</span> <span class="token string">&quot;#EEEEFF&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">var</span> dx <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span> <span class="token keyword">var</span> dy <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span> <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span><span class="token string">&quot;rgb(100,255,100)&quot;</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">&quot;rgb(0,0,100)&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token constant">O</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> dig <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">15</span> <span class="token operator">*</span> <span class="token number">11</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span> <span class="token punctuation">(</span>i<span class="token operator">*</span>dig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> y  <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">cos</span> <span class="token punctuation">(</span>i<span class="token operator">*</span>dig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        context <span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span> dx <span class="token operator">+</span> x <span class="token operator">*</span> s<span class="token punctuation">,</span>dy<span class="token operator">+</span>y<span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>  
    context<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-绘制矩形示例" tabindex="-1"><a class="header-anchor" href="#iii-绘制矩形示例" aria-hidden="true">#</a> Ⅲ. 绘制矩形示例</h2><p>绘制图形要在js脚本中绘制</p><h4 id="_1-取得canvas元素" tabindex="-1"><a class="header-anchor" href="#_1-取得canvas元素" aria-hidden="true">#</a> 1. 取得canvas元素</h4><p>用document . getElementByld 等方法取得 canvas 对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;canvas1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-创建context对象" tabindex="-1"><a class="header-anchor" href="#_2-创建context对象" aria-hidden="true">#</a> 2. 创建context对象</h4><p>进行图形绘制时，需要使用到图形上下文（即context对象）,图形上下文是一个封装了很多绘图功能的对象。<br> 需要使用 canvas 对象的 getContext 方法获得context对象。在 draw函数中，将参数设为“2D ”。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> ctx <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-填充或绘制边框" tabindex="-1"><a class="header-anchor" href="#_3-填充或绘制边框" aria-hidden="true">#</a> 3. 填充或绘制边框</h4><p>用 canvas 元素绘制图形的时候，有两种方式 — 填充 （fill）与绘制边框（stroke）。</p><h4 id="_4-设定绘图样式-style" tabindex="-1"><a class="header-anchor" href="#_4-设定绘图样式-style" aria-hidden="true">#</a> 4. 设定绘图样式（style）</h4><p>绘图的样式，主要是针对图形的颜色而言的，还有其他样式。</p><ul><li>fillStyle 属性 — 填充的样式，在该属性中填入填充的颜色值。</li><li>strokeStyle — 图形边框的样式。在该属性中填人边框的颜色值。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&quot;#EEEEFF&quot;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-指定线宽" tabindex="-1"><a class="header-anchor" href="#_5-指定线宽" aria-hidden="true">#</a> 5. 指定线宽</h4><p>使用图形上下文对象的 lineWidth 属性设置图形边框的宽度。在绘制图形的时候，任何直线都可以通过 lineWidth 属性指定直线的宽度。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context<span class="token punctuation">.</span>lineWidth<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-指定颜色值" tabindex="-1"><a class="header-anchor" href="#_6-指定颜色值" aria-hidden="true">#</a> 6. 指定颜色值</h4><p>通过 fillStyle 属性与 strokeStyle 属性指定，可使用单词、十六进制和RGB指定。</p><h4 id="_7-绘制矩形" tabindex="-1"><a class="header-anchor" href="#_7-绘制矩形" aria-hidden="true">#</a> 7. 绘制矩形</h4><p>分别使用 fillRect 方法与 strokeRect 方法来填充矩形和绘制矩形边框。<br> 这两个方法的定义如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span>
context<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>context 指的是图形上下文对象， x 是指矩形起点的横坐标， y 是指矩形起点的纵坐标，坐标原点为 canvas 画布的最左上角， width 是指矩形的长度， height 是指矩形的高。</p><h4 id="_8-整体绘制代码示例" tabindex="-1"><a class="header-anchor" href="#_8-整体绘制代码示例" aria-hidden="true">#</a> 8. 整体绘制代码示例</h4><p>在HTML中调用onload方法，从而调用JS代码中的draw方法，并将canvas 对象传入。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter">canvas1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 获取canvas对象</span>
    <span class="token keyword">var</span> canvas1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;canvas1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>canvas1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断canvas对象是否为空</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>canvas1<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;false&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//获取canvas上下文对象</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> canvas1<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置图形的颜色,空心和实心的要分别设置</span>
    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//设置线条的宽度-在绘制空心图形时有用</span>
    context<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//调用绘制图形的方法，来绘制图形</span>
    context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//可以继续绘制其他图形，如果坐标重合，后面的图形会覆盖前面的，</span>
    <span class="token comment">//超过坐标的图形会直接被舍弃</span>
    context<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个是擦除矩形</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-clearrect-擦除矩形" tabindex="-1"><a class="header-anchor" href="#_9-clearrect-擦除矩形" aria-hidden="true">#</a> 9. clearRect：擦除矩形</h4><p>该方法将指定的矩形区域中的图形进行擦除，使得矩形区域中的颜色全部变为透明。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span>height<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>x 是指矩形起点的横坐标；</li><li>y 是指矩形起点的纵坐标,坐标原点为 canvas 画布的最左上角；</li><li>width 是指矩形的长度；</li><li>height 是指矩形的高度。</li></ul>`,52),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","5-2.绘制图形.html.vue"]]);export{r as default};
