import{_ as n,o as a,c as s,e}from"./app-c07941ad.js";const t={},p=e(`<h2 id="i-组件注册" tabindex="-1"><a class="header-anchor" href="#i-组件注册" aria-hidden="true">#</a> Ⅰ. 组件注册</h2><p>一个 Vue 组件在使用前需要先被“注册”，这样 Vue 才能在渲染模板时找到其对应的实现。</p><p>组件注册有两种方式：全局注册和局部注册。</p><h4 id="_1-component-全局注册组件" tabindex="-1"><a class="header-anchor" href="#_1-component-全局注册组件" aria-hidden="true">#</a> 1. component：全局注册组件</h4><p>可以使用 Vue 应用实例的 component() 方法，让组件在当前 Vue 应用中全局可用。</p><p>该方法有两个参数：</p><ul><li>参数1：组件名，用的时候要使用组件名。</li><li>参数2：组件构造器或一个单文件组件 <ul><li>组件构造器：一个对象，里面包含了该组件的所有元素，这些元素共同组成了组件本身 <ul><li>其中template元素是组件的模板（html代码）</li></ul></li><li>单文件组件：可以直接传入一个单文件组件作为参数直接被注册</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;组件名&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token comment">/*组件构造器*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_1-1-直接注册" tabindex="-1"><a class="header-anchor" href="#_1-1-直接注册" aria-hidden="true">#</a> 1.1 直接注册</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createApp<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;MyComponent-1&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token comment">/*组件的实现*/</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-注册导入的单文件组件" tabindex="-1"><a class="header-anchor" href="#_1-2-注册导入的单文件组件" aria-hidden="true">#</a> 1.2 注册导入的单文件组件</h5><p>可以注册被导入的 .vue 文件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createApp<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">componnet</span><span class="token punctuation">(</span><span class="token string">&#39;MyComponnet&#39;</span><span class="token punctuation">,</span>MyComponent<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-3-链式注册" tabindex="-1"><a class="header-anchor" href="#_1-3-链式注册" aria-hidden="true">#</a> 1.3 链式注册</h5><p>app.component() 方法可以被链式调用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;ComponentA&#39;</span><span class="token punctuation">,</span> ComponentA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;ComponentB&#39;</span><span class="token punctuation">,</span> ComponentB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-局部组件介绍" tabindex="-1"><a class="header-anchor" href="#_2-局部组件介绍" aria-hidden="true">#</a> 2. 局部组件介绍</h4><h5 id="_2-1-全局组件的缺点" tabindex="-1"><a class="header-anchor" href="#_2-1-全局组件的缺点" aria-hidden="true">#</a> 2.1 全局组件的缺点</h5><ul><li>全局注册，但并没有被使用的组件无法在生产打包时被自动移除 (也叫“tree-shaking”)。 <ul><li>如果你全局注册了一个组件，即使它并没有被实际使用，它仍然会出现在打包后的 JS 文件中。</li></ul></li><li>全局注册在大型项目中使项目的依赖关系变得不那么明确。在父组件中使用子组件时，不太容易定位子组件的实现。 <ul><li>和使用过多的全局变量一样，这可能会影响应用长期的可维护性</li></ul></li></ul><h5 id="_2-2-局部组件" tabindex="-1"><a class="header-anchor" href="#_2-2-局部组件" aria-hidden="true">#</a> 2.2 局部组件</h5><ul><li>局部注册的组件需要在使用它的父组件中显式导入，并且只能在该父组件中使用。</li><li>它的优点是使组件之间的依赖关系更加明确，并且对 tree-shaking 更加友好。</li><li>局部组件也是可以复用的，只要把组件的选项提取出来，在Vue对象外单独定义，在Vue对象内再进行引入该组件的变量即可，这样该局部组件就可以被多个Vue对象引用了</li></ul><h4 id="_3-注册局部组件" tabindex="-1"><a class="header-anchor" href="#_3-注册局部组件" aria-hidden="true">#</a> 3. 注册局部组件</h4><div class="hint-container danger"><p class="hint-container-title">直接导入</p><p>在Vue3的 <code>&lt;script setup&gt;</code> 中，一般直接导入组件进行使用，不用注册。</p></div><h5 id="_3-1-免注册-直接导入使用" tabindex="-1"><a class="header-anchor" href="#_3-1-免注册-直接导入使用" aria-hidden="true">#</a> 3.1 免注册，直接导入使用</h5><p>采用该方式即可。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentA</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">&#39;./component/ComponentA.vue&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-选项式api注册" tabindex="-1"><a class="header-anchor" href="#_3-2-选项式api注册" aria-hidden="true">#</a> 3.2 选项式API注册</h5><p>在Vue2中，或者采用选项式API，就需要用到components选项进行组件注册了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">&#39;./component/ComponentA.vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ComponentA</span><span class="token operator">:</span> ComponentA
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-组件名格式" tabindex="-1"><a class="header-anchor" href="#_4-组件名格式" aria-hidden="true">#</a> 4. 组件名格式</h4><p>采用 PascalCase 作为组件名的注册格式，同时Vue 支持将模板中使用 kebab-case 的标签解析为使用 PascalCase 注册的组件。<br> 这意味着一个以 MyComponent 为名注册的组件，在模板中可以通过<code>&lt;MyComponent&gt;</code> 或<code> &lt;my-component&gt;</code> 引用，但推荐优先选择 PascalCase格式。</p><ul><li>PascalCase 是合法的 JavaScript 标识符。这使得在 JavaScript 中导入和注册组件都很容易 <ul><li>同时 IDE 也能提供较好的自动补全</li></ul></li><li><code>&lt;PascalCase /&gt;</code> 在模板中更明显地表明了这是一个 Vue 组件，而不是原生 HTML 元素。 <ul><li>同时也能够将 Vue 组件和自定义元素 (web components) 区分开来。</li></ul></li></ul><h4 id="_5-子组件、父组件与作用域" tabindex="-1"><a class="header-anchor" href="#_5-子组件、父组件与作用域" aria-hidden="true">#</a> 5. 子组件、父组件与作用域</h4><ul><li>子组件和父组件：组件是可以互相嵌套的，嵌套后就有了层级关系。</li><li>Vue根组件：可以把Vue根组件看做最大的父组件，所有注册的组件和全局组件都是其直接子组件。</li><li>组件作用域：每个组件都有自己的作用域，每个作用域的组件无法互相访问对方的数据和事件。 <ul><li>组件的作用域就是组件定义的代码。使用组件的组件标签就已经不是其作用域了，已经是他的父级作用域了</li><li>组件标签的属性，组件无法直接访问。</li></ul></li></ul><h4 id="_6-模块化开发" tabindex="-1"><a class="header-anchor" href="#_6-模块化开发" aria-hidden="true">#</a> 6. 模块化开发</h4><p>在实际开发中，我们会进行模块化开发。<br> 我们会在项目中创建一个components目录，专门用于存放各个模块。</p><p><strong>基础组件</strong><br> 就是比较小的组件，比如一个输入框，一个按钮，这些组件很基础要经常用到。<br> 如果我们将这些组件写单独导入，那么导入列表将非常长。因此我们会将这些基础组件进行自动化全局注册。</p><h2 id="ii-组件的使用" tabindex="-1"><a class="header-anchor" href="#ii-组件的使用" aria-hidden="true">#</a> Ⅱ. 组件的使用</h2><p>通过 <code>&lt;组件名/&gt;</code> 的方式来使用子组件和全局注册的组件。</p><h4 id="_1-全局组件" tabindex="-1"><a class="header-anchor" href="#_1-全局组件" aria-hidden="true">#</a> 1. 全局组件</h4><p>全局注册的组件可以在此应用的任意组件的模板中使用，无需引入。</p><p><strong>注册全局组件</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//file:src/main.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>createApp<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>
<span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">&#39;./components/ComponentQ.vue&#39;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建应用(根组件)</span>
app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;ComponentQ&#39;</span><span class="token punctuation">,</span>ComponentQ<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//全局注册组件ComponentQ</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用全局组件</strong></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is ComponentA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentQ</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- 直接使用全局组件，无需注册，无需引入 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-局部组件" tabindex="-1"><a class="header-anchor" href="#_2-局部组件" aria-hidden="true">#</a> 2. 局部组件</h4><p>在Vue3中，局部组件无需注册，直接在<code>&lt;script setup&gt;</code>下导入就可以在当前组件的模板中使用了。</p><p>如下：在子组件A中导入子组件B。然后在template中就可以使用该组件了。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- file:src/components/ComponnetA.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is ComponentA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentB</span><span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> 

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> ComponentB <span class="token keyword">from</span> <span class="token string">&#39;./ComponnetB.vue&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-vue应用与根组件" tabindex="-1"><a class="header-anchor" href="#_3-vue应用与根组件" aria-hidden="true">#</a> 3. Vue应用与根组件</h4><ul><li>每个应用都需要一个“根组件”，其他组件将作为其子组件。</li><li>注意：通过Vue应用实例才能创建根组件。</li><li>在根组件（也是一个Vue单文件组件，只是被指定成了根组件）内部是无法创建根组件的。</li></ul><h4 id="_4-组件使用的注意事项" tabindex="-1"><a class="header-anchor" href="#_4-组件使用的注意事项" aria-hidden="true">#</a> 4. 组件使用的注意事项</h4><ul><li>死循环：组件是可以引入自己的，不过会造成死循环。</li><li>局部注册的组件在后代组件中并不可用</li></ul>`,53),o=[p];function i(c,l){return a(),s("div",null,o)}const r=n(t,[["render",i],["__file","4-2.组件注册使用.html.vue"]]);export{r as default};
