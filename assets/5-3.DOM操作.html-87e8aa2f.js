import{_ as n,o as s,c as a,e as t}from"./app-351da1f5.js";const p={},e=t(`<h2 id="i-dom节点操作" tabindex="-1"><a class="header-anchor" href="#i-dom节点操作" aria-hidden="true">#</a> Ⅰ. DOM节点操作</h2><p>一个标签，无非就是由属性、内容、css样式组成，所以我们对DOM节点的操作也是操作这些。</p><h4 id="_1-操作属性" tabindex="-1"><a class="header-anchor" href="#_1-操作属性" aria-hidden="true">#</a> 1. 操作属性</h4><h5 id="_2-1-方法1-dom对象-属性名" tabindex="-1"><a class="header-anchor" href="#_2-1-方法1-dom对象-属性名" aria-hidden="true">#</a> 2.1 方法1：DOM对象.属性名</h5><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./resource/beach.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>300<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>美丽的沙滩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
   <span class="token comment">//通过标签获得的节点对象</span>
    <span class="token keyword">var</span> oP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    oP<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">&#39;p1&#39;</span><span class="token comment">//DOM对象添加属性[对应标签同样会添加属性]</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-方法2-通过对象方法" tabindex="-1"><a class="header-anchor" href="#_1-2-方法2-通过对象方法" aria-hidden="true">#</a> 1.2 方法2：通过对象方法</h5><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./resource/beach.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>300<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>美丽的沙滩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> oP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    oP<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;p1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置属性id.</span>
    <span class="token keyword">var</span> attr <span class="token operator">=</span> oP<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得属性id.</span>
    oP<span class="token punctuation">.</span><span class="token function">remoteAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除id属性.</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-操作内容作内容" tabindex="-1"><a class="header-anchor" href="#_2-操作内容作内容" aria-hidden="true">#</a> 2. 操作内容作内容</h4><ul><li>innerText：仅操作文字内容部分</li><li>innerHTML：可以操作标签中的HTML子标签 <ul><li>注意：对于自结束标签，innerHTML没有意义，比如input标签</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./resource/beach.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>300<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>美丽的沙滩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> oP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    oP<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;&lt;em&gt;hello world&lt;/em&gt;&#39;</span><span class="token comment">//标签无效，只能操作文字内容</span>
    oP<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&lt;em&gt;hello world&lt;/em&gt;&#39;</span><span class="token comment">//即可操作文字，也可操作标签。</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-操作内联css" tabindex="-1"><a class="header-anchor" href="#_3-操作内联css" aria-hidden="true">#</a> 3. 操作内联CSS</h4><p>语法: <code>DOM节点对象.style.css样式名</code>。</p><p>如果属性是合成词,必须采用小驼峰的语法,不然报错</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./resource/beach.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>300<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>美丽的沙滩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span>
oP.style.fontSize = &#39;30px&#39;;//不能是font-size.
oP.style.backgroundColor = &#39;red&#39;;//不能是background-color
oP.className = &#39;p1&#39; //通过className属性操作class属性
console.log(oP.className);//获得class属性的值
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>class属性，需要通过className来设置、读取</li><li>如果在样式中写了！important，则此样式会有最高的优先级，即使通过JS也不能覆盖该样式，此时将会导致JS修改样式失效，所以尽量不要为样式添加!important。</li><li>通过style属性设置和读取的都是内联样式，无法读取样式表中的样式。 <ul><li>可以设置内联样式覆盖样式表sytle标签中的样式</li></ul></li></ul><h4 id="_4-读取样式表中的样式" tabindex="-1"><a class="header-anchor" href="#_4-读取样式表中的样式" aria-hidden="true">#</a> 4. 读取样式表中的样式</h4><p><code>style.css</code> 样式名，只能获取内联样式。</p><p>可以使用getComputedStyle()方法来获取元素当前的所有样式（包括样式表中的），这个方法是window的方法，可以直接使用。</p><ul><li>参数1：要获取样式的元素。</li><li>参数2：可以传递一个伪元素，一般传null。</li><li>返回值：返回一个对象，对象中封装了当前元素对应的样式。 <ul><li>如果获取的样式没有设置，则会获取真实的值，而不是默认值，比如，没有设置长度，不会返回auto，而是一个真实显示的长度。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">getComputedSytle</span><span class="token punctuation">(</span>box1<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取长度。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-分类获取节点" tabindex="-1"><a class="header-anchor" href="#ii-分类获取节点" aria-hidden="true">#</a> Ⅱ. 分类获取节点</h2><h4 id="_1-节点类型分析" tabindex="-1"><a class="header-anchor" href="#_1-节点类型分析" aria-hidden="true">#</a> 1. 节点类型分析</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>ul style<span class="token operator">=</span><span class="token string">&quot;border:1px solid #000&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>橘子<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>苹果<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>梨<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
    <span class="token comment">//由于ul只有1个，所以下标就为0</span>
    <span class="token keyword">var</span> oUl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   
    <span class="token keyword">var</span> childs <span class="token operator">=</span> oUl<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span><span class="token comment">//获得OUl节点的所有子节点</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>childs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印子节点发现，竟然有7个，而不是三个。</span>
    <span class="token comment">//七个节点分别为{text,li,text,li,text,li,text}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上述案例我们得知，UI节点下，理论应该只有3个li子节点，结果却是有7个节点。因为空格（换行符）也被当做了节点。</p><h4 id="_2-节点类型概述" tabindex="-1"><a class="header-anchor" href="#_2-节点类型概述" aria-hidden="true">#</a> 2. 节点类型概述</h4><p>不只是标签可以当做节点，空格和属性也可以。DOM将html文档转换成JavaScript对象之后。</p><ul><li>标签被当做标签节点，类型是1，</li><li>属性部分被当做属性节点，类型是2，【打印子节点，默认不会打印属性节点】</li><li>空白部分会被当做是空白节点，类型为3</li></ul><h4 id="_3-标签节点" tabindex="-1"><a class="header-anchor" href="#_3-标签节点" aria-hidden="true">#</a> 3. 标签节点</h4><p>节点是HTML标签，类型是1。</p><h4 id="_4-属性节点" tabindex="-1"><a class="header-anchor" href="#_4-属性节点" aria-hidden="true">#</a> 4. 属性节点</h4><p>属性节点是HTML标签内的属性，类型是2，需要用节点对象的attributes属性获得</p><p>注：属性节点无法使用“子节点”的方式获得。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> oUl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> attr <span class="token operator">=</span> oUl<span class="token punctuation">.</span>atributes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获得第一个标签的第一个属性节点</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-空白节点" tabindex="-1"><a class="header-anchor" href="#_5-空白节点" aria-hidden="true">#</a> 5. 空白节点</h4><p>空白节点是HTML文档内的空格，类型是3，可以通过关系节点查找到。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> first <span class="token operator">=</span> oUl<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-删除空白节点" tabindex="-1"><a class="header-anchor" href="#_6-删除空白节点" aria-hidden="true">#</a> 6. 删除空白节点</h4><p>由于节点之间如果有空白节点的话，不方便获得具体的节点，所以我们通常会先将空白节点删除，再查找</p><p>删除节点的语法：<code>父节点.removeChild(子节点)</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> oUl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> childs <span class="token operator">=</span> oUl<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>childs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>childs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeType<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        oUl<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>childs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-节点添加、删除" tabindex="-1"><a class="header-anchor" href="#iii-节点添加、删除" aria-hidden="true">#</a> Ⅲ. 节点添加、删除</h2><p>无论是添加还是删除，都要先获得父节点。</p><h4 id="_1-添加标签节点" tabindex="-1"><a class="header-anchor" href="#_1-添加标签节点" aria-hidden="true">#</a> 1. 添加标签节点</h4><p>添加节点分为2个步骤</p><h5 id="_1-1-创建标签节点-document-createelement-nodename" tabindex="-1"><a class="header-anchor" href="#_1-1-创建标签节点-document-createelement-nodename" aria-hidden="true">#</a> 1.1 创建标签节点：document.createElement(&#39;nodename&#39;);</h5><p>他需要一个标签名作为参数，将会根据该标签名创建元素节点对象，并将创建好的对象作为返回值返回。</p><h5 id="_1-2-确定其位置" tabindex="-1"><a class="header-anchor" href="#_1-2-确定其位置" aria-hidden="true">#</a> 1.2 确定其位置：</h5><ul><li>appendChild：向父节点中添加子节点，将标签创建到指定标签里面(默认在里面的最后面)</li><li>insertBefore：向指定的子节点签名插入新的子节点，该方法是父节点调用的，参数1是新节点，参数2是已有节点</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;textarea&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//将标签创建到ul标签里面，默认成为ul标签的最末尾的子标签。</span>
oul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//oul为节点对象</span>
<span class="token comment">//</span>
<span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//将text标签放到父标签内,btn标签的前面。</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-添加文本节点" tabindex="-1"><a class="header-anchor" href="#_2-添加文本节点" aria-hidden="true">#</a> 2. 添加文本节点</h4><p>除了标签节点，也可以创建文本节点 <code>document.createTextNode()</code></p><p>需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新节点返回。</p><h4 id="_3-删除节点" tabindex="-1"><a class="header-anchor" href="#_3-删除节点" aria-hidden="true">#</a> 3. 删除节点：</h4><ul><li>\`父节点.removeChild(子节点)\`\`</li><li><code>child.parentNode.removeChild(child);</code><ul><li>不获取父节点的情况下，删除节点</li></ul></li></ul>`,54),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","5-3.DOM操作.html.vue"]]);export{r as default};
