import{_ as n,o as s,c as a,e as p}from"./app-2b89a278.js";const t={},e=p(`<p>ES6 提供了 Map 数据结构，可以视为升级版的对象。</p><p>它类似于对象（Hash 结构），也是键值对的集合。但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键（比如用DOM节点对象作为键名）。</p><p>如果只是需要键值对的hash结构，Map比Object更合适。<br> Map 也实现了iterator 接口，所以可以使用（扩展运算符）和（for…of…）进行遍历。</p><h4 id="_1-声明map" tabindex="-1"><a class="header-anchor" href="#_1-声明map" aria-hidden="true">#</a> 1. 声明Map</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//声明一个空map</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。这些键值对会成为Map的成员。</p><p>不仅是数组，任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构都可以当作Map构造函数的参数。也就是说，Set和Map都可以用来生成新的 Map。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;jinno&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;sex&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{&#39;name&#39;=&gt;&#39;jinno&#39;,&quot;sex&quot;=&gt;&quot;male&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-map的属性和方法" tabindex="-1"><a class="header-anchor" href="#_2-map的属性和方法" aria-hidden="true">#</a> 2. map的属性和方法</h4><h5 id="_2-1-set-增加一个新元素-返回当前map" tabindex="-1"><a class="header-anchor" href="#_2-1-set-增加一个新元素-返回当前map" aria-hidden="true">#</a> 2.1 set：增加一个新元素，返回当前Map</h5><p>如果对同一个键多次赋值，后面的值将覆盖前面的值，可采用链式赋值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Map</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
<span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> uname <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">uname</span><span class="token operator">:</span>jinno<span class="token punctuation">}</span><span class="token punctuation">;</span>
m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span><span class="token string">&#39;Jinno&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;sex&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//对象也能作为key</span>
<span class="token comment">//{{...}=&gt;&#39;Jinno&#39;,&#39;sex&#39;=&gt;&#39;male&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-get-返回键名对象的键值" tabindex="-1"><a class="header-anchor" href="#_2-2-get-返回键名对象的键值" aria-hidden="true">#</a> 2.2 get：返回键名对象的键值</h5><p>如果读取一个未知的键，则返回undefined。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Map</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-其他方法" tabindex="-1"><a class="header-anchor" href="#_2-3-其他方法" aria-hidden="true">#</a> 2.3 其他方法</h5><ul><li>size：返回Map的元素个数</li><li>has：检测Map中是否包含某个元素，返回bool</li><li>clear：清空集合，返回undefined</li><li>delete：删除某个键，delete方法删除某个键，返回true。如果删除失败，返回false。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>m<span class="token punctuation">.</span>size<span class="token punctuation">;</span>

<span class="token class-name">Map</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

m<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

m<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;uname&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-键值的注意事项" tabindex="-1"><a class="header-anchor" href="#_3-键值的注意事项" aria-hidden="true">#</a> 3. 键值的注意事项</h4><h5 id="_3-1-对象键值" tabindex="-1"><a class="header-anchor" href="#_3-1-对象键值" aria-hidden="true">#</a> 3.1 对象键值</h5><p>只有对同一个对象的引用，Map 结构才将其视为同一个键。</p><p>Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。这就解决了同名属性碰撞（clash）的问题，我们扩展别人的库的时候，如果使用对象作为键名，就不用担心自己的属性与原作者的属性同名。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//1.示例：数组</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">555</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined,</span>
<span class="token comment">//这两个数组是两个实例，内存地址不一样。修改成下面这样才行</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">555</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-简单类型键值" tabindex="-1"><a class="header-anchor" href="#_3-2-简单类型键值" aria-hidden="true">#</a> 3.2 简单类型键值</h5><p>如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键。</p><p>布尔值true和字符串true则是两个不同的键。另外，0和-0就是一个键，undefined和null也是两个不同的键。虽然NaN不严格相等于自身，但 Map 将其视为同一个键。</p><h4 id="_4-进行遍历" tabindex="-1"><a class="header-anchor" href="#_4-进行遍历" aria-hidden="true">#</a> 4. 进行遍历</h4><p>map包含Iterator接口，可进行for..of遍历，Map 的遍历顺序就是插入顺序。</p><ul><li>Map.prototype.keys()：返回键名的遍历器。</li><li>Map.prototype.values()：返回键值的遍历器==直接使用。</li><li>Map.prototype.entries()：返回所有成员的遍历器。</li><li>Map.prototype.forEach()：遍历 Map 的所有成员。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">&#39;uname&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;jinno&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;sex&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//1.keys</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//uname,sex</span>
<span class="token punctuation">}</span>
<span class="token comment">//2.values</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//直接map默认不是values，因此不能省略values</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//3.entries</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0=k,1=v</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span>v<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//同上</span>
<span class="token comment">//4.直接遍历map === entries,Map默认的就是entries方法</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-数据结构的转换" tabindex="-1"><a class="header-anchor" href="#_5-数据结构的转换" aria-hidden="true">#</a> 5. 数据结构的转换</h4><h5 id="_5-1-map转数组" tabindex="-1"><a class="header-anchor" href="#_5-1-map转数组" aria-hidden="true">#</a> 5.1 Map转数组</h5><p>使用扩展运算符...，会转成二维数组，每个子数组的第一个值是键，第二个值是值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;uname&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;jinno&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;jinno&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token operator">...</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//[[&#39;uname&#39;,&#39;jinno&#39;],[{sex:7},[&#39;jinno&#39;]]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-数组转map" tabindex="-1"><a class="header-anchor" href="#_5-2-数组转map" aria-hidden="true">#</a> 5.2 数组转Map</h5><p>将数组传入Map 构造函数就可以转为Map。</p><p>注意是数组的成员成为了Map的成员，而不是数组本身，所以数组的成员只能是一个个表示键值对的数组。不然会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{1=&gt;2,3=&gt;4}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-3-map转对象" tabindex="-1"><a class="header-anchor" href="#_5-3-map转对象" aria-hidden="true">#</a> 5.3 Map转对象</h5><p>如果所有 Map 的键都是字符串，它可以无损地转为对象（没有接口，需要自定义）。</p><p>如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名，所以如果map中有非字符串键可能会出意外（比如有两个对象，都会转为[objecct Object]，从而进行覆盖。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//自定义一个Map转对象的方法</span>
<span class="token keyword">function</span> <span class="token function">mapToObj</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span>v<span class="token punctuation">]</span> <span class="token keyword">in</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//调用该方法</span>
<span class="token keyword">let</span> sex <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;uname&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;jinno&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sex<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> mo <span class="token operator">=</span> <span class="token function">mapToObj</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{uname:&quot;jinno&quot;,[object Object]:20}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-4-对象转map" tabindex="-1"><a class="header-anchor" href="#_5-4-对象转map" aria-hidden="true">#</a> 5.4 对象转Map</h5><p>对象转为 Map 可以通过Object.entries()。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-property property">&quot;a&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string-property property">&quot;b&quot;</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-5-map转json" tabindex="-1"><a class="header-anchor" href="#_5-5-map转json" aria-hidden="true">#</a> 5.5 Map转JSON</h5><p>Map 转为 JSON 要区分两种情况。</p><ul><li>Map 的键名都是字符串，这时可以选择转为对象，再把对象转为JSON。</li><li>Map 的键名有非字符串，这时可以选择把Map转为数组，再转为 JSON。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> mo <span class="token operator">=</span> <span class="token function">mapToObj</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//现将map转为对象</span>
<span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>mo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在将对象转为JSON。</span>

<span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-6-json转map" tabindex="-1"><a class="header-anchor" href="#_5-6-json转map" aria-hidden="true">#</a> 5.6 JSON转Map</h5><p>JSON 转为 Map，正常情况下，所有键名都是字符串。</p><p>有一种特殊情况，整个 JSON 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。这往往是 Map 转为数组 JSON 的逆操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-weakmap" tabindex="-1"><a class="header-anchor" href="#_6-weakmap" aria-hidden="true">#</a> 6. WeakMap</h4><p>WeakMap结构与Map结构类似，也是用于生成键值对的集合。</p><p>WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。</p><p>用法暂略。</p>`,57),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","3-4.Map.html.vue"]]);export{k as default};
