import{_ as a,o as n,c as t,e as s}from"./app-c07941ad.js";const e="/front-doc/img/applet/uniapp/4-1-1.jpg",l={},p=s(`<h2 id="i-概述" tabindex="-1"><a class="header-anchor" href="#i-概述" aria-hidden="true">#</a> Ⅰ. 概述</h2><h4 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1. 介绍</h4><ul><li>组件是视图层的基本组成单元。</li><li>组件是一个单独且可复用的功能模块的封装。</li></ul><h4 id="_2-组件组成" tabindex="-1"><a class="header-anchor" href="#_2-组件组成" aria-hidden="true">#</a> 2. 组件组成</h4><p>每个组件，包括如下几个部分：以组件名称为标记的开始标签和结束标签、组件内容、组件属性、组件属性值。</p><ul><li>component-name：组件标签、组件名</li><li>content：组件内容</li><li>属性：标签里可以添加很多属性</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-name</span> <span class="token attr-name">property1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    content
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-name</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-基本组件示例" tabindex="-1"><a class="header-anchor" href="#_3-基本组件示例" aria-hidden="true">#</a> 3. 基本组件示例</h4><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mini<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-公共属性" tabindex="-1"><a class="header-anchor" href="#_4-公共属性" aria-hidden="true">#</a> 4. 公共属性</h4><table><thead><tr><th style="text-align:left;">属性名</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th><th style="text-align:left;">注解</th></tr></thead><tbody><tr><td style="text-align:left;">id</td><td style="text-align:left;">String</td><td style="text-align:left;">组件的唯一标示</td><td style="text-align:left;">一般用于获取组件上下文对象，需要保持整个页面唯一</td></tr><tr><td style="text-align:left;">ref</td><td style="text-align:left;">String</td><td style="text-align:left;">vue中组件的唯一标示</td><td style="text-align:left;">用来给子组件注册引用信息，</td></tr><tr><td style="text-align:left;">class</td><td style="text-align:left;">String</td><td style="text-align:left;">组件的样式类</td><td style="text-align:left;">在对应的 css 中定义的样式类</td></tr><tr><td style="text-align:left;">style</td><td style="text-align:left;">String</td><td style="text-align:left;">组件的内联样式</td><td style="text-align:left;">可以动态设置的内联样式</td></tr><tr><td style="text-align:left;">hidden</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">组件是否隐藏</td><td style="text-align:left;">所有组件默认是显示的</td></tr><tr><td style="text-align:left;">data-*</td><td style="text-align:left;">Any</td><td style="text-align:left;">自定义属性</td><td style="text-align:left;">组件上触发的事件时，会发送给事件处理函数</td></tr><tr><td style="text-align:left;">@*</td><td style="text-align:left;">EventHandler</td><td style="text-align:left;">组件的事件</td><td style="text-align:left;">详见各组件详细文档，事件绑定参考</td></tr></tbody></table><h4 id="_5-基础组件" tabindex="-1"><a class="header-anchor" href="#_5-基础组件" aria-hidden="true">#</a> 5. 基础组件</h4><p>基础组件在uni-app框架中已经内置，无需将内置组件的文件导入项目，也无需注册内置组件，随时可以直接使用，比如<code>&lt;view&gt;</code>组件。</p><p>除了基础组件，都称为扩展组件。扩展组件需要将组件导入项目中才可以使用。</p><h5 id="_5-1-组件风格" tabindex="-1"><a class="header-anchor" href="#_5-1-组件风格" aria-hidden="true">#</a> 5.1 组件风格</h5><p>uni-app内置了很多小程序风格的组件，不推荐使用H5标签写组件。如果开发者写了div等标签，在编译到非H5平台时也会被编译器转换为view标签，类似的还有span转text、a转navigator等，包括css里的元素选择器也会转。但为了管理方便、策略统一，新写代码时仍然建议使用view等组件。</p><p>注意组件上的事件绑定，需要以 vue 的事件绑定语法来绑定。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picker</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>date<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>date<span class="token punctuation">&quot;</span></span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2015-09-01<span class="token punctuation">&quot;</span></span> <span class="token attr-name">end</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2020-09-01<span class="token punctuation">&quot;</span></span> 
 <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bindDateChange<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>picker<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        当前选择: {{date}}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picker</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-扩展组件" tabindex="-1"><a class="header-anchor" href="#_6-扩展组件" aria-hidden="true">#</a> 6. 扩展组件</h4><p>复杂的需求，可以使用扩展组件，如一个五星点评组件，可以直接在插件市场下载，并引入使用。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uni-rate</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>uni-rate</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 这里会显示一个五角星，并且点击后会自动亮星 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-1-扩展组件的优势" tabindex="-1"><a class="header-anchor" href="#_6-1-扩展组件的优势" aria-hidden="true">#</a> 6.1 扩展组件的优势</h5><ul><li>可以将组件进行任意次数的复用。</li><li>合理的划分组件，有助于提高应用性能。</li><li>代码更加方便组织和管理，并且扩展性也更强，便于多人协同开发。</li><li>组件化开发能大幅度提高应用开发效率、测试性、复用性等。</li></ul><h5 id="_6-2-easycom" tabindex="-1"><a class="header-anchor" href="#_6-2-easycom" aria-hidden="true">#</a> 6.2 easycom</h5><p>如果扩展组件符合uni-app的easycom组件规范，则可以免注册，直接使用</p><h5 id="_6-3-uni-ui" tabindex="-1"><a class="header-anchor" href="#_6-3-uni-ui" aria-hidden="true">#</a> 6.3 uni-ui</h5><p>uni-app提供的扩展组件，且符合easycom组件规范。</p><h2 id="ii-组件的规范" tabindex="-1"><a class="header-anchor" href="#ii-组件的规范" aria-hidden="true">#</a> Ⅱ. 组件的规范</h2><h4 id="_1-easycom组件规范" tabindex="-1"><a class="header-anchor" href="#_1-easycom组件规范" aria-hidden="true">#</a> 1. easycom组件规范</h4><p>只要组件安装在项目的components目录下或uni_modules目录下，并符合components/组件名称/组件名称.vue目录结构。就可以不用引用、注册，直接在页面中使用。<br> 如下：uni-rate组件存放在了目录/components/uni-rate/uni-rate.vue</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uni-rate</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>uni-rate</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 这里会显示一个五角星，并且点击后会自动亮星 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 这里不用import引入，也不需要在components内注册。template里就可以直接用</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>树摇：不管components目录下安装了多少组件，easycom打包后会自动剔除没有使用的组件。组件库批量安装，随意使用，自动按需打包。</li><li>快速使用：以官方的uni-ui为例，在HBuilderX新建项目界面选择uni-ui项目模板，只需在页面中敲u，拉出大量组件代码块，直接选择，即可使用。 <ul><li>插件市场下载符合components/组件名称/组件名称.vue目录结构的组件，均可直接使用。</li></ul></li><li>设置easycom策略：组件名称或路径不符合easycom的默认规范，可以在pages.json的easycom节点进行个性化设置，自定义匹配组件的策略</li><li>手动导入：如果不使用easycom规范，可以和使用普通vue组件一样，进行导入使用。</li></ul><h4 id="_2-uni-module规范" tabindex="-1"><a class="header-anchor" href="#_2-uni-module规范" aria-hidden="true">#</a> 2. uni_module规范</h4><p>详见：插件</p><h4 id="_3-unicloud组件" tabindex="-1"><a class="header-anchor" href="#_3-unicloud组件" aria-hidden="true">#</a> 3. uniCloud组件</h4><p>uniCloud是DCloud提供的、配套uni-app的云开发服务。</p><h4 id="_4-datacom" tabindex="-1"><a class="header-anchor" href="#_4-datacom" aria-hidden="true">#</a> 4. datacom</h4><p>datacom组件是一种数据驱动的、可云端一体的组件。<br> 传统组件只涉及前端概念，而datacom拉取了uniCloud云端数据。</p><h2 id="iii-创建组件" tabindex="-1"><a class="header-anchor" href="#iii-创建组件" aria-hidden="true">#</a> Ⅲ. 创建组件</h2><p>一般指的是创建自定义Vue组件。</p><h4 id="_1-目录规则" tabindex="-1"><a class="header-anchor" href="#_1-目录规则" aria-hidden="true">#</a> 1. 目录规则</h4><p>内置组件、第三方组件、pages等有自己的规则。</p><p>自定义的组件要存放到components目录中，如下：<br> 一般要符合easycom的规范，组件地址：components/组件名称/组件名称.vue</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>│─components  
│  └─componentA 
│      └─componentA.vue   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-hbuilder-创建组件" tabindex="-1"><a class="header-anchor" href="#_2-hbuilder-创建组件" aria-hidden="true">#</a> 2. HBuilder 创建组件</h4><p>推荐使用HBuilderX创建。右键根目录下的components目录，选择创建组件，出现如下弹出框：</p><figure><img src="`+e+'" alt="4-1-1" tabindex="0" loading="lazy"><figcaption>4-1-1</figcaption></figure><p>注意勾选创建同名目录，这样就会自动符合easycom的规范。</p>',48),i=[p];function c(o,u){return n(),t("div",null,i)}const r=a(l,[["render",c],["__file","4-1.组件概述.html.vue"]]);export{r as default};
