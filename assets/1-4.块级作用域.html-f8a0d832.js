import{_ as n,P as s,Q as a,a5 as e}from"./framework-3728cbf1.js";const t={},p=e(`<h2 id="块级作用域" tabindex="-1"><a class="header-anchor" href="#块级作用域" aria-hidden="true">#</a> 块级作用域</h2><h4 id="_1-为什么需要块级作用域" tabindex="-1"><a class="header-anchor" href="#_1-为什么需要块级作用域" aria-hidden="true">#</a> 1. 为什么需要块级作用域</h4><p>ES5没有块级作用域，只有函数和全局作用域，在一些场景中，产生了“闭包”现象。而这些场景，如果使用let（块级作用域）就不会产生闭包</p><h5 id="_1-1-函数闭包-内层变量覆盖外层变量" tabindex="-1"><a class="header-anchor" href="#_1-1-函数闭包-内层变量覆盖外层变量" aria-hidden="true">#</a> 1.1 函数闭包：内层变量覆盖外层变量</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span> <span class="token comment">//函数作用域内，外部tmp被覆盖，</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined：变量提升，在函数内部，内部的tmp覆盖了上层tmp</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ok;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-循环闭包-变量泄露" tabindex="-1"><a class="header-anchor" href="#_1-2-循环闭包-变量泄露" aria-hidden="true">#</a> 1.2 循环闭包：变量泄露</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5 ，变量i只是用来控制循环的，循环结束成了全局变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-es6的块级作用域" tabindex="-1"><a class="header-anchor" href="#_2-es6的块级作用域" aria-hidden="true">#</a> 2. ES6的块级作用域</h4><p>ES6使用let增加了块级作用域，ES6 允许块级作用域的任意嵌套，每一层都是一个单独的作用域</p><p>注意，最外层是块级作用域的外层，所以，最外层无法读块级作用域的数据，反过来可以。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
  <span class="token punctuation">{</span><span class="token keyword">let</span> insane <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">}</span>
  <span class="token comment">// 报错：第四层作用域无法读取第五层作用域的内部变量。</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>insane<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 反过来是可以的，因为作用域链的关系</span>
<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token operator">===</span><span class="token operator">=</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> insane <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">{</span><span class="token keyword">let</span> insane <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">}</span> <span class="token comment">//内层作用域可以定义外层作用域的同名变量。</span>
<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-let取代iife" tabindex="-1"><a class="header-anchor" href="#_3-let取代iife" aria-hidden="true">#</a> 3. let取代IIFE</h4><p>let的出现，使匿名立即执行函数表达式（匿名IIFE）不再必要了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// IIFE 写法:模拟块级作用域</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 块级作用域写法</span>
<span class="token punctuation">{</span>
  <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-块级作用域与函数声明" tabindex="-1"><a class="header-anchor" href="#_4-块级作用域与函数声明" aria-hidden="true">#</a> 4. 块级作用域与函数声明</h4><h5 id="_4-1-块级作用域能否声明函数" tabindex="-1"><a class="header-anchor" href="#_4-1-块级作用域能否声明函数" aria-hidden="true">#</a> 4.1 块级作用域能否声明函数</h5><p>能，ES5规定只能在全局和函数作用域内声明函数，ES6规定块级也可以，浏览器一开始就默认了块级也可以声明函数。但是由于在块级作用域声明函数会对老代码才生较大的影响，很多浏览器会直接吧块级作用域里声明的函数报错，因此尽量不声明块级作用域的函数。 如果真的需要，应该写成函数表达式，而不是函数声明语句。</p><h5 id="_4-2-声明块级函数" tabindex="-1"><a class="header-anchor" href="#_4-2-声明块级函数" aria-hidden="true">#</a> 4.2 声明块级函数</h5><p>ES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
    <span class="token keyword">let</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//如果写成函数声明语句，可能会报错。</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-3-大括号" tabindex="-1"><a class="header-anchor" href="#_4-3-大括号" aria-hidden="true">#</a> 4.3 大括号{}</h5><p>ES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 就认为不存在块级作用域。一律加大括号就行了(比如if语句)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 第一种写法，报错</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//这不是块级作用域，let要出现在当前作用域的顶层，所以报错。</span>
<span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  
<span class="token comment">// 第二种写法，不报错</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5. 总结</h4><ul><li>块级作用域的优点：块级作用域可以解决闭包问题（函数和循环闭包）。可以用来模块化编程，封装数据（外层代码无法访问内层的数据）</li><li>块级数据的定义：块内的数据必须使用const和let定义。如果使用var进行定义，数据的范围将直接跑到最外层，被所有程序访问。</li><li>嵌套：可以嵌套任意层，外层不可以访问内层数据，反过来可以。</li></ul><h2 id="顶层对象的属性" tabindex="-1"><a class="header-anchor" href="#顶层对象的属性" aria-hidden="true">#</a> 顶层对象的属性</h2><p>JavaScript 语言存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。在浏览器环境指的是window对象，在 Node 指的是global对象。</p><h4 id="_1-es5的顶层对象" tabindex="-1"><a class="header-anchor" href="#_1-es5的顶层对象" aria-hidden="true">#</a> 1. ES5的顶层对象</h4><p>ES5 之中，顶层对象的属性与全局变量是等价的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//顶层对象的属性赋值与全局变量的赋值，是同一件事</span>
window<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
a <span class="token comment">// 1</span>
a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>a <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是JS设计上的最大败笔，有以下几个问题。</p><ul><li>没法在编译时就报出变量未声明的错误，只有运行时才能知道</li><li>程序员很容易不知不觉地就创建了全局变量</li><li>顶层对象的属性是到处可以读写的，这非常不利于模块化编程</li></ul><h4 id="_2-es6的顶层对象" tabindex="-1"><a class="header-anchor" href="#_2-es6的顶层对象" aria-hidden="true">#</a> 2. ES6的顶层对象</h4><p>为了兼容性，ES6中使用var命令和function命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。</p><p>从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>a <span class="token comment">// 1</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>b <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","1-4.块级作用域.html.vue"]]);export{d as default};
