import{_ as n,o as s,c as a,e}from"./app-8888c5c9.js";const p={},t=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>ES6完全可以取代CommonJS和AMD规范，开发的时候也已ES6规范为主（某些nodeJS老项目可能无法取代）。</p></div><h2 id="i-module规范" tabindex="-1"><a class="header-anchor" href="#i-module规范" aria-hidden="true">#</a> Ⅰ. Module规范</h2><h4 id="_1-模块化" tabindex="-1"><a class="header-anchor" href="#_1-模块化" aria-hidden="true">#</a> 1. 模块化</h4><p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，需要将该变量暴露出去。</p><ul><li>通过export命令暴露模块</li><li>通过import命令加载其他模块</li></ul><h4 id="_2-module规范的特点" tabindex="-1"><a class="header-anchor" href="#_2-module规范的特点" aria-hidden="true">#</a> 2. Module规范的特点</h4><ul><li>ES6是静态加载（编译时加载）的，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。效率更高。</li><li>暴露数据时，直接使用export命令暴露，不再需要对象作为命名空间。</li><li>ES6模块自动采用严格模式</li><li>不需要对象作为命名空间</li></ul><h4 id="_3-export命令" tabindex="-1"><a class="header-anchor" href="#_3-export命令" aria-hidden="true">#</a> 3. export命令</h4><p>export命令用于暴露模块内的变量</p><h5 id="_3-1-基本语法" tabindex="-1"><a class="header-anchor" href="#_3-1-基本语法" aria-hidden="true">#</a> 3.1 基本语法</h5><p>export用来暴露变量，包括函数，可以暴露一个对象包含所有的变量，也可以一个个变量单独暴露（接收的时候接收的是全部）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.分别暴露</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> uname <span class="token operator">=</span> <span class="token string">&#39;Jinno&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token comment">//一起暴露[推荐]</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>uname<span class="token punctuation">,</span>age<span class="token punctuation">,</span>say<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-变量重命名" tabindex="-1"><a class="header-anchor" href="#_3-2-变量重命名" aria-hidden="true">#</a> 3.2 变量重命名</h5><p>通常情况下，export输出的变量就是本来的名字，但是可以使用as关键字重命名。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span><span class="token punctuation">{</span>
    uanme <span class="token keyword">as</span> p1<span class="token punctuation">,</span> <span class="token comment">//as后面的是重命名</span>
    say <span class="token keyword">as</span> v1<span class="token punctuation">,</span> <span class="token comment">//可以重命名两次，两个都可以用</span>
    say <span class="token keyword">as</span> s1<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-必须输出接口" tabindex="-1"><a class="header-anchor" href="#_3-3-必须输出接口" aria-hidden="true">#</a> 3.3 必须输出接口</h5><p>export必须输出接口，而不能输出值，必须与模块内部的变量建立一一对应关系。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//报错，1是值;</span>
<span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> m <span class="token punctuation">;</span><span class="token comment">//报错，m代表了1，还是暴露的值</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">export</span> f<span class="token punctuation">;</span><span class="token comment">//报错，暴露的还是值，哪怕值变成了函数</span>

<span class="token keyword">export</span> <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//正确</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//正确</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>m<span class="token punctuation">,</span>f<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//正确</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>m <span class="token keyword">as</span> mm<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//正确，同上只是重命名了一下</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-4-动态绑定" tabindex="-1"><a class="header-anchor" href="#_3-4-动态绑定" aria-hidden="true">#</a> 3.4 动态绑定</h5><p>export语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。这与CommonJS不同，CommonJS 模块输出的是值的缓存，不存在动态更新。</p><h5 id="_3-5-export位置" tabindex="-1"><a class="header-anchor" href="#_3-5-export位置" aria-hidden="true">#</a> 3.5 export位置</h5><p>可以处于模块顶层的任何位置（非顶层就会报错）。</p><h4 id="_4-import命令" tabindex="-1"><a class="header-anchor" href="#_4-import命令" aria-hidden="true">#</a> 4. import命令</h4><p>export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。</p><p>import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//分别导入</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>uname<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;profile.js&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>age<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;profile&#39;</span><span class="token punctuation">;</span> <span class="token comment">//.js可以省略</span>

<span class="token comment">//一起导入</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>uname<span class="token punctuation">,</span>age<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;profile.js&#39;</span><span class="token punctuation">;</span>

<span class="token comment">//导入后就可以使用这些变量了。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-1-as-起别名" tabindex="-1"><a class="header-anchor" href="#_4-1-as-起别名" aria-hidden="true">#</a> 4.1 as：起别名</h5><p>import命令可以使用as关键字，对导入的变量起别名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>uname <span class="token keyword">as</span> myname<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./profile.js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4-2-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-2-注意事项" aria-hidden="true">#</a> 4.2 注意事项</h5><ul><li>数据只读：import命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。强行改写会报错。 <ul><li>如果导入的数据是一个对象，改写该对象的属性是允许的，且其他模块也可以读到改写后的值，不建议这样做，会影响到其他模块。</li></ul></li><li>命令提升：import命令具有提升效果，会提升到整个模块的头部，首先执行。</li><li>import不能带有表达式和变量：由于import是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。</li><li>兼容：通过 Babel 转码，CommonJS 模块的require命令和 ES6 模块的import命令，可以写在同一个模块里面，但是最好不要这样做。因为import在静态解析阶段执行，所以它是一个模块之中最早执行的。</li></ul><h4 id="_5-模块的整体加载" tabindex="-1"><a class="header-anchor" href="#_5-模块的整体加载" aria-hidden="true">#</a> 5. 模块的整体加载</h4><p>即将某个模块内的值全部加载进来</p><p>用星号 <code>*</code> 指定一个对象，所有输出值都加载在这个对象上面。<code>*</code> 代表所有所有输出值，as 后面的变量是一个对象，所有的输入值都在该对象上。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> person form <span class="token string">&#39;./profile.js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>*</code> 指定的对象，不能进行修改，是只读的。</p><h4 id="_6-export-default-默认输出" tabindex="-1"><a class="header-anchor" href="#_6-export-default-默认输出" aria-hidden="true">#</a> 6. export default: 默认输出</h4><p>export default命令，为模块指定默认输出。<br> 一个模块中只能有一个export default，一个模块可以同时有普通的export 和export default</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//a.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token comment">//直接抛出匿名函数</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token comment">//非匿名函数也可以，视同匿名函数</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//直接抛出属性值</span>

<span class="token comment">//也可以直接抛出一个对象[常用]</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">uname</span><span class="token operator">:</span><span class="token string">&#39;jinno&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//可以直接输出一个类</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-1-引入export-default语法" tabindex="-1"><a class="header-anchor" href="#_6-1-引入export-default语法" aria-hidden="true">#</a> 6.1 引入export default语法</h5><p>加载模块时，可以使用任意名称指向export default的输出,且不用{}</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.可以使用任意名称接收export default</span>
<span class="token keyword">import</span> say <span class="token keyword">from</span> <span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">;</span> 

<span class="token comment">//2.同时接收export default和普通export</span>
<span class="token keyword">import</span> hello<span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-2-default原理" tabindex="-1"><a class="header-anchor" href="#_6-2-default原理" aria-hidden="true">#</a> 6.2 default原理</h5><p>本质上，export default就是输出一个叫做default的变量或方法，然后系统允许你为它取任意名字。</p><h5 id="_6-3-html处理" tabindex="-1"><a class="header-anchor" href="#_6-3-html处理" aria-hidden="true">#</a> 6.3 HTML处理</h5><p>es6模块化语法，HTML可能无法解析，导入JS文件时，要指明type=module</p><p>不然会报错：<code>Cannot use import statement outside a module</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;./b.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ii-高级用法" tabindex="-1"><a class="header-anchor" href="#ii-高级用法" aria-hidden="true">#</a> Ⅱ. 高级用法</h2><h4 id="_1-export与import的复合写法" tabindex="-1"><a class="header-anchor" href="#_1-export与import的复合写法" aria-hidden="true">#</a> 1. export与import的复合写法</h4><p>如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。</p><p>export和import语句可以结合在一起，写成一行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.写法如下：</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>foo<span class="token punctuation">,</span>bar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;my_module&#39;</span><span class="token punctuation">;</span>
 <span class="token comment">//等价于</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>foo<span class="token punctuation">,</span>bar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;my_module&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>foo<span class="token punctuation">,</span>bar<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//2.起别名</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>foo <span class="token keyword">as</span> myFoo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;my_module&#39;</span><span class="token punctuation">;</span>
<span class="token comment">//3.整体输入输出</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;my_module&#39;</span><span class="token punctuation">;</span>
<span class="token comment">//4.输入输出默认接口</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token keyword">default</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token comment">//5.具名接口输入，改默认接口输出</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>foo <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;my_module&#39;</span><span class="token punctuation">;</span>
<span class="token comment">//6.默认接口输入，改具名接口输出</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token keyword">default</span> <span class="token keyword">as</span> foo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;my_module&#39;</span><span class="token punctuation">;</span>
<span class="token comment">//7.模块整体输入输出，2020后才支持</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">as</span> ns <span class="token keyword">from</span> <span class="token string">&quot;mod&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写成一行以后，目标模块并没有被导入当前模块，只是相对于对外转发了这两个接口，导致当前模块不能直接使用导入的模块。</p><h4 id="_2-模块的继承" tabindex="-1"><a class="header-anchor" href="#_2-模块的继承" aria-hidden="true">#</a> 2. 模块的继承</h4><p>模块之间也可以继承。</p><p>语法：<code>export *|{age,uname} from &quot;othreModule&quot;</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&quot;./b&quot;</span><span class="token punctuation">;</span> <span class="token comment">//export *，表示输出b模块的所有属性和方法</span>
<span class="token keyword">export</span> <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">fucntion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token comment">//也可输出b模块的指定属性或方法，并改名</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>uname <span class="token keyword">as</span> myname<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">;</span> <span class="token comment">//只输出模块的uname属性，并改名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继承时会忽略父模块的default方法</p><h4 id="_3-跨模块常量" tabindex="-1"><a class="header-anchor" href="#_3-跨模块常量" aria-hidden="true">#</a> 3. 跨模块常量</h4><p>const声明的常量只能在当前代码块有效，如果想设置跨模块的常量。可以采用以下方案</p><ul><li>专门建立一个目录（constants）将所有的常量文件保存在该目录。</li><li>将这些文件输出的常量，合并在常量目录下的index.js里面</li><li>使用的时候直接加载index.js即可</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.constants/db.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">//数据库相关的常量对象</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://my.couchdbserver.local:5984&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">admin_username</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">admin_password</span><span class="token operator">:</span> <span class="token string">&#39;admin password&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//2.constants/user.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> users <span class="token operator">=</span>  <span class="token comment">//用户相关的常量数组</span>
<span class="token punctuation">[</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;staff&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ceo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;chief&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;moderator&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//3.constants/index.js</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>db<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./db&#39;</span><span class="token punctuation">;</span> <span class="token comment">//使用继承语法，将所有的常量导入</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>users<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./users&#39;</span><span class="token punctuation">;</span>

<span class="token comment">//4.a.js:使用常量</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>db<span class="token punctuation">,</span>users<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./constants/index&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-循环加载" tabindex="-1"><a class="header-anchor" href="#_4-循环加载" aria-hidden="true">#</a> 4. 循环加载</h4><p>示例如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>bar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./b&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// b.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错：ReferenceError: foo is not defined</p><h5 id="_4-1-问题分析" tabindex="-1"><a class="header-anchor" href="#_4-1-问题分析" aria-hidden="true">#</a> 4.1 问题分析</h5><p>产生了循环加载，导致报错无法正常执行</p><ul><li>执行a.js以后，引擎发现它加载了b.js，会优先执行b.js，然后再执行a.js</li><li>执行b.js的时候，已知它从a.js输入了foo接口</li><li>这时不会去执行a.js，而是认为这个接口已经存在了，继续往下执行。</li><li>执行到第三行console.log(foo)的时候，才发现这个接口根本没定义，因此报错。</li></ul><h5 id="_4-2-解决方案" tabindex="-1"><a class="header-anchor" href="#_4-2-解决方案" aria-hidden="true">#</a> 4.2 解决方案</h5><p>其实在a.js中，只要让import晚点执行就好了，比foo的定义要晚。<br> 这可以通过将foo写成函数来解决，这是因为函数具有提升作用，执行import时函数就已经定义了。【注意：不能是函数表达式】</p><p>执行顺序：函数定义&gt;import执行&gt;其他表达式定义</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>bar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./b&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// b.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>bar<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-浏览器使用module" tabindex="-1"><a class="header-anchor" href="#iii-浏览器使用module" aria-hidden="true">#</a> Ⅲ. 浏览器使用Module</h2><h4 id="_1-module属性" tabindex="-1"><a class="header-anchor" href="#_1-module属性" aria-hidden="true">#</a> 1. module属性</h4><p>浏览器加载 ES6 模块，也使用<code>&lt;script&gt;</code>标签，但是要加入<code>type=&quot;module&quot;</code>属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;./foo.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-加载放肆" tabindex="-1"><a class="header-anchor" href="#_2-加载放肆" aria-hidden="true">#</a> 2. 加载放肆</h4><ul><li>异步加载：浏览器对于带有<code>type=&quot;module&quot;</code>的<code>&lt;script&gt;</code>，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了<code>&lt;script&gt;</code>标签的defer属性。</li><li>顺序：如果网页有多个<code>&lt;script type=&quot;module&quot;&gt;</code>，它们会按照在页面出现的顺序依次执行。</li><li>async：一旦使用了async属性，<code>&lt;script type=&quot;module&quot;&gt;</code>就不会按照在页面出现的顺序执行，而是只要该模块加载完成，就执行该模块。</li></ul><h4 id="_3-内嵌es6模块" tabindex="-1"><a class="header-anchor" href="#_3-内嵌es6模块" aria-hidden="true">#</a> 3. 内嵌ES6模块</h4><p>ES6 模块也允许内嵌在网页中，语法行为与加载外部脚本完全一致。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> <span class="token comment">//注意：type=&quot;module&quot;</span>
  <span class="token keyword">import</span> utils <span class="token keyword">from</span> <span class="token string">&quot;./utils.js&quot;</span><span class="token punctuation">;</span>

  <span class="token comment">// other code</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-注意事项" aria-hidden="true">#</a> 4. 注意事项</h4><ul><li>代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。</li><li>模块脚本自动采用严格模式，不管有没有声明use strict。</li><li>模块之中，可以使用import命令加载其他模块（.js后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用export命令输出对外接口。</li><li>模块之中，顶层的this关键字返回undefined，而不是指向window。也就是说，在模块顶层使用this关键字，是无意义的。</li><li>同一个模块如果加载多次，将只执行一次。</li></ul><h2 id="iv-node使用module" tabindex="-1"><a class="header-anchor" href="#iv-node使用module" aria-hidden="true">#</a> Ⅳ. Node使用Module</h2><p>JS主流有两种模块方案：ES6-Module和NodeJS-CommonJS。</p><p>CommonJS 模块是 Node.js 专用的，与 ES6 模块不兼容。从 Node.js v13.2 版本开始，Node.js 已经默认打开了 ES6 模块支持。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>暂略</p></div>`,89),o=[t];function c(i,l){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","5-3.Module.html.vue"]]);export{u as default};
