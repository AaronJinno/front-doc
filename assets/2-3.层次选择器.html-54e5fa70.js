import{_ as n,o as a,c as e,e as s,a as i}from"./app-fb2cd4f5.js";const t="/front-doc/img/basic/css/2-3-1.jpg",l="/front-doc/img/basic/css/2-3-2.jpg",c="/front-doc/img/basic/css/2-3-3.jpg",p="/front-doc/img/basic/css/2-3-4.jpg",o={},d=s('<p>层次选择器，又称复合选择器。</p><h4 id="_1-交集选择器" tabindex="-1"><a class="header-anchor" href="#_1-交集选择器" aria-hidden="true">#</a> 1. 交集选择器</h4><figure><img src="'+t+'" alt="2-3-1" tabindex="0" loading="lazy"><figcaption>2-3-1</figcaption></figure><ul><li>交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格，如h3.special。</li><li>交集选择器是并且的意思，同时满足这两个条件的选择器 <ul><li><code>div p.one</code>：选择的是div下类名是one的p标签。</li></ul></li></ul><h4 id="_2-并集选择器-分组选择器" tabindex="-1"><a class="header-anchor" href="#_2-并集选择器-分组选择器" aria-hidden="true">#</a> 2. 并集选择器（分组选择器）</h4><figure><img src="'+l+`" alt="2-3-2" tabindex="0" loading="lazy"><figcaption>2-3-2</figcaption></figure><ul><li>当多个元素需要设置相同的属性时，可以一起进行属性设置。</li><li>每个选择器用逗号分隔.</li><li>ID、class、标签都可进行分组</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">h1,h2,p,#a,.r</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-包含选择器-后代选择器" tabindex="-1"><a class="header-anchor" href="#_3-包含选择器-后代选择器" aria-hidden="true">#</a> 3. 包含选择器（后代选择器）</h4><figure><img src="`+c+'" alt="2-3-3" tabindex="0" loading="lazy"><figcaption>2-3-3</figcaption></figure><p>用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p>',11),r=i("p",{"css-module":"."},"语法格式：A B",-1),u=s(`<div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div p</span> <span class="token punctuation">{</span> 
    <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.name div a</span> <span class="token punctuation">{</span> 
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-子选择器" tabindex="-1"><a class="header-anchor" href="#_4-子选择器" aria-hidden="true">#</a> 4. 子选择器</h4><figure><img src="`+p+`" alt="2-3-4" tabindex="0" loading="lazy"><figcaption>2-3-4</figcaption></figure><p>子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接，注意，符号左右两侧各保留一个空格。</p><p>语法格式：<code>A &gt; B{...}</code>，只有子标签可行，孙标签不可行。</p><p>注意：与包含选择器的区别在于包含允许&quot;子标签&quot;甚至&quot;孙子标签&quot;及嵌套更深的标签匹配相应的样式，而子选择器强制指定目标选择器作为 包含选择器对应的标签 内部的标签，语法格式：A &gt; B{...}（A、B为HTML元素/标签）。只有子标签可行，孙标签不可行。</p><h4 id="_5-相邻兄弟选择器" tabindex="-1"><a class="header-anchor" href="#_5-相邻兄弟选择器" aria-hidden="true">#</a> 5. 相邻兄弟选择器</h4><p>可选择紧接在另一元素后的元素，且二者有相同父元素。</p><p>语法格式：<code>A +B {...}</code>A标签的同等级标签B会匹配样式。</p><h4 id="_6-后续兄弟选择器" tabindex="-1"><a class="header-anchor" href="#_6-后续兄弟选择器" aria-hidden="true">#</a> 6. 后续兄弟选择器：</h4><ul><li>条件：选择器E和F有相同父元素，属于兄弟同级，且F元素在E元素后面</li><li>效果：E元素后面所有同级的兄弟元素F都被选中</li><li>与E+F的区别：E+F是只选择E元素后面的第一个同级的兄弟元素F。 <ul><li>而E~F会选择指定元素之后的相邻兄弟元素，之前的不会选择。</li></ul></li></ul><p>语法格式：<code>A~B{...}</code></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#p1~p</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">//p2和p3都被选中了
#p1+p</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">}</span>//只有p2被选中了
&lt;div&gt;
    &lt;p id=<span class="token string">&#39;p1&#39;</span>&gt;div&gt;p&lt;/p&gt;
    &lt;p id=<span class="token string">&#39;p2&#39;</span>&gt;div&gt;p-2&lt;/p&gt;
    &lt;p id=<span class="token string">&#39;p3&#39;</span>&gt;div&gt;p-3&lt;/p&gt;
    &lt;h1&gt;div&gt;h1-2&lt;/h1&gt;
&lt;/div&gt;
&lt;h1&gt;h1..&lt;/h1&gt;
&lt;p id=<span class="token string">&#39;p4&#39;</span>&gt;hello world&lt;/p&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),g=[d,r,u];function v(h,m){return a(),e("div",null,g)}const b=n(o,[["render",v],["__file","2-3.层次选择器.html.vue"]]);export{b as default};
