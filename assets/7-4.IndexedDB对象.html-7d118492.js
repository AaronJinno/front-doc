import{_ as i,r as o,o as r,c as l,a as e,b as a,d as t,e as n}from"./app-351da1f5.js";const c={},d=n(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用IndexedDB API，就是使用它的各类对象的接口。</p></div><h4 id="_1-indexeddb对象" tabindex="-1"><a class="header-anchor" href="#_1-indexeddb对象" aria-hidden="true">#</a> 1. indexedDB对象</h4><p>浏览器原生提供indexedDB对象，作为开发者的操作接口。</p><h5 id="_1-1-indexeddb-open-连接数据库" tabindex="-1"><a class="header-anchor" href="#_1-1-indexeddb-open-连接数据库" aria-hidden="true">#</a> 1.1 indexedDB.open()：连接数据库</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//打开一个名为test、版本为1的数据库。如果该数据库不存在，则会新建该数据库。</span>
<span class="token keyword">var</span> openRequest <span class="token operator">=</span> window<span class="token punctuation">.</span>indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-indexeddb-deletedatabase-删除数据库" tabindex="-1"><a class="header-anchor" href="#_1-2-indexeddb-deletedatabase-删除数据库" aria-hidden="true">#</a> 1.2 indexedDB.deleteDatabase()：删除数据库</h5><p>删除一个数据库，参数为数据库的名字。它会立刻返回一个IDBOpenDBRequest对象，然后对数据库执行异步删除。删除操作的结果会通过事件通知，IDBOpenDBRequest对象可以监听以下事件。</p><ul><li>success：删除成功</li><li>error：删除报错(删除不存在的数据库并不会报错)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> DBDeleteRequest <span class="token operator">=</span> window<span class="token punctuation">.</span>indexedDB<span class="token punctuation">.</span><span class="token function">deleteDatabase</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
DBDeleteRequest<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">consolelog</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
DBDeleteRequest<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-3-indexeddb-cmp-比较两个值是否为indexeddb的相同主键" tabindex="-1"><a class="header-anchor" href="#_1-3-indexeddb-cmp-比较两个值是否为indexeddb的相同主键" aria-hidden="true">#</a> 1.3 indexedDB.cmp()：比较两个值是否为indexedDB的相同主键</h5><p>它返回一个整数，表示比较的结果：0表示相同，1表示第一个主键大于第二个主键，-1表示第一个主键小于第二个主键。如果参数是布尔值或对象，它会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>indexedDB<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-idbrequest对象" tabindex="-1"><a class="header-anchor" href="#_2-idbrequest对象" aria-hidden="true">#</a> 2. IDBRequest对象</h4><ul><li>IDBRequest对象表示打开的数据库连接，indexedDB.open()方法和indexedDB.deleteDatabase()方法会返回这个对象。数据库的操作都是通过这个对象完成的。</li><li>这个对象的所有操作都是异步操作，要通过readyState属性判断是否完成，如果为pending就表示操作正在进行，如果为done就表示操作完成，可能成功也可能失败。</li><li>操作完成以后，触发success事件或error事件，这时可以通过result属性和error属性拿到操作结果。如果在pending阶段，就去读取这两个属性，是会报错的。</li></ul><h5 id="_2-1-方法" tabindex="-1"><a class="header-anchor" href="#_2-1-方法" aria-hidden="true">#</a> 2.1 方法</h5><ul><li>IDBRequest.readyState：等于pending表示操作正在进行，等于done表示操作正在完成。</li><li>IDBRequest.result：返回请求的结果。如果请求失败、结果不可用，读取该属性会报错。</li><li>IDBRequest.error：请求失败时，返回错误对象。</li><li>IDBRequest.source：返回请求的来源（比如索引对象或 ObjectStore）。</li><li>IDBRequest.transaction：返回当前请求正在进行的事务，如果不包含事务，返回null。</li><li>IDBRequest.onsuccess：指定success事件的监听函数。</li><li>IDBRequest.onerror：指定error事件的监听函数。</li><li>IDBOpenDBRequest 对象继承了 IDBRequest 对象，提供了两个额外的事件监听属性。 <ul><li>IDBOpenDBRequest.onblocked：指定blocked事件（upgradeneeded事件触发时，数据库仍然在使用）的监听函数。</li><li>IDBOpenDBRequest.onupgradeneeded：upgradeneeded事件的监听函数。</li></ul></li></ul><h4 id="_3-idbdatabase对象" tabindex="-1"><a class="header-anchor" href="#_3-idbdatabase对象" aria-hidden="true">#</a> 3. IDBDatabase对象</h4><p>打开数据成功以后，可以从IDBRequest对象的result属性上面，拿到一个IDBDatabase对象，它表示连接的数据库。后面对数据库的操作，都通过这个对象完成。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> idb<span class="token punctuation">;</span>
<span class="token keyword">var</span> request <span class="token operator">=</span> window<span class="token punctuation">.</span>indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    idb <span class="token operator">=</span> request<span class="token punctuation">.</span>result<span class="token punctuation">;</span><span class="token comment">//或e.target.result;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-idbdatabase对象的属性" tabindex="-1"><a class="header-anchor" href="#_3-1-idbdatabase对象的属性" aria-hidden="true">#</a> 3.1 IDBDatabase对象的属性</h5>`,20),p={href:"http://IDBDatabase.name",target:"_blank",rel:"noopener noreferrer"},u=e("li",null,"IDBDatabase.version：整数，数据库版本。数据库第一次创建时，该属性为空字符串。",-1),h=e("li",null,"IDBDatabase.objectStoreNames：DOMStringList 对象（字符串的集合），包含当前数据的所有 object store 的名字。（该对象包含了当前库中所有的表的名字）。",-1),b=e("li",null,"IDBDatabase.onabort：指定 abort 事件（事务中止）的监听函数。",-1),D=e("li",null,"IDBDatabase.onclose：指定 close 事件（数据库意外关闭）的监听函数。",-1),I=e("li",null,"IDBDatabase.onerror：指定 error 事件（访问数据库失败）的监听函数。",-1),k=e("li",null,"IDBDatabase.onversionchange：数据库版本变化时触发（发生upgradeneeded事件，或调用indexedDB.deleteDatabase()）",-1),B=n('<h5 id="_3-2-方法" tabindex="-1"><a class="header-anchor" href="#_3-2-方法" aria-hidden="true">#</a> 3.2 方法</h5><ul><li>IDBDatabase.close()：关闭数据库连接，实际会等所有事务完成后再关闭。</li><li>IDBDatabase.createObjectStore()：创建存放数据的对象仓库，类似于传统关系型数据库的表格，返回一个 IDBObjectStore 对象。该方法只能在versionchange事件监听函数中调用。</li><li>IDBDatabase.deleteObjectStore()：删除指定的对象仓库。该方法只能在versionchange事件监听函数中调用。</li><li>IDBDatabase.transaction()：返回一个 IDBTransaction 事务对象。</li></ul><h4 id="_4-idbobjectstore对象" tabindex="-1"><a class="header-anchor" href="#_4-idbobjectstore对象" aria-hidden="true">#</a> 4. IDBObjectStore对象</h4><h5 id="_4-1-属性" tabindex="-1"><a class="header-anchor" href="#_4-1-属性" aria-hidden="true">#</a> 4.1 属性</h5>',4),_=e("li",null,"IDBObjectStore.indexNames：返回一个类似数组的对象（DOMStringList），包含了当前对象仓库的所有索引。",-1),v=e("li",null,"IDBObjectStore.keyPath：返回当前对象仓库的主键。",-1),x={href:"http://IDBObjectStore.name",target:"_blank",rel:"noopener noreferrer"},m=e("li",null,"IDBObjectStore.transaction：返回当前对象仓库所属的事务对象。",-1),g=e("li",null,"IDBObjectStore.autoIncrement：布尔值，表示主键是否会自动递增。",-1),y=n(`<h5 id="_4-2-方法" tabindex="-1"><a class="header-anchor" href="#_4-2-方法" aria-hidden="true">#</a> 4.2 方法</h5><ul><li>objectStore.add(value, key)：用于向对象仓库添加数据，返回一个 IDBRequest 对象。该方法只用于添加数据，如果主键相同会报错，因此更新数据必须使用put()方法。</li><li>objectStore.put(item, key)：用于更新某个主键对应的数据记录，如果对应的键值不存在，则插入一条新的记录。该方法返回一个 IDBRequest 对象。</li><li>IDBObjectStore.clear()：删除当前对象仓库的所有记录。该方法返回一个 IDBRequest 对象。</li><li>objectStore.delete(Key)：用于删除指定主键的记录。该方法返回一个 IDBRequest 对象。参数为主键的值。</li><li>IDBObjectStore.count(key)：用于计算记录的数量。该方法返回一个 IDBRequest 对象。<br> 不带参数时，该方法返回当前对象仓库的所有记录数量。如果主键或 IDBKeyRange 对象作为参数，则返回对应的记录数量。</li><li>objectStore.getKey(key)：用于获取主键。该方法返回一个 IDBRequest 对象。参数可以是主键值或 IDBKeyRange 对象。</li><li>objectStore.get(key)：用于获取主键对应主键的数据记录。该方法返回一个 IDBRequest 对象。</li><li>objectStore.index(name)：返回指定名称的索引对象 IDBIndex。有了索引以后，就可以针对索引所在的属性读取数据。</li><li>objectStore.createIndex(indexName, keyPath, objectParameters)：用于新建当前数据库的一个索引。该方法只能在VersionChange监听函数里面调用。 <ul><li>indexName：索引名</li><li>keyPath：主键</li><li>objectParameters：配置对象（可选） <ul><li>unique：如果设为true，将不允许重复的值</li><li>multiEntry：如果设为true，对于有多个值的主键数组，每个值将在索引里面新建一个条目，否则主键数组对应一个条目。</li></ul></li></ul></li><li>objectStore.deleteIndex(indexName)：用于删除指定的索引。该方法只能在VersionChange监听函数里面调用。</li><li>IDBObjectStore.openCursor()：用于获取一个指针对象。指针对象可以用来遍历数据。该对象也是异步的，有自己的success和error事件，可以对它们指定监听函数。</li></ul><h4 id="_5-idbtransaction-对象" tabindex="-1"><a class="header-anchor" href="#_5-idbtransaction-对象" aria-hidden="true">#</a> 5. IDBTransaction 对象</h4><p>IDBTransaction 对象用来异步操作数据库事务，所有的读写操作都要通过这个对象进行。</p><h5 id="_5-1-获取该对象" tabindex="-1"><a class="header-anchor" href="#_5-1-获取该对象" aria-hidden="true">#</a> 5.1 获取该对象</h5><p>参数1是数据对象，参数2是读写模式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> transaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;readwrite&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_5-2-属性" tabindex="-1"><a class="header-anchor" href="#_5-2-属性" aria-hidden="true">#</a> 5.2 属性</h5><ul><li>IDBTransaction.db：返回当前事务所在的数据库对象 IDBDatabase。</li><li>IDBTransaction.error：返回当前事务的错误。如果事务没有结束，或者事务成功结束，或者被手动终止，该方法返回null。</li><li>IDBTransaction.mode：返回当前事务的模式，默认是readonly（只读），另一个值是readwrite。</li><li>IDBTransaction.objectStoreNames：返回一个类似数组的对象 DOMStringList，成员是当前事务涉及的对象仓库的名字。</li><li>IDBTransaction.onabort：指定abort事件（事务中断）的监听函数。</li><li>IDBTransaction.oncomplete：指定complete事件（事务成功）的监听函数。</li><li>IDBTransaction.onerror：指定error事件（事务失败）的监听函数。</li></ul><h5 id="_5-3-方法" tabindex="-1"><a class="header-anchor" href="#_5-3-方法" aria-hidden="true">#</a> 5.3 方法</h5><ul><li>IDBTransaction.abort()：终止当前事务，回滚所有已经进行的变更。</li><li>IDBTransaction.objectStore(name)：返回指定名称的对象仓库 IDBObjectStore。</li></ul><h4 id="_6-idbindex对象" tabindex="-1"><a class="header-anchor" href="#_6-idbindex对象" aria-hidden="true">#</a> 6. IDBIndex对象</h4><p>IDBIndex 对象代表数据库的索引，通过这个对象可以获取数据库里面的记录。数据记录的主键默认就是带有索引，IDBIndex 对象主要用于通过除主键以外的其他键，建立索引获取对象。</p><h5 id="_6-1-获得该对象" tabindex="-1"><a class="header-anchor" href="#_6-1-获得该对象" aria-hidden="true">#</a> 6.1 获得该对象</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myIndex <span class="token operator">=</span> objectStore<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">&#39;lName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_6-2-属性" tabindex="-1"><a class="header-anchor" href="#_6-2-属性" aria-hidden="true">#</a> 6.2 属性</h5>`,16),f={href:"http://IDBIndex.name",target:"_blank",rel:"noopener noreferrer"},j=e("li",null,"IDBIndex.objectStore：索引所在的对象仓库。",-1),R=e("li",null,"IDBIndex.keyPath：索引的主键。",-1),q=e("li",null,"IDBIndex.multiEntry：布尔值，针对keyPath为数组的情况，如果设为true，创建数组时，每个数组成员都会有一个条目，否则每个数组都只有一个条目。",-1),S=e("li",null,"IDBIndex.unique：布尔值，表示创建索引时是否允许相同的主键。",-1),O=n(`<h5 id="_6-3-方法" tabindex="-1"><a class="header-anchor" href="#_6-3-方法" aria-hidden="true">#</a> 6.3 方法</h5><p>注意：它们都是异步的，立即返回的都是一个 IDBRequest 对象。</p><ul><li>IDBIndex.count()：用来获取记录的数量。它可以接受主键或 IDBKeyRange 对象作为参数，这时只返回符合主键的记录数量，否则返回所有记录的数量。</li><li>IDBIndex.get(key)：用来获取符合指定主键的数据记录。</li><li>IDBIndex.getKey(key)：用来获取指定的主键。</li><li>IDBIndex.getAll()：用来获取所有的数据记录。它可以接受两个参数，都是可选的，第一个参数用来指定主键，第二个参数用来指定返回记录的数量。如果省略这两个参数，则返回所有记录。由于获取成功时，浏览器必须生成所有对象，所以对性能有影响。如果数据集比较大，建议使用 IDBCursor 对象。</li><li>IDBIndex.getAllKeys()：该方法与IDBIndex.getAll()方法相似，区别是获取所有主键。</li><li>IDBIndex.openCursor()：用来获取一个 IDBCursor 对象，用来遍历索引里面的所有条目。</li><li>IDBIndex.openKeyCursor()：该方法与IDBIndex.openCursor()方法相似，区别是遍历所有条目的主键。</li></ul><h4 id="_7-idbcursor对象" tabindex="-1"><a class="header-anchor" href="#_7-idbcursor对象" aria-hidden="true">#</a> 7. IDBCursor对象</h4><p>其实主要用的是IDBCursorWithValue对象。<br> 用来遍历数据仓库（IDBObjectStore）或索引（IDBIndex）的记录。</p><h5 id="_7-1-获得该对象" tabindex="-1"><a class="header-anchor" href="#_7-1-获得该对象" aria-hidden="true">#</a> 7.1 获得该对象</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> request <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">openCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_7-2-属性" tabindex="-1"><a class="header-anchor" href="#_7-2-属性" aria-hidden="true">#</a> 7.2 属性</h5><ul><li>IDBCursor.source：返回正在遍历的对象仓库或索引。</li><li>IDBCursor.direction：字符串，表示指针遍历的方向。共有四个可能的值：next（从头开始向后遍历）、nextunique（从头开始向后遍历，重复的值只遍历一次）、prev（从尾部开始向前遍历）、prevunique（从尾部开始向前遍历，重复的值只遍历一次）。该属性通过IDBObjectStore.openCursor()方法的第二个参数指定，一旦指定就不能改变了。</li><li>IDBCursor.key：返回当前记录的主键。</li><li>IDBCursor.value：返回当前记录的数据值。</li><li>IDBCursor.primaryKey：返回当前记录的主键。对于数据仓库（objectStore）来说，这个属性等同于 IDBCursor.key；对于索引，IDBCursor.key 返回索引的位置值，该属性返回数据记录的主键。</li></ul><h5 id="_7-3-方法。" tabindex="-1"><a class="header-anchor" href="#_7-3-方法。" aria-hidden="true">#</a> 7.3 方法。</h5><ul><li>IDBCursor.advance(n)：指针向前移动 n 个位置。</li><li>IDBCursor.continue()：指针向前移动一个位置。它可以接受一个主键作为参数，这时会跳转到这个主键。</li><li>IDBCursor.continuePrimaryKey()：该方法需要两个参数，第一个是key，第二个是primaryKey，将指针移到符合这两个参数的位置。</li><li>IDBCursor.delete()：用来删除当前位置的记录，返回一个 IDBRequest 对象。该方法不会改变指针的位置。</li><li>IDBCursor.update()：用来更新当前位置的记录，返回一个 IDBRequest 对象。它的参数是要写入数据库的新的值。</li></ul><h4 id="_8-idbkeyrange-对象" tabindex="-1"><a class="header-anchor" href="#_8-idbkeyrange-对象" aria-hidden="true">#</a> 8. IDBKeyRange 对象</h4><p>IDBKeyRange 对象代表数据仓库（object store）里面的一组主键。根据这组主键，可以获取数据仓库或索引里面的一组记录。需要配合IDBCursor。</p><h5 id="_8-1-属性" tabindex="-1"><a class="header-anchor" href="#_8-1-属性" aria-hidden="true">#</a> 8.1 属性</h5><ul><li>IDBKeyRange.lower：返回下限</li><li>IDBKeyRange.lowerOpen：布尔值，表示下限是否为开区间（即下限是否排除在范围之外）</li><li>IDBKeyRange.upper：返回上限</li><li>IDBKeyRange.upperOpen：布尔值，表示上限是否为开区间（即上限是否排除在范围之外）</li></ul><h5 id="_8-2-方法" tabindex="-1"><a class="header-anchor" href="#_8-2-方法" aria-hidden="true">#</a> 8.2 方法</h5><ul><li>IDBKeyRange 可以只包含一个值，也可以指定上限和下限。它有四个静态方法，用来指定主键的范围。</li><li>IDBKeyRange.lowerBound()：指定下限。</li><li>IDBKeyRange.upperBound()：指定上限。</li><li>IDBKeyRange.bound()：同时指定上下限。</li><li>IDBKeyRange.only()：指定只包含一个值。</li></ul>`,17);function C(w,K){const s=o("ExternalLinkIcon");return r(),l("div",null,[d,e("ul",null,[e("li",null,[e("a",p,[a("IDBDatabase.name"),t(s)]),a("：字符串，数据库名称。")]),u,h,b,D,I,k]),B,e("ul",null,[_,v,e("li",null,[e("a",x,[a("IDBObjectStore.name"),t(s)]),a("：返回当前对象仓库的名称。")]),m,g]),y,e("ul",null,[e("li",null,[e("a",f,[a("IDBIndex.name"),t(s)]),a("：字符串，索引的名称。")]),j,R,q,S]),O])}const N=i(c,[["render",C],["__file","7-4.IndexedDB对象.html.vue"]]);export{N as default};
