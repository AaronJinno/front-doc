import{_ as n,o as a,c as s,e as t}from"./app-8888c5c9.js";const e={},p=t(`<h2 id="i-字符串扩展" tabindex="-1"><a class="header-anchor" href="#i-字符串扩展" aria-hidden="true">#</a> Ⅰ. 字符串扩展</h2><h4 id="_1-字符串的unicode表示法" tabindex="-1"><a class="header-anchor" href="#_1-字符串的unicode表示法" aria-hidden="true">#</a> 1. 字符串的Unicode表示法</h4><p>ES6允许采用<code>\\uxxxx</code>形式表示一个字符，其中xxxx表示字符的 Unicode 码点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;\\u0061&quot;</span><span class="token comment">// &quot;a&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_1-1-es5的限制" tabindex="-1"><a class="header-anchor" href="#_1-1-es5的限制" aria-hidden="true">#</a> 1.1 ES5的限制</h5><p>在ES5中，这种表示法只限于码点在<code>\\u0000~\\uFFFF</code>之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;\\uD842\\uDFB7&quot;</span> <span class="token comment">//&quot;吉&quot;</span>
<span class="token string">&quot;\\u20BB7&quot;</span>  <span class="token comment">// &quot; 7&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果直接在<code>\\u</code>后面跟上超过0xFFFF的数值（比如<code>\\u20BB7</code>），JavaScript 会理解成<br><code>\\u20BB+7</code>。由于<code>\\u20BB</code>是一个不可打印字符，所以只会显示一个空格，后面跟着一个7。</p><h5 id="_1-2-es6的改进" tabindex="-1"><a class="header-anchor" href="#_1-2-es6的改进" aria-hidden="true">#</a> 1.2 ES6的改进</h5><p>只要将码点放入大括号，就能正确解读该字符。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;\\u{20BB7}&quot;</span><span class="token comment">// &quot;𠮷&quot;</span>
<span class="token string">&quot;\\u{41}\\u{42}\\u{43}&quot;</span> <span class="token comment">// &quot;ABC&quot;</span>
<span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
hell\\u<span class="token punctuation">{</span>6F<span class="token punctuation">}</span> <span class="token comment">// 123</span>
<span class="token string">&#39;\\u{1F680}&#39;</span> <span class="token operator">===</span> <span class="token string">&#39;\\uD83D\\uDE80&#39;</span><span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-字符串的遍历器接口" tabindex="-1"><a class="header-anchor" href="#_2-字符串的遍历器接口" aria-hidden="true">#</a> 2. 字符串的遍历器接口</h4><p>ES6 为字符串添加了遍历器接口（详见Iterator），使得字符串可以被for...of循环遍历。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> codePoint <span class="token keyword">of</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>codePoint<span class="token punctuation">)</span> <span class="token comment">//“f&quot;;&quot;0&quot;;&quot;o&quot;;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-模板字符串" tabindex="-1"><a class="header-anchor" href="#ii-模板字符串" aria-hidden="true">#</a> Ⅱ. 模板字符串</h2><h4 id="_1-模板" tabindex="-1"><a class="header-anchor" href="#_1-模板" aria-hidden="true">#</a> 1. 模板</h4><p>这里的模板指的就是输出HTML模板（样式+内容）。<br> 传统的输出模板如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#result&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span> <span class="token comment">// ==JS的 .innerHTML</span>
  <span class="token string">&#39;There are &lt;b&gt;&#39;</span> <span class="token operator">+</span> basket<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token string">&#39;&lt;/b&gt; &#39;</span> <span class="token operator">+</span>
  <span class="token string">&#39;items in your basket, &#39;</span> <span class="token operator">+</span>
  <span class="token string">&#39;&lt;em&gt;&#39;</span> <span class="token operator">+</span> basket<span class="token punctuation">.</span>onSale <span class="token operator">+</span>
  <span class="token string">&#39;&lt;/em&gt; are on sale!&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-es6的模板字符串" tabindex="-1"><a class="header-anchor" href="#_2-es6的模板字符串" aria-hidden="true">#</a> 2. ES6的模板字符串</h4><p>上面这种写法相当繁琐不方便，ES6 引入了模板字符串解决这个问题。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dom_obj<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  &lt;h1&gt;hello&lt;/h1&gt;
  &lt;h2&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>uname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h2&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">// 字符串中嵌入变量</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token string">&quot;today&quot;</span><span class="token punctuation">;</span>
<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, how are you </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-模板字符串" tabindex="-1"><a class="header-anchor" href="#_2-1-模板字符串" aria-hidden="true">#</a> 2.1 模板字符串</h5><p>模板字符串是增强版的字符串，用反引号（\`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量\${name}。他可以直接解析HTML标签。</p><h5 id="_2-2-模板字符串中使用反引号" tabindex="-1"><a class="header-anchor" href="#_2-2-模板字符串中使用反引号" aria-hidden="true">#</a> 2.2 模板字符串中使用反引号</h5><p>如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> greeting <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\\`Yo\\\` World!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-3-保留换行和缩进" tabindex="-1"><a class="header-anchor" href="#_2-3-保留换行和缩进" aria-hidden="true">#</a> 2.3 保留换行和缩进</h5><p>内容中可以直接出现换行符。</p><p>如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;ul&gt;
  &lt;li&gt;first&lt;/li&gt;
  &lt;li&gt;second&lt;/li&gt;
&lt;/ul&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-4-使用trim消除缩进和换行" tabindex="-1"><a class="header-anchor" href="#_2-4-使用trim消除缩进和换行" aria-hidden="true">#</a> 2.4 使用trim消除缩进和换行</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;ul&gt;
  &lt;li&gt;first&lt;/li&gt;
  &lt;li&gt;second&lt;/li&gt;
&lt;/ul&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-模板中嵌入js" tabindex="-1"><a class="header-anchor" href="#_3-模板中嵌入js" aria-hidden="true">#</a> 3. 模板中嵌入JS</h4><h5 id="_3-1-嵌入变量" tabindex="-1"><a class="header-anchor" href="#_3-1-嵌入变量" aria-hidden="true">#</a> 3.1 嵌入变量</h5><p>模板字符串中嵌入变量，需要将变量名写在\${}之中，变量必须已经声明</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">User </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is not authorized to do </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>action<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 变量place没有声明</span>
<span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>place<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-嵌入表达式" tabindex="-1"><a class="header-anchor" href="#_3-2-嵌入表达式" aria-hidden="true">#</a> 3.2 嵌入表达式</h5><p>除了直接使用变量，大括号内部还可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性，深圳可以直接调用函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x <span class="token operator">+</span> y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>y <span class="token operator">*</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>obj<span class="token punctuation">.</span>x <span class="token operator">+</span> obj<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token comment">//调用函数</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">foo </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bar</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-对象的转换" tabindex="-1"><a class="header-anchor" href="#_3-3-对象的转换" aria-hidden="true">#</a> 3.3 对象的转换</h5><p>如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的toString方法。</p><h4 id="_4-标签模板" tabindex="-1"><a class="header-anchor" href="#_4-标签模板" aria-hidden="true">#</a> 4. 标签模板</h4><p>标签模板可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能（tagged template）。</p><p>暂略，用的很少</p><h2 id="iii-新增方法" tabindex="-1"><a class="header-anchor" href="#iii-新增方法" aria-hidden="true">#</a> Ⅲ. 新增方法</h2><p>只列出常用的方法，与正则有关的方法，详见正则</p><h4 id="_1-trim-去除空格" tabindex="-1"><a class="header-anchor" href="#_1-trim-去除空格" aria-hidden="true">#</a> 1. trim(): 去除空格</h4><ul><li>trim(): 修改字符串前后的空格</li><li>trimStart(): 消除字符串头部的空格</li><li>trimEnd(): 消除尾部的空格</li></ul><p>它们返回的都是新字符串，不会修改原始字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">&#39;  abc  &#39;</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;abc&quot;</span>
s<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;abc  &quot;</span>
s<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;  abc&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50),i=[p];function o(c,l){return a(),s("div",null,i)}const r=n(e,[["render",o],["__file","2-1.String扩展.html.vue"]]);export{r as default};
