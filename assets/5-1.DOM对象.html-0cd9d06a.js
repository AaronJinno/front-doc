import{_ as a,o as n,c as e,e as i}from"./app-8888c5c9.js";const s="/front-doc/img/basic/js/5-1-1.jpg",d="/front-doc/img/basic/js/5-1-2.jpg",o="/front-doc/img/basic/js/5-1-3.jpg",t={},c=i('<h2 id="i-dom对象介绍" tabindex="-1"><a class="header-anchor" href="#i-dom对象介绍" aria-hidden="true">#</a> Ⅰ. DOM对象介绍</h2><h4 id="_1-文档对象模型" tabindex="-1"><a class="header-anchor" href="#_1-文档对象模型" aria-hidden="true">#</a> 1. 文档对象模型</h4><ul><li>Document：文档，JS中指的是html文档</li><li>Object：对象，指的是JS对象，网页中每一个部分都转换为了一个对象</li><li>Model：模型，使用模型来表示对象之间的关系，方便我们获取对象</li></ul><figure><img src="'+s+'" alt="5-1-1" tabindex="0" loading="lazy"><figcaption>5-1-1</figcaption></figure><p>在JS里面，DOM就是将html文档里面的标签，转换成JS的对象</p><h4 id="_2-node-节点" tabindex="-1"><a class="header-anchor" href="#_2-node-节点" aria-hidden="true">#</a> 2. Node：节点</h4><p>节点是构成网页最基础的部分，网页中的每一个部分都是一个节点，如：HTML标签、属性、文本、注释、包括整个文档。</p><p>节点之间的具体类型也是不同的</p><ul><li>标签：元素节点；HTML文档中的HTML标签</li><li>属性：属性节点；元素的属性</li><li>文本：文本节点；HTML标签中的文本内容</li><li>文档：文档节点；整个HTML文档<br> 节点的类型不同，节点对象的属性和方法也都不相同。</li></ul><h4 id="_3-节点的属性" tabindex="-1"><a class="header-anchor" href="#_3-节点的属性" aria-hidden="true">#</a> 3. 节点的属性</h4><figure><img src="'+d+'" alt="5-1-2" tabindex="0" loading="lazy"><figcaption>5-1-2</figcaption></figure><ul><li>nodeName:获得节点的名称</li><li>nodeType:获得节点的类型（1、2、3）</li><li>nodeValue：获得节点的文本内容&amp;属性值</li></ul><h4 id="_4-dom的意义" tabindex="-1"><a class="header-anchor" href="#_4-dom的意义" aria-hidden="true">#</a> 4. DOM的意义</h4><p>当我们在浏览器打开html文档的时候，就已经将标签转换成对象了。使用DOM的目的就是将HTML标签，转换为JS对象，方便进行操作。我们主要的操作是：先通过JS找到对象，然后操作。</p><h4 id="_5-dom对象" tabindex="-1"><a class="header-anchor" href="#_5-dom对象" aria-hidden="true">#</a> 5. DOM对象</h4><p>DOM将html标签转换成JavaScript对象之后，标签里面的属性也会被转换JavaScript对象的属性</p><p>语法：<code>var 变量 = 获得节点的方法(目标节点/表述HTML标签)</code></p><p>该变量即为HTML标签的<code>DOM[JS]</code>对象。对DOM对象的操作，可以完全映射到HTML标签内。可以为DOM对象（DOM节点）进行属性、内容和样式的操作。</p><h4 id="_6-层级关系" tabindex="-1"><a class="header-anchor" href="#_6-层级关系" aria-hidden="true">#</a> 6. 层级关系</h4><p>Html文档里面的标签，不是孤立存在的，标签之间是有层级关系的，当转换成JavaScript的对象之后，这些层级关系依然存在。</p><figure><img src="'+o+`" alt="5-1-3" tabindex="0" loading="lazy"><figcaption>5-1-3</figcaption></figure><h2 id="ii-dom文档加载" tabindex="-1"><a class="header-anchor" href="#ii-dom文档加载" aria-hidden="true">#</a> Ⅱ. DOM文档加载</h2><h4 id="_1-document-文档节点" tabindex="-1"><a class="header-anchor" href="#_1-document-文档节点" aria-hidden="true">#</a> 1. document：文档节点</h4><p>浏览器已经为我们提供了文档节点对象，这个对象是window的属性，可以在页面中直接使用，文档节点代表的是整个网页。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得整个网页的节点对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-js代码的位置" tabindex="-1"><a class="header-anchor" href="#_2-js代码的位置" aria-hidden="true">#</a> 2. JS代码的位置</h4><p>浏览器加载一个页面时，是安装自上而下的顺序加载的，读取一行就运行一行，如果将JS代码写在页面上面，在代码执行时，页面还没加载，页面没有加载DOM对象，会导致JS无法获取DOM对象</p><p>因此将JS代码编写到页面的下部就是为了可以在页面加载完毕以后再执行JS代码。<br> 也可以将代码写在文档就绪事件中，等页面加载后再执行JS代码。</p><h4 id="_3-onload-文档就绪事件" tabindex="-1"><a class="header-anchor" href="#_3-onload-文档就绪事件" aria-hidden="true">#</a> 3. onload：文档就绪事件</h4><p>onload事件会在整个页面加载完成之后触发。</p><p>为window绑定一个onload事件，该事件对应的响应函数会在页面加载完毕之后执行，这样就可以确保我们的代码执行时，所有的DOM对象已经加载完毕了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//要执行的JS代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-选择" tabindex="-1"><a class="header-anchor" href="#_4-选择" aria-hidden="true">#</a> 4. 选择</h4><p>最优的方案是将JS代码写在页面最下面，这样页面加载的速度是最快的。<br> 如果写在页面上面，就算JS不执行，还是会进行加载的。</p>`,34),r=[c];function l(p,h){return n(),e("div",null,r)}const m=a(t,[["render",l],["__file","5-1.DOM对象.html.vue"]]);export{m as default};
